{"index.html":"<html><head><script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div class=\"row\">\n        <div class=\"col-sm-12\">\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <div id=\"clockgauge\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}function gauge1() {\r\n    var gauge1 = new ej.circulargauge.CircularGauge({\r\n        centerY: '45%',\r\n        resized: function (args) {\r\n            location.reload();\r\n        },\r\n\r\n        titleStyle: { color: 'black', size: '16px' },\r\n        axes: [\r\n            {\r\n                startAngle: 0, endAngle: 0,\r\n                lineStyle: { width: 0 }, radius: ej.base.Browser.isDevice ? '90%' : '70%',\r\n                ranges: [\r\n                    {\r\n                        start: 0, end: 3,\r\n                        color: 'rgb(128,128,128)'\r\n                    }, {\r\n                        start: 3, end: 12,\r\n                        color: 'rgb(192,192,192)'\r\n                    }\r\n                ],\r\n                annotations: [{\r\n                    angle: 270, radius: '50%', zIndex: '1',\r\n                    content: '<div id=\"minutes\" style=\"width:75px;height:75px;\"></div>'\r\n                }, {\r\n                    angle: 180, radius: '50%', zIndex: '1',\r\n                    content: '<div id=\"seconds\" style=\"width:75px;height:75px;\"></div>'\r\n                }, {\r\n                    angle: 90, zIndex: '1',\r\n                    radius: '40%',\r\n                    content: '<div id=\"hr\" style=\"background-color:rgb(128,128,128); color:white;font-size:12px;\">11:11 AM</div>'\r\n                }, {\r\n                    angle: 360, radius: '50%', zIndex: '1',\r\n                    content: '<div id=\"tm\" style=\"font-size:10px;\">21-06-17</div>'\r\n                }],\r\n                labelStyle: {\r\n                    hiddenLabel: 'First', autoAngle: false\r\n                }, majorTicks: {\r\n                    width: 2, height: 14, interval: 1\r\n                }, minorTicks: {\r\n                    height: 4, width: 1, interval: 0.2\r\n                },\r\n                minimum: 0, maximum: 12,\r\n                pointers: [{\r\n                    pointerWidth: 5, radius: '40%',\r\n                    border: { width: 0 },\r\n                    cap: { radius: 0, border: { width: 0 } },\r\n                    needleTail: { length: '0%' }, animation: { enable: false }\r\n                }, {\r\n                    radius: '60%', pointerWidth: 5,\r\n                    border: {\r\n                        width: 0\r\n                    },\r\n                    cap: {\r\n                        radius: 0,\r\n                        border: {\r\n                            width: 0\r\n                        }\r\n                    },\r\n                    needleTail: {\r\n                        length: '0%'\r\n                    }, animation: {\r\n                        enable: false\r\n                    }\r\n                }, {\r\n                    radius: '70%',\r\n                    pointerWidth: 1,\r\n                    cap: {\r\n                        radius: 4,\r\n                        border: {\r\n                            width: 2\r\n                        }\r\n                    },\r\n                    border: {\r\n                        width: 2\r\n                    },\r\n                    needleTail: {\r\n                        length: '20%',\r\n                        border: {\r\n                            width: 2\r\n                        },\r\n                    }, animation: {\r\n                        enable: false,\r\n                        duration: 500\r\n                    }\r\n                }]\r\n            }\r\n        ]\r\n    });\r\n    return gauge1;\r\n}\r\nfunction gauge2() {\r\n    var gauge2 = new ej.circulargauge.CircularGauge({\r\n        background: 'transparent',\r\n        titleStyle: { color: 'black' },\r\n\r\n        axes: [\r\n            {\r\n                startAngle: 0, endAngle: 0,\r\n                ranges: [\r\n                    {\r\n                        startWidth: 4, endWidth: 4,\r\n                        start: 0, end: 3,\r\n                        color: 'rgb(128,128,128)'\r\n                    }, {\r\n                        color: 'rgb(192,192,192)',\r\n                        start: 3, end: 12,\r\n                        startWidth: 4, endWidth: 4\r\n                    }\r\n                ],\r\n                lineStyle: { width: 0 },\r\n                annotations: [{\r\n                    angle: 270,\r\n                    radius: '40%',\r\n                    content: null\r\n                }, {\r\n                    angle: 180,\r\n                    radius: '40%',\r\n                    content: null\r\n                }, {\r\n                    angle: 90,\r\n                    radius: '50%',\r\n                    content: null\r\n                }, {\r\n                    radius: '35%',\r\n                    angle: 360, zIndex: '1',\r\n                    content: '<div id=\"tm\" style=\"font-size:10px;\">21-06-17</div>'\r\n                }], majorTicks: {\r\n                    width: 1,\r\n                    height: 5,\r\n                    interval: 1\r\n                },\r\n                labelStyle: {\r\n                    hiddenLabel: 'First',\r\n                    font: {\r\n                        size: '0px'\r\n                    },\r\n                    autoAngle: false\r\n                }, minorTicks: {\r\n                    height: 3,\r\n                    width: 0.5,\r\n                    interval: 0.2\r\n                },\r\n                minimum: 0,\r\n                maximum: 12,\r\n                pointers: [{\r\n                    radius: '70%',\r\n                    pointerWidth: 2,\r\n                    cap: {\r\n                        radius: 2,\r\n                        border: {\r\n                            width: 0.2\r\n                        }\r\n                    },\r\n                    needleTail: {\r\n                        length: '10%'\r\n                    }, animation: {\r\n                        enable: false,\r\n                        duration: 500\r\n                    }\r\n                }]\r\n            }\r\n        ]\r\n    });\r\n    return gauge2;\r\n}\r\n\r\nfunction calcTime(offset) {\r\n    var date = new Date();\r\n    var localTime = date.getTime();\r\n    var localOffset = date.getTimezoneOffset() * 60000;\r\n    var utc = localTime + localOffset;\r\n    var curretDate = new Date(utc + (3600000 * (+offset)));\r\n    return curretDate;\r\n}\r\n\r\n    var clockInterval;\r\n    var intervalExecute = true;\r\n    var indianTime = new ej.circulargauge.CircularGauge(gauge1());\r\n    var subGauge1;\r\n    var subGauge2;\r\n    indianTime.appendTo('#clockgauge');\r\n    updateSubGauge1.apply(this);\r\n    updateSubGauge2.apply(this);\r\n    function updateSubGauge1() {\r\n        subGauge1 = new ej.circulargauge.CircularGauge(gauge2());\r\n        subGauge1.appendTo('#minutes');\r\n    }\r\n    function updateSubGauge2() {\r\n        var _this = this;\r\n        subGauge2 = new ej.circulargauge.CircularGauge({\r\n            background: 'transparent',\r\n\r\n            axes: [{\r\n                ranges: [{ start: 0, end: 3, startWidth: 4, endWidth: 4, color: 'rgb(128,128,128)' },\r\n                { start: 3, end: 12, startWidth: 4, endWidth: 4, color: 'rgb(192,192,192)' }],\r\n                annotations: [{ angle: 270, radius: '40%', content: null },\r\n                { angle: 180, radius: '40%', content: null },\r\n                { angle: 90, radius: '50%', content: null },\r\n                { angle: 360, radius: '35%', zIndex: '1', content: '<div id=\"tm\" style=\"font-size:10px;\">21-06-17</div>' }],\r\n                majorTicks: { width: 1, height: 5, interval: 1 },\r\n                labelStyle: { hiddenLabel: 'First', font: { size: '0px' }, autoAngle: false },\r\n                pointers: [{\r\n                    cap: {\r\n                        radius: 2, border: { width: 0.2 }\r\n                    }, needleTail: { length: '10%' }, animation: { enable: false, duration: 500 },\r\n                    radius: '70%', pointerWidth: 2,\r\n                }], startAngle: 0, endAngle: 0, lineStyle: { width: 0 },\r\n                minorTicks: { height: 3, width: 0.5, interval: 0.2 }, minimum: 0, maximum: 12,\r\n            }],\r\n            loaded: intervalExecute ? (function (args) {\r\n                if (intervalExecute) {\r\n                    updateTime(false);\r\n                    _this.clockInterval = setInterval(function () {\r\n                        updateTime(true, _this.clearInterval);\r\n                    }, 1000);\r\n                    intervalExecute = false;\r\n                }\r\n            }) : null\r\n        });\r\n        subGauge2.appendTo('#seconds');\r\n    }\r\n    function updateTime(enable, interval) {\r\n        if (document.getElementById('clockgauge') && document.getElementsByClassName('e-circulargauge')) {\r\n            getTime('+5.5', indianTime, enable);\r\n            if (document.getElementById('minutes').childElementCount) {\r\n                getTime('+5.5', subGauge1, enable, true);\r\n            }\r\n            else {\r\n                updateSubGauge1();\r\n                getTime('+5.5', subGauge1, enable, true);\r\n            }\r\n            if (document.getElementById('seconds').childElementCount) {\r\n                getTime('+5.5', subGauge2, enable, true);\r\n            }\r\n            else {\r\n                updateSubGauge2();\r\n                getTime('+5.5', subGauge2, enable, true);\r\n            }\r\n        }\r\n        else {\r\n            clearInterval(interval);\r\n        }\r\n    }\r\n    function getTime(offset, gauge, enable, subGauge) {\r\n        var returnTime = calcTime(offset);\r\n        var seconds = returnTime.getSeconds() * 12 / 60;\r\n        seconds = seconds === 0 ? 12 : seconds;\r\n        if (!subGauge) {\r\n            gauge.axes[0].pointers[2].animation.enable = enable;\r\n            gauge.axes[0].pointers[2].currentValue = seconds === 0.2 ? 0 : gauge.axes[0].pointers[2].currentValue;\r\n        }\r\n        else {\r\n            gauge.axes[0].pointers[0].currentValue = seconds === 0.2 ? 0 : gauge.axes[0].pointers[0].currentValue;\r\n            gauge.axes[0].pointers[0].animation.enable = (gauge.element.id === 'seconds' && enable);\r\n        }\r\n        var hour = (returnTime.getHours() + returnTime.getMinutes() / 60) % 12;\r\n        var minutes = returnTime.getMinutes() * 12 / 60 + returnTime.getSeconds() * 12 / 3600;\r\n        var content;\r\n        var hourValue;\r\n        if (subGauge) {\r\n            if (gauge.element.id === 'minutes') {\r\n                content = '<div id=\"tm\" style=\"font-size:8px;\">' + Math.floor(returnTime.getMinutes()) + ' M</div>';\r\n                gauge.setPointerValue(0, 0, minutes);\r\n                gauge.setAnnotationValue(0, 3, content);\r\n            }\r\n            else {\r\n                gauge.setPointerValue(0, 0, seconds);\r\n                content = '<div id=\"tm\" style=\"font-size:8px;\">' + Math.floor(returnTime.getSeconds()) + ' S</div>';\r\n                gauge.setAnnotationValue(0, 3, content);\r\n            }\r\n        }\r\n        else {\r\n            gauge.setPointerValue(0, 0, hour);\r\n            gauge.setPointerValue(0, 1, minutes);\r\n            gauge.setPointerValue(0, 2, seconds);\r\n            hourValue = (Math.floor(returnTime.getHours()) % 12);\r\n            content = '<div id=\"hr\" style=\"background-color:rgba(226, 226, 226, 0.4);' +\r\n                'color:rgba(29,29,29,0.9);padding:4px;font-size:12px;\">' +\r\n                (hourValue === 0 ? 12 : hourValue) + ':' + Math.floor(returnTime.getMinutes()) +\r\n                (returnTime.getHours() >= 12 ? ' PM' : ' AM') + '</div>';\r\n            gauge.setAnnotationValue(0, 2, content);\r\n            var date = new Date();\r\n            content = '<div id=\"tm\" style=\"font-size:10px;\">' + date.getDate() + '-' +\r\n                (date.getMonth() + 1) + '-' + date.getFullYear() + '</div>';\r\n            gauge.setAnnotationValue(0, 3, content);\r\n        }\r\n    }\r\n"}