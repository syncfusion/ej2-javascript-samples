{"index.html":"<html><head><script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div>\n    <div class=\"control-section\">\n            <div id=\"range-container\"></div>\n            <div id=\"template\">\n            <div class=\"sliderwrap\">\n                    <div id=\"default\"></div>\n                </div>\n    </div>\n        </div>\n        \n       \n</div>\n<script id=\"pointerValue\" type=\"text/x-template\">\n    <div id='sliderwrap'>\n        <div class='des'>\n            <div id='default'></div>\n        </div>\n    </div>\n</script>\n\n\n    <style>    \n        .sliderwrap {\n            margin-top: 0px;\n            width: 300px;            \n            align-self: center;\n        }  \n        #slider.e-control.e-slider .e-handle {\n            background-color: #4B4B4B ;\n        }\n        .e-control-wrapper.e-slider-container.e-horizontal .e-slider-track {\n            background: -webkit-linear-gradient(left, #ea501a 0, #ea501a 20%, #f79c02 40%, #e5ce20 60%, #a1cb43 80%, #82b944 100%);\n            background: linear-gradient(left, #ea501a 0, #ea501a 20%, #f79c02 40%, #e5ce20 60%, #a1cb43 80%, #82b944 100%);\n            background: -moz-linear-gradient(left, #ea501a 0, #ea501a 20%, #f79c02 40%, #e5ce20 60%, #a1cb43 80%, #82b944 100%); \n        }\n        .e-limit-bar.e-limits {\n            background-color: transparent !important;\n        }\n        .e-control-wrapper.e-slider-container.e-horizontal .e-range {\n            height: 0px !important;\n        }\n        #slider.e-control.e-slider .e-slider-track {\n            height: 8px;\n            top: calc(50% - 4px);\n            border-radius: 5px;\n        }\n    </style></div></body></html>","index.js":"{{ripple}}/**\r\n * Arc gauge sample\r\n */\r\nvar sliderValue = 60;\r\n\r\n    var circulargauge = new ej.circulargauge.CircularGauge({\r\n\r\n        loaded: function (args) {\r\n            var annotation = document.getElementById(args.gauge.element.id + '_Annotations_0');\r\n            if (annotation) {\r\n                annotationRender('slider', circulargauge.axes[0].pointers[0].value);\r\n            }\r\n        },\r\n        title: 'Progress Tracker',\r\n        titleStyle: { size: '18px', },\r\n        axes: [{\r\n            annotations: [{\r\n                    content: '<div id=\"pointervalue\" style=\"font-size:35px;width:120px;text-align:center\">' +\r\n                    sliderValue.toString() + '/100</div>',\r\n                    angle: 0,\r\n                    zIndex: '1',\r\n                    radius: '0%'\r\n                },\r\n                {\r\n                    content: '<div id=\"slider\" style=\"height:70px;width:250px;\"></div>',\r\n                    angle: 0,\r\n                    zIndex: '1',\r\n                    radius: '-100%'\r\n                },\r\n            ],\r\n            lineStyle: { width: 0 },\r\n            labelStyle: {\r\n                position: 'Inside', useRangeColor: true,\r\n                font: { size: '0px', color: 'white', fontFamily: 'Roboto', fontStyle: 'Regular' }\r\n            }, majorTicks: { height: 0, }, minorTicks: { height: 0 },\r\n            startAngle: 200, endAngle: 160, minimum: 0, maximum: 100, radius: '80%',\r\n            ranges: [\r\n                {\r\n                    start: 0, end: 100,\r\n                    radius: '90%',\r\n                    startWidth: 30, endWidth: 30,\r\n                    color: '#E0E0E0',\r\n                    roundedCornerRadius: 20\r\n                },\r\n            ],\r\n            pointers: [{\r\n                    roundedCornerRadius: 20,\r\n                    value: 60,\r\n                    type: 'RangeBar',\r\n                    radius: '90%',\r\n                    color: '#e5ce20',\r\n                    border: {\r\n                        color: 'grey',\r\n                        width: 0\r\n                    },\r\n                    animation: {\r\n                        enable: false\r\n                    },\r\n                    pointerWidth: 30\r\n                }]\r\n        }]\r\n    });\r\n    circulargauge.appendTo('#range-container');\r\n    function annotationRender(id, sliderValue) {\r\n        var first = new ej.inputs.Slider({\r\n            min: 0, max: 100,\r\n            type: 'MinRange',\r\n            limits: { enabled: true, minStart: 0, minEnd: 100 },\r\n            value: sliderValue,\r\n            change: function (args) {\r\n                sliderValue = args.value;\r\n                if (!isNaN(sliderValue)) {\r\n                    circulargauge.isProtectedOnChange = true;\r\n                    if (sliderValue >= 0 && sliderValue < 20) {\r\n                        circulargauge.axes[0].pointers[0].color = '#ea501a';\r\n                    }\r\n                    else if (sliderValue >= 20 && sliderValue < 40) {\r\n                        circulargauge.axes[0].pointers[0].color = '#f79c02';\r\n                    }\r\n                    else if (sliderValue >= 40 && sliderValue < 60) {\r\n                        circulargauge.axes[0].pointers[0].color = '#e5ce20';\r\n                    }\r\n                    else if (sliderValue >= 60 && sliderValue < 80) {\r\n                        circulargauge.axes[0].pointers[0].color = '#a1cb43';\r\n                    }\r\n                    else if (sliderValue >= 80 && sliderValue < 100) {\r\n                        circulargauge.axes[0].pointers[0].color = '#82b944';\r\n                    }\r\n                    circulargauge.setPointerValue(0, 0, sliderValue);\r\n                    if (document.getElementById('pointervalue')) {\r\n                        document.getElementById('pointervalue').innerHTML = circulargauge.axes[0].pointers[0].value.toString() + '/100';\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        first.appendTo('#' + id);\r\n    }\r\n"}