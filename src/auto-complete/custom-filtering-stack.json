{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/development/demos/auto-complete/custom-filtering/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-12 control-section\" style=\"height: 400px;\">\n    <div class=\"control-wrapper\">\n        <div style=\"padding-top:70px;\">\n            <input type=\"text\" tabindex=\"1\" id=\"books\">\n        </div>\n    </div>\n</div>\n\n\n\n\n","index.js":"{{ripple}}\r\n  // define the JSON of data\r\n  \r\n  // initialize AutoComplete component\r\n  var atcObj = new ej.dropdowns.AutoComplete({\r\n      // set the data to dataSource property\r\n      dataSource: window.booksData,\r\n      // maps the appropriate column to fields property\r\n      fields: { value: 'BookName' },\r\n      // set placeholder to AutoComplete input element\r\n      placeholder: 'e.g. Node.js Succinctly',\r\n      // Bind the filter event\r\n      filtering: function (e) {\r\n          var options = {\r\n              keys: ['BookName'],\r\n              includeMatches: true,\r\n              findAllMatches: true\r\n          };\r\n          // create object from Fuse constructor\r\n          var fuse = new Fuse(window.booksData, options);\r\n          // store the search result data based on typed characters\r\n          var result = fuse.search(e.text);\r\n          var data = [];\r\n          for (var i = 0; i < result.length; i++) {\r\n              data.push(result[i].item);\r\n          }\r\n          // pass the filter data source to updateData method.\r\n          e.updateData(data, null);\r\n          var popupElement = document.getElementById('books_popup');\r\n          var lists = popupElement.querySelectorAll('.e-list-item');\r\n          // For highlight the typed characters, pass the result data and list items to highlightSearch method.\r\n          highlightSearch(lists, result);\r\n      }\r\n  });\r\n  atcObj.appendTo('#books');\r\n  loadExternalFile();\r\n  // Dynamically load the fuse.js file\r\n  function loadExternalFile() {\r\n      var script = document.createElement('script');\r\n      script.src = 'dist/fuse.min.js';\r\n      document.getElementsByTagName('head')[0].appendChild(script);\r\n  }\r\n\r\n  function highlightSearch(listItems, result) {\r\n      if (result.length > 0) {\r\n          for (var i = 0; i < listItems.length; i++) {\r\n              var innerHTML = listItems[i].innerHTML;\r\n              for (var j = result[i].matches[0].indices.length - 1; j >= 0; j--) {\r\n                  var indexes = result[i].matches[0].indices[j];\r\n                  innerHTML = innerHTML.substring(0, indexes[0]) + '<span class=\"e-highlight\">' +\r\n                      innerHTML.substring(indexes[0], (indexes[1] + 1)) + '</span>' + innerHTML.substring(indexes[1] + 1);\r\n                  listItems[i].innerHTML = innerHTML;\r\n              }\r\n          }\r\n      }\r\n  }\r\n"}