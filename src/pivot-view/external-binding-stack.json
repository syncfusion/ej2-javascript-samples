{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/pivot-view/external-binding/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-12 control-section\" style=\"overflow:auto;\">\n    <div class=\"content-wrapper\">\n        <div id=\"PivotView\" style=\"width: 100%;height:100%;\"></div>\n    </div>\n    <br>\n    <br>\n    <div id=\"heatmap\" style=\"height: 450px;\"></div>\n</div>\n","index.js":"{{ripple}}/**\n * PivotView Sample with Selection feature with HeatMap integration.\n */\n\n    ej.base.enableRipple(false);\n    var onInit = true;\n    var selectedCells;\n    var heatmap;\n    var measureList = {};\n    var xLabels = [];\n    var yLabels = [];\n    var jsonDataSource = [];\n    var pivotGridObj = new ej.pivotview.PivotView({\n        dataSource: {\n            data: window.Pivot_Data,\n            expandAll: true,\n            values: [{ name: 'Sold', caption: 'Units Sold' }],\n            filters: [],\n            enableSorting: true,\n            columns: [{ name: 'Year' }, { name: 'Order_Source', caption: 'Order Source' }],\n            rows: [{ name: 'Country' }, { name: 'Products' }],\n            valueSortSettings: { headerDelimiter: ' - ' }\n        },\n        showTooltip: false,\n        width: '100%',\n        height: 300,\n        dataBound: function () {\n            if (onInit) {\n                pivotGridObj.grid.selectionModule.selectCellsByRange({ cellIndex: 1, rowIndex: 1 }, { cellIndex: 3, rowIndex: 4 });\n            }\n        },\n        cellSelected: function (args) {\n            selectedCells = args.selectedCellsInfo;\n            if (selectedCells && selectedCells.length > 0) {\n                frameSeries();\n                heatmapUpdate();\n            }\n        },\n        gridSettings: {\n            columnWidth: 120,\n            allowSelection: true,\n            selectionSettings: { mode: 'Cell', type: 'Multiple', cellSelectionMode: 'Box' }\n        }\n    });\n    pivotGridObj.appendTo('#PivotView');\n\n\n    /* tslint:disable */\n    function frameSeries() {\n        xLabels = [];\n        yLabels = [];\n        jsonDataSource = [];\n        var columnGroupObject = {};\n        var cellCount = 0;\n        while (cellCount < selectedCells.length) {\n            var sCell = selectedCells[cellCount];\n            var sColumnSeries = (pivotGridObj.dataSource.values.length > 1 && measureList[sCell.measure]) ?\n                (sCell.columnHeaders.toString() + ' ~ ' + measureList[sCell.measure]) : sCell.columnHeaders.toString();\n            sColumnSeries = sColumnSeries == '' && sCell.measure != '' ? 'Grand Total' : sColumnSeries;\n            var rHeaders = sCell.rowHeaders == '' && sCell.currentCell.axis != 'column' ? 'Grand Total' : sCell.rowHeaders;\n            if (rHeaders != '' && sColumnSeries) {\n                if (columnGroupObject[sColumnSeries]) {\n                    columnGroupObject[sColumnSeries].push({ x: rHeaders.toString(), y: Number(sCell.value) });\n                } else {\n                    columnGroupObject[sColumnSeries] = [{ x: rHeaders.toString(), y: Number(sCell.value) }];\n                    yLabels.push(sColumnSeries);\n                }\n                if (xLabels.indexOf(rHeaders.toString()) == -1) {\n                    xLabels.push(rHeaders.toString());\n                }\n            }\n            cellCount++;\n        }\n        for (var xcnt = 0; xcnt < xLabels.length; xcnt++) {\n            var xName = xLabels[xcnt];\n            var row = { 'xMember': xName };\n            for (var ycnt = 0; ycnt < yLabels.length; ycnt++) {\n                var YName = yLabels[ycnt];\n                row[YName] = '';\n                for (var hCount = 0; hCount < columnGroupObject[YName].length; hCount++) {\n                    if (columnGroupObject[YName][hCount].x === xName) {\n                        row[YName] = columnGroupObject[YName][hCount].y;\n                    }\n                }\n            }\n            jsonDataSource.push(row);\n        }\n    }\n\n    function heatmapUpdate() {\n        if (onInit) {\n            onInit = false;\n            heatmap = new ej.heatmap.HeatMap({\n                titleSettings: {\n                    text: 'Sales Analysis'\n                },\n                legendSettings: {\n                    position: 'Top'\n                },\n                xAxis: {\n                    title: { text: pivotGridObj.dataSource.rows.map(function (args) { return args.caption || args.name; }).join(' ~ ') },\n                    labels: xLabels,\n                    labelRotation: 315\n                },\n                yAxis: {\n                    title: { text: pivotGridObj.dataSource.values.map(function (args) { return args.caption || args.name; }).join(' ~ ') },\n                    labels: yLabels\n                },\n                dataSource: {\n                    data: jsonDataSource,\n                    isJsonData: true,\n                    adaptorType: 'Table',\n                    xDataMapping: 'xMember'\n                },\n                load: function (args) {\n                    var selectedTheme = location.hash.split('/')[1];\n                    selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                    args.heatmap.theme = selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1);\n                },\n            }, '#heatmap');\n        } else {\n            heatmap.dataSource.data = jsonDataSource;\n            heatmap.xAxis = {\n                title: { text: pivotGridObj.dataSource.rows.map(function (args) { return args.caption || args.name; }).join(' ~ ') },\n                labels: xLabels,\n                labelRotation: 315\n            };\n            heatmap.yAxis = {\n                title: { text: pivotGridObj.dataSource.values.map(function (args) { return args.caption || args.name; }).join(' ~ ') },\n                labels: yLabels\n            };\n            heatmap.refresh();\n        }\n    }\n\n"}