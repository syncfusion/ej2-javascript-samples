{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/production/demos/query-builder/template/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"http://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"http://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-8 control-section\">\n    <div id=\"querybuilder\" class=\"row\">\n    </div>\n</div>\n<div class=\"col-lg-4 property-section\">\n    <table id=\"property\" title=\"Properties\" class=\"querybuilder-property\" style=\"width: 100%; margin:10px\">\n        <tbody><tr>\n            <td>\n                <div class=\"row\"> <input id=\"radio1\" type=\"radio\"> </div>\n            </td>\n            <td>\n                <div class=\"row\"> <input id=\"radio2\" type=\"radio\"> </div>\n            </td>\n        </tr>\n        <tr>\n            <td colspan=\"2\">\n                <textarea id=\"ruleContent\" readonly=\"true\"> </textarea>\n            </td>\n        </tr>\n    </tbody></table>\n</div>\n\n\n<style>\n    .e-query-builder .e-control-wrapper.e-slider-container.e-horizontal {\n        height: 0;\n    }\n\n    #ruleContent {\n        border: 1px solid #d3d3d3;\n        width: 100%;\n        height: 500px;\n        overflow: auto;\n    }\n\t\n\t.highcontrast textarea#ruleContent {\n\t  background-color: #000;\n\t}\n    \n\n</style>\n</div></body></html>","index.js":"{{ripple}}/**\n * Template sample\n */\n\n\n    var elem;\n    var dropDownObj;\n    var boxObj;\n    var multiSelectObj;\n    var inOperators = ['in', 'notin'];\n    var ticksSlider;\n    var filter = [{\n        field: 'Category',\n        label: 'Category',\n        type: 'string',\n        template: {\n            create: function () {\n                elem = document.createElement('input');\n                elem.setAttribute('type', 'text');\n                return elem;\n            },\n            destroy: function (args) {\n                var multiSelect = ej.base.getComponent(document.getElementById(args.elementId), 'multiselect');\n                if (multiSelect) {\n                    multiSelect.destroy();\n                }\n                var textBox = ej.base.getComponent(document.getElementById(args.elementId), 'textbox');\n                if (textBox) {\n                    textBox.destroy();\n                }\n            },\n            write: function (args) {\n                if (inOperators.indexOf(args.operator) > -1) {\n                    multiSelectObj = new ej.dropdowns.MultiSelect({\n                        dataSource: ['Food', 'Travel', 'Shopping', 'Mortgage', 'Salary', 'Clothing', 'Bills'],\n                        value: args.values,\n                        mode: 'CheckBox',\n                        placeholder: 'Select category',\n                        change: function (e) {\n                            qryBldrObj.notifyChange(e.value, e.element);\n                        }\n                    });\n                    multiSelectObj.appendTo('#' + args.elements.id);\n                } else {\n                    var inputobj = new ej.inputs.TextBox({\n                        placeholder: 'Value',\n                        input: function (e) {\n                            qryBldrObj.notifyChange(e.value, e.event.target);\n                        }\n                    });\n                    inputobj.appendTo('#' + args.elements.id);\n                    inputobj.value = args.values;\n                    inputobj.dataBind();\n                }\n            }\n        }\n    },\n    {\n        field: 'PaymentMode',\n        label: 'PaymentMode',\n        type: 'string',\n        operators: [\n            { key: 'Equal', value: 'equal' },\n            { key: 'Not Equal', value: 'notequal' },\n            { key: 'In', value: 'in' },\n            { key: 'Not In', value: 'notin' }\n        ],\n        template: {\n            create: function () {\n                elem = document.createElement('input');\n                elem.setAttribute('type', 'text');\n                return elem;\n            },\n            destroy: function (args) {\n                var selectObj = ej.base.getComponent(document.getElementById(args.elementId), 'multiselect');\n                if (selectObj) {\n                    selectObj.destroy();\n                }\n                var dropdown = ej.base.getComponent(document.getElementById(args.elementId), 'dropdownlist');\n                if (dropdown) {\n                    dropdown.destroy();\n                }\n            },\n            write: function (args) {\n                var ds = ['Cash', 'Debit Card', 'Credit Card', 'Net Banking', 'Wallet'];\n                if (inOperators.indexOf(args.operator) > -1) {\n                    var multiSelectObj = new ej.dropdowns.MultiSelect({\n                        dataSource: ds,\n                        value: args.values,\n                        mode: 'CheckBox',\n                        placeholder: 'Select Transaction',\n                        change: function (e) {\n                            qryBldrObj.notifyChange(e.value, e.element);\n                        }\n                    });\n                    multiSelectObj.appendTo('#' + args.elements.id);\n                }\n                else {\n                    dropDownObj = new ej.dropdowns.DropDownList({\n                        dataSource: ds,\n                        value: args.values ? args.values : ds[0],\n                        change: function (e) {\n                            qryBldrObj.notifyChange(e.itemData.value, e.element);\n                        }\n                    });\n                    dropDownObj.appendTo('#' + args.elements.id);\n\n                }\n            }\n        }\n    },\n    {\n        field: 'TransactionType',\n        label: 'TransactionType',\n        type: 'string',\n        operators: [{\n            key: 'Equal',\n            value: 'equal'\n        }, {\n            key: 'Not Equal',\n            value: 'notequal'\n        }],\n        template: {\n            create: function () {\n                elem = document.createElement('input');\n                elem.setAttribute('type', 'checkbox');\n                return elem;\n            },\n            destroy: function (args) {\n                ej.base.getComponent(document.getElementById(args.elementId), 'checkbox').destroy();\n            },\n            write: function (args) {\n                var checked = args.values === 'IsExpensive' ? true : false;\n                boxObj = new ej.buttons.CheckBox({\n                    label: 'Is Expensive',\n                    checked: checked,\n                    change: function (e) {\n                        qryBldrObj.notifyChange(e.checked ? 'expensive' : 'income', e.event.target);\n                    }\n                });\n                boxObj.appendTo('#' + args.elements.id);\n            }\n        }\n    },\n    {\n        field: 'Description',\n        label: 'Description',\n        type: 'string'\n    },\n    {\n        field: 'Date',\n        label: 'Date',\n        type: 'date'\n    },\n    {\n        field: 'Amount',\n        label: 'Amount',\n        type: 'number',\n        operators: [\n            { key: 'Equal', value: 'equal' },\n            { key: 'Greater than', value: 'greaterthan' },\n            { key: 'Less than', value: 'lessthan' },\n            { key: 'Less than or equal', value: 'lessthanorequal' },\n            { key: 'Greater than or equal', value: 'greaterthanorequal' },\n            { key: 'Not equal', value: 'notequal' }\n        ],\n        template: {\n            create: function () {\n                elem = document.createElement('div');\n                elem.setAttribute('class', 'ticks_slider');\n                return elem;\n            },\n            destroy: function (args) {\n                ej.base.getComponent(document.getElementById(args.elementId), 'slider').destroy();\n            },\n            write: function (args) {\n                ticksSlider = new ej.inputs.Slider({\n                    value: args.values,\n                    min: 0,\n                    max: 100,\n                    tooltip: { isVisible: true, placement: 'Before', showOn: 'Hover' },\n                    type: 'MinRange',\n                    change: function (e) {\n                        qryBldrObj.notifyChange(e.value, args.elements);\n                    }\n                });\n                ticksSlider.appendTo('#' + args.elements.id);\n            }\n        }\n    }\n    ];\n    var importRules = {\n        'condition': 'and',\n        'rules': [{\n            'label': 'Category',\n            'field': 'Category',\n            'type': 'string',\n            'operator': 'in',\n            'value': ['Clothing']\n        },\n        {\n            'condition': 'or',\n            'rules': [{\n                'label': 'TransactionType',\n                'field': 'TransactionType',\n                'type': 'string',\n                'operator': 'equal',\n                'value': 'Income'\n            },\n            {\n                'label': 'PaymentMode',\n                'field': 'PaymentMode',\n                'type': 'string',\n                'operator': 'equal',\n                'value': 'Cash'\n            }\n            ]\n        }, {\n            'label': 'Amount',\n            'field': 'Amount',\n            'type': 'number',\n            'operator': 'equal',\n            'value': 10\n        }\n        ]\n    };\n    var qryBldrObj = new ej.querybuilder.QueryBuilder({\n        dataSource: window.expenseData,\n        columns: filter,\n        width: '100%',\n        rule: importRules,\n        change: updateRule\n    });\n    qryBldrObj.appendTo('#querybuilder');\n    var radioButton = new ej.buttons.RadioButton({\n        label: 'JSON Rule',\n        name: 'rule',\n        value: 'json',\n        checked: true,\n        change: changeValue\n    });\n    radioButton.appendTo('#radio1');\n    radioButton = new ej.buttons.RadioButton({\n        label: 'SQL Rule',\n        name: 'rule',\n        value: 'sql',\n        change: changeValue\n    });\n    radioButton.appendTo('#radio2');\n    var element = document.getElementById('ruleContent');\n\n    function updateRule() {\n        if (ej.base.getComponent(radioButton.element, 'radio').checked) {\n            element.textContent = qryBldrObj.getSqlFromRules(qryBldrObj.rule);\n        } else {\n            element.textContent = JSON.stringify({\n                condition: qryBldrObj.rule.condition,\n                rule: qryBldrObj.rule.rules\n            }, null, 4);\n        }\n    }\n    element.textContent = JSON.stringify({\n        condition: qryBldrObj.rule.condition,\n        rule: qryBldrObj.rule.rules\n    }, null, 4);\n\n    function changeValue() {\n        element = document.getElementById('ruleContent');\n        if (ej.base.getComponent(radioButton.element, 'radio').checked) {\n            element.textContent = qryBldrObj.getSqlFromRules(qryBldrObj.rule);\n        } else {\n            element.textContent = JSON.stringify({\n                condition: qryBldrObj.rule.condition,\n                rules: qryBldrObj.rule.rules\n            }, null, 4);\n        }\n    }\n    if (document.getElementById('right-pane')) {\n        document.getElementById('right-pane').addEventListener('scroll', onScroll);\n    }\n\n    // Handler used to reposition the tooltip on page scroll\n    function onScroll() {\n        var slider = [ticksSlider];\n        slider.forEach(function (slider) {\n            // Refreshing each slider tooltip object position\n            slider.refreshTooltip();\n        });\n    }\n\n"}