{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/development/demos/pivot-table/external-binding/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-12 control-section\" style=\"overflow:auto;\">\n    <div class=\"content-wrapper\">\n        <div id=\"PivotView\" style=\"width: 100%;height:100%;\"></div>\n    </div>\n    <br>\n    <br>\n    <div id=\"heatmap\" style=\"height: 450px;\"></div>\n</div>\n","index.js":"{{ripple}}/**\r\n * Pivot Table Sample with Selection feature with HeatMap integration.\r\n */\r\n\r\n    ej.base.enableRipple(false);\r\n    var onInit = true;\r\n    var selectedCells;\r\n    var heatmap;\r\n    var measureList = {};\r\n    var xLabels = [];\r\n    var yLabels = [];\r\n    var jsonDataSource = [];\r\n    var pivotObj = new ej.pivotview.PivotView({\r\n        dataSourceSettings: {\r\n            dataSource: window.Pivot_Data,\r\n            expandAll: true,\r\n            values: [{ name: 'Sold', caption: 'Units Sold' }],\r\n            filters: [],\r\n            enableSorting: true,\r\n            columns: [{ name: 'Year' }, { name: 'Order_Source', caption: 'Order Source' }],\r\n            rows: [{ name: 'Country' }, { name: 'Products' }],\r\n            valueSortSettings: { headerDelimiter: ' - ' }\r\n        },\r\n        showTooltip: false,\r\n        width: '100%',\r\n        height: 300,\r\n        dataBound: function () {\r\n            if (onInit) {\r\n                pivotObj.grid.selectionModule.selectCellsByRange({ cellIndex: 1, rowIndex: 1 }, { cellIndex: 3, rowIndex: 4 });\r\n            }\r\n        },\r\n        cellSelected: function (args) {\r\n            selectedCells = args.selectedCellsInfo;\r\n            if (selectedCells && selectedCells.length > 0) {\r\n                frameSeries();\r\n                heatmapUpdate();\r\n            }\r\n        },\r\n        gridSettings: {\r\n            columnWidth: 120,\r\n            allowSelection: true,\r\n            selectionSettings: { mode: 'Cell', type: 'Multiple', cellSelectionMode: 'Box' }\r\n        }\r\n    });\r\n    pivotObj.appendTo('#PivotView');\r\n\r\n\r\n    /* tslint:disable */\r\n    function frameSeries() {\r\n        xLabels = [];\r\n        yLabels = [];\r\n        jsonDataSource = [];\r\n        var columnGroupObject = {};\r\n        var cellCount = 0;\r\n        while (cellCount < selectedCells.length) {\r\n            var sCell = selectedCells[cellCount];\r\n            var sColumnSeries = (pivotObj.dataSourceSettings.values.length > 1 && measureList[sCell.measure]) ?\r\n                (sCell.columnHeaders.toString() + ' ~ ' + measureList[sCell.measure]) : sCell.columnHeaders.toString();\r\n            sColumnSeries = sColumnSeries == '' && sCell.measure != '' ? 'Grand Total' : sColumnSeries;\r\n            var rHeaders = sCell.rowHeaders == '' && sCell.currentCell.axis != 'column' ? 'Grand Total' : sCell.rowHeaders;\r\n            if (rHeaders != '' && sColumnSeries) {\r\n                if (columnGroupObject[sColumnSeries]) {\r\n                    columnGroupObject[sColumnSeries].push({ x: rHeaders.toString(), y: Number(sCell.value) });\r\n                } else {\r\n                    columnGroupObject[sColumnSeries] = [{ x: rHeaders.toString(), y: Number(sCell.value) }];\r\n                    yLabels.push(sColumnSeries);\r\n                }\r\n                if (xLabels.indexOf(rHeaders.toString()) == -1) {\r\n                    xLabels.push(rHeaders.toString());\r\n                }\r\n            }\r\n            cellCount++;\r\n        }\r\n        for (var xcnt = 0; xcnt < xLabels.length; xcnt++) {\r\n            var xName = xLabels[xcnt];\r\n            var row = { 'xMember': xName };\r\n            for (var ycnt = 0; ycnt < yLabels.length; ycnt++) {\r\n                var YName = yLabels[ycnt];\r\n                row[YName] = '';\r\n                for (var hCount = 0; hCount < columnGroupObject[YName].length; hCount++) {\r\n                    if (columnGroupObject[YName][hCount].x === xName) {\r\n                        row[YName] = columnGroupObject[YName][hCount].y;\r\n                    }\r\n                }\r\n            }\r\n            jsonDataSource.push(row);\r\n        }\r\n    }\r\n\r\n    function heatmapUpdate() {\r\n        if (onInit) {\r\n            onInit = false;\r\n            heatmap = new ej.heatmap.HeatMap({\r\n                titleSettings: {\r\n                    text: 'Sales Analysis'\r\n                },\r\n                legendSettings: {\r\n                    position: 'Top'\r\n                },\r\n                xAxis: {\r\n                    title: { text: pivotObj.dataSourceSettings.rows.map(function (args) { return args.caption || args.name; }).join(' ~ ') },\r\n                    labels: xLabels,\r\n                    labelRotation: 315\r\n                },\r\n                yAxis: {\r\n                    title: { text: pivotObj.dataSourceSettings.values.map(function (args) { return args.caption || args.name; }).join(' ~ ') },\r\n                    labels: yLabels\r\n                },\r\n                dataSource: jsonDataSource,\r\n                dataSourceSettings: {\r\n                    isJsonData: true,\r\n                    adaptorType: 'Table',\r\n                    xDataMapping: 'xMember'\r\n                },\r\n                load: function (args) {\r\n                    var selectedTheme = location.hash.split('/')[1];\r\n                    selectedTheme = selectedTheme ? selectedTheme : 'Material';\r\n                    args.heatmap.theme = selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1);\r\n                },\r\n            }, '#heatmap');\r\n        } else {\r\n            heatmap.dataSource = jsonDataSource;\r\n            heatmap.xAxis = {\r\n                title: { text: pivotObj.dataSourceSettings.rows.map(function (args) { return args.caption || args.name; }).join(' ~ ') },\r\n                labels: xLabels,\r\n                labelRotation: 315\r\n            };\r\n            heatmap.yAxis = {\r\n                title: { text: pivotObj.dataSourceSettings.values.map(function (args) { return args.caption || args.name; }).join(' ~ ') },\r\n                labels: yLabels\r\n            };\r\n            heatmap.refresh();\r\n        }\r\n    }\r\n\r\n"}