{"index.html":"<html><head><script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-8 control-section\">\n    <div class=\"control_wrapper\">\n        <!-- Initialize Uploader -->\n        <input type=\"file\" id=\"fileupload\" name=\"UploadFiles\">\n    </div>\n</div>\n\n<div class=\"col-lg-4 property-section\">\n    <table id=\"property\" title=\"Properties\" style=\"width: 100%;\">\n        <tbody><tr>\n            <td class=\"left-side\">Chunk size :</td>\n            <td>\n                <div id=\"default\">\n                    <select id=\"chunk-sizes\"> \n                        <option value=\"500000\">500 KB</option>\n                        <option value=\"1000000\">1 MB</option>\n                        <option value=\"2000000\">2 MB</option>\n                    </select>\n                </div>\n            </td>\n        </tr>\n    </tbody></table>\n</div>\n\n\n\n\n</div></body></html>","index.js":"{{ripple}}\r\n    var dropElement = document.getElementsByClassName('control-fluid')[0];\r\n    // initialize the uploader component\r\n    var uploadObj = new ej.inputs.Uploader({\r\n        maxFileSize: 104857600,\r\n        asyncSettings: {\r\n            saveUrl: 'https://aspnetmvc.syncfusion.com/services/api/uploadbox/Save',\r\n            removeUrl: 'https://aspnetmvc.syncfusion.com/services/api/uploadbox/Remove',\r\n            chunkSize: 500000\r\n        },\r\n        autoUpload: false,\r\n        removing: onFileRemove,\r\n        dropArea: dropElement,\r\n        chunkFailure: onBeforeFailure,\r\n        pausing: onPausing,\r\n        resuming: onResuming\r\n    });\r\n    uploadObj.appendTo('#fileupload');\r\n\r\n    var isInteraction = false;\r\n    // to update flag variable value for automatic pause and resume\r\n    function onPausing(args) {\r\n        if (args.event !== null && !navigator.onLine) {\r\n            isInteraction = true;\r\n        }\r\n        else {\r\n            isInteraction = false;\r\n        }\r\n    }\r\n    // to update flag variable for automatic pause and resume\r\n    function onResuming(args) {\r\n        if (args.event !== null && !navigator.onLine) {\r\n            isInteraction = true;\r\n        }\r\n        else {\r\n            isInteraction = false;\r\n        }\r\n    }\r\n\r\n    function onFileRemove(args) {\r\n        args.postRawFile = false;\r\n    }\r\n    // initialize dropdown component\r\n    var listObj = new ej.dropdowns.DropDownList({\r\n        // set the index value to select an item based on index at initial rendering\r\n        index: 0,\r\n        // set the placeholder to DropDownList input element\r\n        placeholder: 'Select chunk size',\r\n        // set the height of the popup element\r\n        popupHeight: '200px',\r\n        // bind the change event\r\n         change: function (e) {\r\n            uploadObj.asyncSettings.chunkSize = parseInt(e.itemData.value, 10);\r\n         }\r\n    });\r\n    listObj.appendTo('#chunk-sizes');\r\n    // to prevent triggering chunk-upload failure event and to pause uploading on network failure\r\n    function onBeforeFailure(args) {\r\n        args.cancel = !isInteraction;\r\n        var uploadObj = document.getElementById('fileupload').ej2_instances[0];\r\n        // interval to check network availability on every 500 milliseconds\r\n        var clearTimeInterval = setInterval(function () {\r\n            if (navigator.onLine && !ej.base.isNullOrUndefined(uploadObj.filesData[0]) && uploadObj.filesData[0].statusCode == 4) {\r\n                uploadObj.resume(uploadObj.filesData);\r\n                clearSetInterval();\r\n            }\r\n            else {\r\n                if (!isInteraction && !ej.base.isNullOrUndefined(uploadObj.filesData[0]) && uploadObj.filesData[0].statusCode == 3) {\r\n                    uploadObj.pause(uploadObj.filesData);\r\n                }\r\n            }\r\n        }, 500);\r\n        // clear Interval after when network is available.\r\n        function clearSetInterval() {\r\n            clearInterval(clearTimeInterval);\r\n        }\r\n    }\r\n"}