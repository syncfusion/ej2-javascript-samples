{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/development/demos/chart/vertical/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div id=\"vertical-container\" align=\"center\"></div>\n</div>\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n</div></body></html>","index.js":"{{ripple}}/**\r\n * Sample for vertical chart\r\n */\r\n\r\n    var interval;\r\n    var chart = new ej.charts.Chart({\r\n        //Initializing Primary X Axis\r\n        primaryXAxis: { title: 'Time (s)', majorGridLines: { width: 0 } },\r\n        //Initializing Primary Y Axis\r\n        primaryYAxis: { title: 'Velocity (m/s)', majorGridLines: { width: 0 }, minimum: -15, maximum: 15, interval: 5 },\r\n        //Initializing Chart Series\r\n        series: [\r\n            {\r\n                type: 'Line', xName: 'x', yName: 'y', dataSource: [{ x: 0, y: 0 }],\r\n                animation: { enable: false }, width: 2\r\n            }\r\n        ],\r\n        chartArea: {\r\n            border: {\r\n                width: 0\r\n            }\r\n        },\r\n        isTransposed: true,\r\n        //Initializing Chart Title\r\n        title: 'Indonesia - Seismograph Analysis',\r\n        //Initializing Tooltip\r\n        tooltip: { enable: false },\r\n        width: ej.base.Browser.isDevice ? '100%' : '80%',\r\n\r\n        loaded: function (args) {\r\n            chart.loaded = null;\r\n            interval =\r\n                setInterval(function () {\r\n                    chart.series[0].dataSource = liveData(chart.series[0].dataSource, chart.series[0]);\r\n                    chart.refresh();\r\n                }, 10);\r\n        }\r\n    });\r\n    chart.appendTo('#vertical-container');\r\n    var count = 0;\r\n    function liveData(data, series) {\r\n        count = count + 1;\r\n        var newData = data;\r\n        if (count > 350 || document.getElementById('vertical-container') === null) {\r\n            clearInterval(interval);\r\n        }\r\n        else if (count > 300) {\r\n            newData.push({ x: getXValue(data), y: getRandomArbitrary(0, 0) });\r\n        }\r\n        else if (count > 250) {\r\n            newData.push({ x: getXValue(data), y: getRandomArbitrary(-2, 1) });\r\n        }\r\n        else if (count > 180) {\r\n            newData.push({ x: getXValue(data), y: getRandomArbitrary(-3, 2) });\r\n        }\r\n        else if (count > 100) {\r\n            newData.push({ x: getXValue(data), y: getRandomArbitrary(-7, 6) });\r\n        }\r\n        else if (count < 50) {\r\n            newData.push({ x: getXValue(data), y: getRandomArbitrary(-3, 3) });\r\n        }\r\n        else {\r\n            newData.push({ x: getXValue(data), y: getRandomArbitrary(-9, 9) });\r\n        }\r\n        return newData;\r\n    }\r\n    function getRandomArbitrary(min, max) {\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n    function getXValue(data) {\r\n        return data.length;\r\n    }\r\n"}