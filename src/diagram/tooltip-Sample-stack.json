{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/development/demos/diagram/tooltip-Sample/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-8 control-section\">\n    <style>\n        #tooltipDiagramSection .image-pattern-style {\n            background-color: white;\n            background-size: contain;\n            background-repeat: no-repeat;\n            height: 75px;\n            width: calc((100% - 12px) / 3);\n            cursor: pointer;\n            border: 1px solid #D5D5D5;\n            background-position: center;\n            float: left;\n        }\n\n        #tooltipDiagramSection .image-pattern-style:hover {\n            border-color: gray;\n            border-width: 2px;\n        }\n\n        #tooltipDiagramSection .row {\n            margin-left: 0px;\n            margin-right: 0px;\n        }\n\n        #tooltipDiagramSection .row-header {\n            font-size: 13px;\n            font-weight: 500;\n        }\n\n        #tooltipDiagramSection .e-selected-style {\n            border-color: #006CE6;\n            border-width: 2px;\n        }\n\n        #tooltipDiagramSection .e-checkbox-wrapper .e-label {\n            font-size: 12px;\n        }\n\n        #tooltipPropertySection .property-panel-header {\n            margin-left: 10px;\n        }\n\n        .content-wrapper {\n            border: 1px solid #D7D7D7;\n        }\n    </style>\n    <div id=\"tooltipDiagramSection\" class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div id=\"tooltipPropertySection\" class=\"col-lg-4 property-section\" style=\"padding-left: 0px\">\n    <table id=\"property\" title=\"Tooltip settings\">\n        <tbody><tr>\n            <td>\n                <div>\n                    Relative mode\n                </div>\n            </td>\n            <td>\n                <div>\n                    <input id=\"mode\" type=\"text\">\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>\n                    Position\n                </div>\n            </td>\n            <td>\n                <div>\n                    <input id=\"position\" type=\"text\">\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>\n                    Animation\n                </div>\n            </td>\n            <td>\n                <div>\n                    <input type=\"text\" id=\"duration\" style=\"width: 100%\" min=\"100\" max=\"2000\" step=\"100\" value=\"100\">\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>\n                    Effect\n                </div>\n            </td>\n            <td>\n                <div>\n                    <input id=\"effect\" type=\"text\">\n                </div>\n            </td>\n        </tr>\n    </tbody></table>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}\r\nej.diagrams.Diagram.Inject(ej.diagrams.BpmnDiagrams);\r\n\r\n\r\nfunction getcontent() {\r\n    var tooltipContent = document.createElement('div');\r\n    tooltipContent.innerHTML = '<div style=\"background-color: #f4f4f4; color: black; border-width:1px;border-style: solid;border-color: #d3d3d3; border-radius: 8px;white-space: nowrap;\"> <span style=\"margin: 10px;\"> Tooltip !!! </span> </div>';\r\n    return tooltipContent;\r\n}\r\n\r\n\r\n\r\n        var nodes = [\r\n            {\r\n                id: 'node1', width: 60, height: 60, offsetX: 35, offsetY: 120,\r\n                annotations: [{ content: 'Customer query', offset: { x: 0.5, y: 1 }, margin: { top: 15 } }],\r\n                tooltip: { content: 'Queries from the customer' },\r\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'Message' } }\r\n            },\r\n            {\r\n                id: 'node2', width: 75, height: 70, offsetX: 140, offsetY: 120,\r\n                annotations: [{ content: 'Enough details?', offset: { x: 0.50, y: 0.50 } }],\r\n                tooltip: { content: 'Whether the provided information is enough?' }, shape: { type: 'Bpmn', shape: 'Gateway' }\r\n            },\r\n            {\r\n                id: 'node3', width: 60, height: 50, offsetX: 270, offsetY: 120,\r\n                annotations: [{ content: 'Analyse', offset: { x: 0.50, y: 0.50 } }],\r\n                tooltip: { content: 'Analysing the query' },\r\n                shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } },\r\n            },\r\n            {\r\n                id: 'node4', width: 75, height: 70, offsetX: 370, offsetY: 120, shape: {\r\n                    type: 'Bpmn', shape: 'Gateway',\r\n                    gateway: { type: 'Exclusive' }\r\n                },\r\n                tooltip: { content: 'proceed to validate?' },\r\n            },\r\n            {\r\n                id: 'node5', width: 75, height: 70, offsetX: 570, offsetY: 120,\r\n                annotations: [{ content: 'Validate', offset: { x: 0.50, y: 0.50 } }],\r\n                tooltip: { content: 'Whether the reported/requested bug/feature is valid?' }, shape: { type: 'Bpmn', shape: 'Gateway' }\r\n            },\r\n            {\r\n                id: 'node6', width: 60, height: 60, offsetX: 720, offsetY: 120,\r\n                tooltip: { content: 'Send the invalid message to customer' },\r\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\r\n            },\r\n            {\r\n                id: 'node7', width: 60, height: 50, offsetX: 140, offsetY: 280,\r\n                annotations: [{ content: 'Request', offset: { x: 0.50, y: 0.50 }, margin: { top: 5 } }],\r\n                tooltip: { content: 'Requesting for more information' },\r\n                shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task', task: { type: 'Send' } } }\r\n            },\r\n            {\r\n                id: 'node8', width: 60, height: 60, offsetX: 370, offsetY: 280,\r\n                tooltip: { content: 'Share the User Guide/Knowledge Base link' },\r\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'Message' } }\r\n            },\r\n            {\r\n                id: 'node9', width: 70, height: 50, offsetX: 570, offsetY: 280,\r\n                annotations: [{ content: 'Log bug/feature', offset: { x: 0.50, y: 0.50 } }], tooltip: { content: 'Log the bug/feature' },\r\n                shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } }\r\n            },\r\n            {\r\n                id: 'node10', width: 75, height: 55, offsetX: 390, offsetY: 430,\r\n                annotations: [{ content: 'Implement', offset: { x: 0.50, y: 0.50 } }], tooltip: { content: 'Fix the bug/Add the feature' },\r\n                shape: {\r\n                    type: 'Bpmn', shape: 'Activity', activity: {\r\n                        activity: 'SubProcess', subProcess: {\r\n                            collapsed: false,\r\n                            events: [{ event: 'Intermediate', trigger: 'Timer', offset: { x: 0.5, y: 1 }, width: 25, height: 25 }]\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                id: 'node12', width: 60, height: 60, offsetX: 265, offsetY: 430, tooltip: { content: 'Provide the solution' },\r\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\r\n            },\r\n            {\r\n                id: 'node13', width: 60, height: 60, offsetX: 720, offsetY: 430, tooltip: { content: 'Share the task details' },\r\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\r\n            },\r\n            {\r\n                id: 'node14', width: 60, height: 60, offsetX: 570, offsetY: 430, shape: {\r\n                    type: 'Bpmn', shape: 'Gateway',\r\n                    gateway: { type: 'Parallel' }\r\n                },\r\n                tooltip: { content: 'can log?' },\r\n            },\r\n        ];\r\n    var connectors = [\r\n        { id: 'connector1', sourceID: 'node1', targetID: 'node2' },\r\n        { id: 'connector2', sourceID: 'node2', targetID: 'node3' },\r\n        { id: 'connector3', sourceID: 'node3', targetID: 'node4' },\r\n        {\r\n            id: 'connector4', sourceID: 'node4', targetID: 'node5',\r\n            annotations: [{ content: 'Feature/Bug', offset: 0.5, style: { fill: 'white', textWrapping: 'Wrap' } }]\r\n        },\r\n        {\r\n            id: 'connector5', sourceID: 'node5', targetID: 'node6',\r\n            annotations: [{ content: 'Invalid', offset: 0.5, style: { fill: 'white' } }]\r\n        },\r\n        { id: 'connector6', sourceID: 'node2', targetID: 'node7' },\r\n        {\r\n            id: 'connector7', sourceID: 'node4', targetID: 'node8',\r\n            annotations: [{ content: 'How to?', offset: 0.5, style: { fill: 'white' } }]\r\n        },\r\n        { id: 'connector8', sourceID: 'node5', targetID: 'node9' },\r\n        { id: 'connector9', sourceID: 'node14', targetID: 'node13' },\r\n        {\r\n            id: 'connector10', sourceID: 'node7', targetID: 'node3', type: 'Orthogonal',\r\n            segments: [{ type: 'Orthogonal', length: 100, direction: 'Right' }, { type: 'Orthogonal', length: 100, direction: 'Top' }]\r\n        },\r\n        { id: 'connector11', sourceID: 'node14', targetID: 'node10' },\r\n        { id: 'connector12', sourceID: 'node10', targetID: 'node12' },\r\n        { id: 'connector13', sourceID: 'node9', targetID: 'node14' },\r\n    ];\r\n    function getcontent() {\r\n        var tooltipContent = document.createElement('div');\r\n        tooltipContent.innerHTML =\r\n            '<div style=\"border-width:1px;\"><span> Tooltip !!! </span> </div>';\r\n        return tooltipContent;\r\n    }\r\n    function getConnectorDefaults(connector, diagram) {\r\n        connector.type = 'Orthogonal';\r\n        connector.style = { strokeWidth: 2 };\r\n        return connector;\r\n    }\r\n    function getNodeDefaults(obj) {\r\n        obj.offsetX += 0.5;\r\n        obj.offsetY += 0.5;\r\n        obj.constraints = ej.diagrams.NodeConstraints.Default | ej.diagrams.NodeConstraints.Tooltip;\r\n        obj.style = { strokeWidth: 2 };\r\n        return obj;\r\n    }\r\n\r\n    //Initializes diagram control\r\n    var diagram = new ej.diagrams.Diagram({\r\n        width: '100%', height: '645px', connectors: connectors, nodes: nodes,\r\n        getConnectorDefaults: getConnectorDefaults,\r\n        getNodeDefaults: getNodeDefaults,\r\n        snapSettings: { constraints: ej.diagrams.SnapConstraints.None },\r\n        tooltip: {\r\n            content: getcontent(), position: 'TopLeft', relativeMode: 'Object',\r\n            animation: { open: { effect: 'FadeZoomIn', delay: 100 }, close: { effect: 'FadeZoomOut', delay: 100 } }\r\n        }\r\n    });\r\n    diagram.appendTo('#diagram');\r\n    var modevalue = [\r\n        { type: 'Object', text: 'Object' },\r\n        { type: 'Mouse', text: 'Mouse' },\r\n    ];\r\n    var positionValue = [\r\n        { type: 'TopLeft', text: 'TopLeft' },\r\n        { type: 'TopCenter', text: 'TopCenter' },\r\n        { type: 'TopRight', text: 'TopRight' },\r\n        { type: 'BottomLeft', text: 'BottomLeft' },\r\n        { type: 'BottomCenter', text: 'BottomCenter' },\r\n        { type: 'BottomRight', text: 'BottomRight' },\r\n        { type: 'LeftTop', text: 'LeftTop' },\r\n        { type: 'LeftCenter', text: 'LeftCenter' },\r\n        { type: 'LeftBottom', text: 'LeftBottom' },\r\n        { type: 'RightTop', text: 'RightTop' },\r\n        { type: 'RightCenter', text: 'RightCenter' },\r\n        { type: 'RightBottom', text: 'RightBottom' },\r\n    ];\r\n    var effectValue = [\r\n        { type: 'FadeIn', text: 'FadeIn' },\r\n        { type: 'FadeOut', text: 'FadeOut' },\r\n        { type: 'FadeZoomIn', text: 'FadeZoomIn' },\r\n        { type: 'FadeZoomOut', text: 'FadeZoomOut' },\r\n        { type: 'FlipXDownIn', text: 'FlipXDownIn' },\r\n        { type: 'FlipXDownOut', text: 'FlipXDownOut' },\r\n        { type: 'FlipXUpIn', text: 'FlipXUpIn' },\r\n        { type: 'FlipXUpOut', text: 'FlipXUpOut' },\r\n        { type: 'FlipYLeftIn', text: 'FlipYLeftIn' },\r\n        { type: 'FlipYLeftOut', text: 'FlipYLeftOut' },\r\n        { type: 'FlipYRightIn', text: 'FlipYRightIn' },\r\n        { type: 'FlipYRightOut', text: 'FlipYRightOut' },\r\n        { type: 'ZoomIn', text: 'ZoomIn' },\r\n        { type: 'ZoomOut', text: 'ZoomOut' },\r\n        { type: 'None', text: 'None' },\r\n    ];\r\n    var mode = new ej.dropdowns.DropDownList({\r\n        dataSource: modevalue,\r\n        fields: { value: 'type', text: 'text' }, popupWidth: 150,\r\n        width: '100%', placeholder: 'select a font type', index: 0,\r\n        change: function () {\r\n            if (mode.value === 'Mouse') {\r\n                diagram.tooltip.relativeMode = 'Mouse';\r\n            }\r\n            else {\r\n                diagram.tooltip.relativeMode = 'Object';\r\n            }\r\n        }\r\n    });\r\n    mode.appendTo('#mode');\r\n    var position = new ej.dropdowns.DropDownList({\r\n        dataSource: positionValue,\r\n        fields: { value: 'type', text: 'text' }, popupWidth: 150,\r\n        width: '100%', placeholder: 'select a font type', index: 0,\r\n        change: function (args) {\r\n            var nodes = diagram.nodes;\r\n            for (var i = 0; i < nodes.length; i++) {\r\n                if (nodes[i].tooltip) {\r\n                    nodes[i].tooltip.position = args.value;\r\n                    diagram.dataBind();\r\n                }\r\n            }\r\n        }\r\n    });\r\n    position.appendTo('#position');\r\n    var effect = new ej.dropdowns.DropDownList({\r\n        dataSource: effectValue,\r\n        fields: { value: 'type', text: 'text' }, popupWidth: 150,\r\n        width: '100%', placeholder: 'select a effect type', index: 0,\r\n        change: function (args) {\r\n            diagram.tooltip.animation.open.effect = args.value;\r\n            diagram.tooltip.animation.close.effect = args.value;\r\n        }\r\n    });\r\n    effect.appendTo('#effect');\r\n    var textContent = new ej.inputs.TextBox({\r\n        placeholder: 'Enter text content',\r\n        floatLabelType: 'Auto',\r\n        change: function (args) {\r\n            diagram.tooltip.content = args.value.toString();\r\n            diagram.dataBind();\r\n        }\r\n    });\r\n    textContent.appendTo('#textContent');\r\n    var htmlContent = new ej.inputs.TextBox({\r\n        placeholder: 'Enter html content',\r\n        floatLabelType: 'Auto',\r\n        change: function (args) {\r\n            var tooltipContent = document.createElement('div');\r\n            var description = args.value.toString();\r\n            tooltipContent.innerHTML =\r\n                '<div style=\"border-width:1px;\"><span> ' + description + ' </span></div>';\r\n            diagram.tooltip.content = tooltipContent;\r\n            diagram.dataBind();\r\n        }\r\n    });\r\n    htmlContent.appendTo('#htmlContent');\r\n    var animation = new ej.inputs.NumericTextBox({\r\n        format: '###.##',\r\n        change: function (args) {\r\n            diagram.tooltip.animation.close.duration = args.value;\r\n            diagram.tooltip.animation.open.duration = args.value;\r\n        }\r\n    });\r\n    animation.appendTo('#duration');\r\n    var temp = '<div style=\"background-color: #f4f4f4; color: black; border-width:1px;' +\r\n        'border-style: solid;border-color: #d3d3d3; border-radius: 8px;white-space: nowrap;\">' +\r\n        ' <span style=\"margin: 10px;\">';\r\n    diagram.fitToPage({ mode: 'Width' });\r\n"}