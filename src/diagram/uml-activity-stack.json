{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/production/demos/diagram/uml-activity/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"http://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"http://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><link href=\"src/diagram/styles/diagram-common.css\" rel=\"stylesheet\">\n\n\n<div class=\"control-section\">\n<style>\n    .sb-mobile-palette {\n        width: 210px;\n        height: 100%;\n        float: left;\n    }\n\n    .sb-mobile-palette-bar {\n        display: none;\n    }\n\n    .sb-mobile-diagram {\n        width: calc(100% - 212px);\n        height: 100%;\n        float: left;\n        border: 1px solid rgba(0, 0, 0, 0.12);\n        border-left: none;\n    }\n\n    .container-fluid {\n        padding-bottom: 15px;\n    }\n\n    @media (max-width: 550px) {\n\n        .sb-mobile-palette {\n            z-index: 19;\n            position: absolute;\n            display: none;\n            transition: transform 300ms linear, visibility 0s linear 300ms;\n            width: 39%;\n            height: 100%;\n        }\n\n        .sb-mobile-palette-bar {\n            display: block;\n            width: 100%;\n            background: #fafafa;\n            padding: 10px 10px;\n            border: 0.5px solid #e0e0e0;\n            min-height: 40px;\n        }\n\n        .sb-mobile-diagram {\n            width: 100%;\n            height: 100%;\n            float: left;\n            left: 0px;\n        }\n\n        #palette-icon {\n            font-size: 20px;\n        }\n    }\n\n    .sb-mobile-palette-open {\n        position: absolute;\n        display: block;\n        right: 15px;\n    }\n\n    @font-face {\n        font-family: 'e-ddb-icons1';\n        src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format('truetype');\n        font-weight: normal;\n        font-style: normal;\n    }\n\n    .e-ddb-icons1 {\n        font-family: 'e-ddb-icons1';\n        speak: none;\n        font-size: 16px;\n        font-style: normal;\n        font-weight: normal;\n        font-variant: normal;\n        text-transform: none;\n        line-height: 1;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n\n    .e-toggle-palette::before {\n        content: \"\\e700\"\n    }\n\n    .material #umlActivityDiagram #palette-space .e-accordion {\n        border: none;\n    }\n\n    .material #umlActivityDiagram #palette-space {\n        border: 1px solid rgba(0, 0, 0, 0.12);\n    }\n\n    .bootstrap #umlActivityDiagram .sb-mobile-diagram {\n        height: calc(100% - 17px);\n        margin-top: 5px;\n        border-radius: 4px;\n        border-left: 1px solid rgba(0, 0, 0, 0.12);\n    }\n\n    .fabric #umlActivityDiagram .sb-mobile-diagram {\n        border-left: 1px solid rgba(0, 0, 0, 0.12);\n    }\n</style>\n        <div id=\"umlActivityDiagram\" style=\"width: 100%; height: 521px\">\n    <div class=\"sb-mobile-palette-bar\">\n        <div id=\"palette-icon\" style=\"float: right;\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n    </div>\n    <div id=\"palette-space\" class=\"sb-mobile-palette\">\n        <div id=\"symbolPalette\" style=\"width:90%;\"></div>\n    </div>\n    <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n        <div id=\"diagram\"></div>\n    </div>\n    </div>\n</div>\n\n\n</div></body></html>","index.js":"{{ripple}}/**\n * UMLActivity Diagram for customer service\n */\nej.diagrams.Diagram.Inject(ej.diagrams.UndoRedo);\n\n//Create and add ports for node.\nfunction getNodePorts(obj) {\n    if (obj.id === 'node2' || obj.id === 'node9') {\n        var node2Ports = [\n            { id: 'port1', offset: { x: 0.2, y: 1 } },\n            { id: 'port2', offset: { x: 0.8, y: 1 } },\n            { id: 'port3', offset: { x: 0.2, y: 0 } },\n            { id: 'port4', offset: { x: 0.8, y: 0 } },\n        ];\n        return node2Ports;\n    } else {\n        var ports = [\n            { id: 'portLeft', offset: { x: 0, y: 0.5 } },\n            { id: 'portRight', offset: { x: 1, y: 0.5 } },\n            { id: 'portBottom', offset: { x: 0.5, y: 1 } },\n            { id: 'portTop', offset: { x: 0.5, y: 0 } },\n        ];\n        return ports;\n    }\n}\n\n// Initializes connector symbols to the connector palette in the symbol palette\nfunction getConnectors() {\n    var targetDecorator = { shape: 'Arrow', style: { fill: '#444', strokeColor: '#444' } };\n    var sourcePoint = { x: 0, y: 0 };\n    var targetPoint = { x: 40, y: 40 };\n    var connectorSymbols = [\n        {\n            id: 'Link2', sourcePoint: sourcePoint, targetPoint: targetPoint,\n            type: 'Orthogonal', style: getConnectorStyle(true), targetDecorator: targetDecorator,\n        },\n        {\n            id: 'Link1', sourcePoint: sourcePoint, targetPoint: targetPoint,\n            type: 'Orthogonal', style: getConnectorStyle(), targetDecorator: targetDecorator,\n        },\n        {\n            id: 'Link3', sourcePoint: sourcePoint, targetPoint: targetPoint,\n            type: 'Straight', style: getConnectorStyle(), targetDecorator: targetDecorator,\n        }\n    ];\n    return connectorSymbols;\n}\n\n// sets style for the connector symbols to the connector palette in the symbol palette\nfunction getConnectorStyle(dashArrayed) {\n    var style = {};\n    if (dashArrayed) {\n        style = { strokeWidth: 2, strokeColor: '#444', strokeDashArray: '4 4', };\n    } else {\n        style = { strokeWidth: 2, strokeColor: '#444' };\n    }\n    return style;\n}\n\n// sets the default values for the symbols in the symbol palette\nfunction setPaletteNodeDefaults(symbol) {\n    if (symbol.id === 'JoinNode') {\n        symbol.width = 20; symbol.height = 50;\n    } else if (symbol.id === 'ForkNode') {\n        symbol.width = 50; symbol.height = 20;\n    } else if (symbol.id === 'Decision' || symbol.id === 'MergeNode') {\n        symbol.width = 50; symbol.height = 40;\n    } else {\n        symbol.width = 50; symbol.height = 50;\n    }\n    if (symbol.id === 'InitialNode' || symbol.id === 'FinalNode' || symbol.id === 'JoinNode' || symbol.id === 'ForkNode') {\n        symbol.style.fill = '#444';\n    }\n    symbol.style.strokeColor = '#444';\n}\n\nfunction addEvents() {\n    var isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        var paletteIcon = document.getElementById('palette-icon');\n        if (paletteIcon) {\n            paletteIcon.addEventListener('click', openPalette, false);\n        }\n    }\n}\n\n\n    var bounds = document.getElementById('diagram-space').getBoundingClientRect();\n    var centerX = bounds.width / 2;\n    var middle = centerX - 50;\n    var left = middle - 120;\n    var right = middle + 120;\n    //Initializes the nodes for the diagram\n    var nodes = [\n        {\n            id: 'Start', height: 40, width: 40, offsetX: middle, offsetY: 25,\n            shape: { type: 'UmlActivity', shape: 'InitialNode' }\n        }, {\n            id: 'ReceiveCall', height: 40, width: 105, offsetX: middle, offsetY: 85,\n            shape: { type: 'UmlActivity', shape: 'Action' },\n            annotations: [{ content: 'Receive Customer Call' }]\n        }, {\n            id: 'node2', height: 10, width: 70, offsetX: middle, offsetY: 130,\n            shape: { type: 'UmlActivity', shape: 'ForkNode' }\n        }, {\n            id: 'Determine', height: 40, width: 105, offsetX: left, offsetY: 210,\n            shape: { type: 'UmlActivity', shape: 'Action' },\n            annotations: [{ content: 'Determine Type of Call' }]\n        }, {\n            id: 'Log', height: 40, width: 105, offsetX: right, offsetY: 210,\n            shape: { type: 'UmlActivity', shape: 'Action' },\n            annotations: [{ content: 'Customer Logging a Call' }]\n        }, {\n            id: 'node5', height: 50, width: 50, offsetX: left, offsetY: 290,\n            shape: { type: 'UmlActivity', shape: 'Decision' }\n        }, {\n            id: 'transfer_sales', height: 40, width: 105, offsetX: middle - 200, offsetY: 360,\n            shape: { type: 'UmlActivity', shape: 'Action' },\n            annotations: [{ content: 'Transfer the call to Sales' }]\n        }, {\n            id: 'transfer_desk', height: 40, width: 105, offsetX: middle - 25, offsetY: 360,\n            shape: { type: 'UmlActivity', shape: 'Action' },\n            annotations: [{ content: 'Transfer the call to Help Desk' }]\n        }, {\n            id: 'node8', height: 50, width: 50, offsetX: left, offsetY: 430,\n            shape: { type: 'UmlActivity', shape: 'MergeNode' }\n        }, {\n            id: 'node9', height: 10, width: 70, offsetX: middle, offsetY: 500,\n            shape: { type: 'UmlActivity', shape: 'JoinNode' }\n        }, {\n            id: 'CloseCall', height: 40, width: 105, offsetX: middle, offsetY: 550,\n            shape: { type: 'UmlActivity', shape: 'Action' },\n            annotations: [{ content: 'Close Call', margin: { left: 25, right: 25 } }]\n        }, {\n            id: 'node11', height: 40, width: 40, offsetX: middle, offsetY: 615,\n            shape: { type: 'UmlActivity', shape: 'FinalNode' }\n        }\n    ];\n\n    //Initializes the connector for the diagram\n    var connectors = [\n        { id: 'connector1', sourceID: 'Start', targetID: 'ReceiveCall' },\n        { id: 'connector2', sourceID: 'ReceiveCall', targetID: 'node2' },\n        {\n            id: 'connector3', sourceID: 'node2', targetID: 'Determine',\n            sourcePortID: 'port1', targetPortID: 'portTop',\n            segments: [\n                { type: 'Orthogonal', length: 20, direction: 'Bottom' },\n                { type: 'Orthogonal', length: 50, direction: 'Left' }\n            ],\n        },\n        {\n            id: 'connector4', sourceID: 'node2', targetID: 'Log',\n            sourcePortID: 'port2', targetPortID: 'portTop',\n            segments: [\n                { type: 'Orthogonal', length: 20, direction: 'Bottom' },\n                { type: 'Orthogonal', length: 50, direction: 'Right' }\n            ],\n        },\n        { id: 'connector5', sourceID: 'Determine', targetID: 'node5' },\n        {\n            id: 'connector6', sourceID: 'node5', targetID: 'transfer_sales',\n            sourcePortID: 'portLeft', targetPortID: 'portTop',\n            shape: { type: 'UmlActivity', flow: 'Object' },\n            annotations: [\n                {\n                    id: 'connector6Label', content: 'type=New customer', offset: 0.715,\n                    style: { fill: 'white', color: 'black', textWrapping: 'NoWrap' }\n                }\n            ],\n        },\n        {\n            id: 'connector7', sourceID: 'node5', targetID: 'transfer_desk',\n            sourcePortID: 'portRight', targetPortID: 'portTop',\n            shape: { type: 'UmlActivity', flow: 'Object' },\n            annotations: [\n                {\n                    id: 'connector7Label', content: 'type=Existing customer', offset: 0.75,\n                    style: { fill: 'white', color: 'black', textWrapping: 'NoWrap' }\n                }\n            ],\n        },\n        {\n            id: 'connector8', sourceID: 'transfer_sales', targetID: 'node8',\n            sourcePortID: 'portBottom', targetPortID: 'portLeft',\n            segments: [{ type: 'Orthogonal', length: 50, direction: 'Bottom' }],\n        },\n        {\n            id: 'connector9', sourceID: 'transfer_desk', targetID: 'node8',\n            sourcePortID: 'portBottom', targetPortID: 'portRight',\n            segments: [{ type: 'Orthogonal', length: 50, direction: 'Bottom' }],\n        },\n        {\n            id: 'connector10', sourceID: 'node8', targetID: 'node9',\n            sourcePortID: 'portBottom', targetPortID: 'port3'\n        },\n        {\n            id: 'connector11', sourceID: 'Log', targetID: 'node9',\n            sourcePortID: 'portBottom', targetPortID: 'port4',\n            segments: [\n                { type: 'Orthogonal', length: 213, direction: 'Bottom' },\n                { type: 'Orthogonal', length: 50, direction: 'Left' }\n            ],\n        },\n        { id: 'connector12', sourceID: 'node9', targetID: 'CloseCall' },\n        { id: 'connector13', sourceID: 'CloseCall', targetID: 'node11' }\n    ];\n\n    // initializes the uml activity symbols to the UML Shapes in the symbol palette\n    var umlActivityShapes = [\n        { id: 'Action', shape: { type: 'UmlActivity', shape: 'Action' } },\n        { id: 'Decision', shape: { type: 'UmlActivity', shape: 'Decision' } },\n        { id: 'MergeNode', shape: { type: 'UmlActivity', shape: 'MergeNode' } },\n        { id: 'InitialNode', shape: { type: 'UmlActivity', shape: 'InitialNode' } },\n        { id: 'FinalNode', shape: { type: 'UmlActivity', shape: 'FinalNode' } },\n        { id: 'ForkNode', shape: { type: 'UmlActivity', shape: 'ForkNode' } },\n        { id: 'JoinNode', shape: { type: 'UmlActivity', shape: 'JoinNode' } },\n        { id: 'TimeEvent', shape: { type: 'UmlActivity', shape: 'TimeEvent' } },\n        { id: 'AcceptingEvent', shape: { type: 'UmlActivity', shape: 'AcceptingEvent' } },\n        { id: 'SendSignal', shape: { type: 'UmlActivity', shape: 'SendSignal' } },\n        { id: 'ReceiveSignal', shape: { type: 'UmlActivity', shape: 'ReceiveSignal' } },\n        { id: 'StructuredNode', shape: { type: 'UmlActivity', shape: 'StructuredNode' } },\n        { id: 'Note', shape: { type: 'UmlActivity', shape: 'Note' } }\n    ];\n\n    //Initializes diagram control\n    var diagram = new ej.diagrams.Diagram({\n        // sets the height and width of the diagram\n        width: '100%', height: '100%',\n        // sets the nodes and connectors of the diagram\n        nodes: nodes, connectors: connectors,\n        // sets snap settings to the diagram\n        snapSettings: {\n            constraints: ej.diagrams.SnapConstraints.None\n        },\n        //Sets the default values of a node\n        getNodeDefaults: function (obj) {\n            obj.ports = getNodePorts(obj);\n            if (obj.ports) {\n                for (var i = 0; i < obj.ports.length; i++) {\n                    obj.ports[i].visibility = ej.diagrams.PortVisibility.Hidden;\n                }\n            }\n            if (obj.id === 'Start' || obj.id === 'node2' || obj.id === 'node9' || obj.id === 'node11') {\n                obj.style.fill = '#444';\n            }\n            obj.style.strokeColor = '#444';\n            return obj;\n        },\n        //Sets the default values of a Connector.\n        getConnectorDefaults: function (obj) {\n            if (obj.id.indexOf('connector') !== -1) {\n                obj.type = 'Orthogonal'; obj.cornerRadius = 10;\n                obj.targetDecorator = { shape: 'OpenArrow', style: { strokeColor: '#444', fill: '#444' } };\n            }\n        },\n        created: function () {\n            addEvents();\n        }\n    });\n    diagram.appendTo('#diagram');\n    //Initializes symbol palette\n    var palette = new ej.diagrams.SymbolPalette({\n        // sets the expandable mode of the symbol palette\n        expandMode: 'Multiple',\n        // sets the height and wodth of the symbol palette\n        width: '100%', height: '100%',\n        // sets the default values for the symbols in the symbol palette\n        getNodeDefaults: setPaletteNodeDefaults,\n        // sets the height and width of the symbols\n        symbolHeight: 55, symbolWidth: 55,\n        // sets the margin for the symbol\n        symbolMargin: { left: 10, right: 10, top: 10, bottom: 10 },\n        // sets the palettes to be displayed in the symbol palette\n        palettes: [\n            { id: 'umlActivity', expanded: true, symbols: umlActivityShapes, title: 'UML Shapes' },\n            { id: 'Connector', expanded: true, symbols: getConnectors(), title: 'Connectors' },\n        ],\n        getSymbolInfo: function (symbol) { return { fit: true }; }\n    });\n    palette.appendTo('#symbolPalette');\n\n"}