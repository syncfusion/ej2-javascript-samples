{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/production/demos/diagram/shape-gallery/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"http://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"http://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}ej.diagrams.Diagram.Inject(ej.diagrams.DataBinding, ej.diagrams.BpmnDiagrams);\nvar basicShapeModel = [\n    {\n        shape: { type: 'Text', content: 'Basic Shapes' }, constraints: ej.diagrams.NodeConstraints.PointerEvents,\n        style: { fontSize: 16, fill: 'None', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 },\n    },\n    {\n        shape: { type: 'Basic', shape: 'Rectangle' }, annotations: [\n            { content: 'Rectangle' }\n        ]\n    },\n    {\n        shape: { type: 'Basic', shape: 'Ellipse' }, annotations: [\n            { content: 'Ellipse' }\n        ]\n    },\n    {\n        shape: { type: 'Basic', shape: 'Triangle' }, annotations: [\n            { content: 'Triangle' }\n        ]\n    },\n    {\n        shape: { type: 'Basic', shape: 'Plus' }, annotations: [\n            { content: 'Plus' }\n        ]\n    },\n    {\n        shape: { type: 'Basic', shape: 'Star' }, annotations: [\n            { content: 'Star' }\n        ]\n    },\n    {\n        shape: { type: 'Basic', shape: 'Pentagon' }, annotations: [\n            { content: 'Pentagon' }\n        ]\n    },\n    {\n        shape: { type: 'Basic', shape: 'Heptagon' }, annotations: [\n            { content: 'Heptagon' }\n        ]\n    },\n    {\n        shape: { type: 'Basic', shape: 'Octagon' }, annotations: [\n            { content: 'Octagon' }\n        ]\n    },\n    {\n        shape: { type: 'Basic', shape: 'Trapezoid' }, annotations: [\n            { content: 'Trapezoid' }\n        ]\n    },\n    {\n        shape: { type: 'Basic', shape: 'Decagon' }, annotations: [\n            { content: 'Decagon' }\n        ]\n    },\n    {\n        shape: { type: 'Basic', shape: 'RightTriangle' }, annotations: [\n            { content: 'Right Triangle' }\n        ]\n    },\n    {\n        shape: { type: 'Basic', shape: 'Parallelogram' }, annotations: [\n            { content: 'Parallelogram' }\n        ]\n    },\n];\nvar flowShapeModel = [\n    {\n        shape: { type: 'Text', content: 'Flow Shapes' }, constraints: ej.diagrams.NodeConstraints.PointerEvents,\n        style: { fontSize: 16, fill: 'None', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 },\n    },\n    {\n        shape: { type: 'Flow', shape: 'Terminator' }, annotations: [\n            { content: 'Terminator' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'Process' }, annotations: [\n            { content: 'Process' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'Decision' }, annotations: [\n            { content: 'Decision' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'Document' }, annotations: [\n            { content: 'Document' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'PreDefinedProcess' }, annotations: [\n            { content: 'Predefined Process' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'PaperTap' }, annotations: [\n            { content: 'Paper Tape' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'DirectData' }, annotations: [\n            { content: 'Direct Data' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'SequentialData' }, annotations: [\n            { content: 'Direct Data' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'Sort' }, annotations: [\n            { content: 'Sort' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'MultiDocument' }, annotations: [\n            { content: 'Multi-Document' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'Collate' }, annotations: [\n            { content: 'Collate' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'SummingJunction' }, annotations: [\n            { content: 'Summing Junction' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'Or' }, annotations: [\n            { content: 'Or' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'InternalStorage' }, annotations: [\n            { content: 'Internal Storage' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'Extract' }, annotations: [\n            { content: 'Extract' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'ManualOperation' }, annotations: [\n            { content: 'Manual Operation' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'Merge' }, annotations: [\n            { content: 'Merge' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'OffPageReference' }, annotations: [\n            { content: 'Off-Page Reference' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'SequentialAccessStorage' }, annotations: [\n            { content: 'Sequential Access Storage' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'Data' }, annotations: [\n            { content: 'Data' }\n        ]\n    },\n    {\n        shape: { type: 'Flow', shape: 'Card' }, annotations: [\n            { content: 'Card' }\n        ]\n    },\n];\n\nvar bpmnShapeModel = [\n    {\n        shape: { type: 'Text', content: 'BPMN Shapes' }, constraints: ej.diagrams.NodeConstraints.PointerEvents,\n        style: { fontSize: 16, fill: 'none', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 },\n    },\n    {\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'None' } },\n        annotations: [\n            { content: 'Start Event' }\n        ]\n    },\n    {\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Intermediate', trigger: 'None' } },\n        annotations: [\n            { content: 'Intermediate Event' }\n        ]\n    },\n    {\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'None' } },\n        annotations: [\n            { content: 'End Event' }\n        ]\n    },\n    {\n        shape: { type: 'Bpmn', shape: 'Gateway' },\n        annotations: [\n            { content: 'Gateway' }\n        ]\n    },\n    {\n        shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } },\n        annotations: [\n            { content: 'Task' }\n        ]\n    },\n    {\n        shape: {\n            type: 'Bpmn', shape: 'Activity', activity: {\n                activity: 'SubProcess',\n                subProcess: {\n                    type: 'Transaction', transaction: {\n                        success: { visible: false }, failure: { visible: false }, cancel: { visible: false }\n                    }\n                }\n            },\n        },\n        annotations: [\n            { content: 'Transaction' }\n        ]\n    },\n    {\n        shape: { type: 'Bpmn', shape: 'Message' }, annotations: [{ content: 'Message' }]\n    },\n    {\n        shape: { type: 'Bpmn', shape: 'DataObject' }, annotations: [{ content: 'Data Object' }]\n    },\n    {\n        shape: { type: 'Bpmn', shape: 'DataSource' }, annotations: [{ content: 'Data Source' }]\n    },\n    {\n        shape: { type: 'Bpmn', shape: 'Group' }, annotations: [{ content: 'Group' }]\n    },\n    {\n        shape: { type: 'Bpmn', shape: 'TextAnnotation' }, annotations: [{ content: 'Text Annotation' }]\n    }\n];\n/**\n * Sample for Shape gallery.\n */\nvar shape = [\n    { shapeName: 'Basic Shapes', shapeId: 'Basic' },\n    { shapeName: 'Flow Shapes', shapeId: 'Flow' },\n    { shapeName: 'BPMN Shapes', shapeId: 'Bpmn' },\n];\n//create and return the Nodes collection.\nfunction getNodes() {\n    var nodes1 = basicShapeModel;\n    nodes1 = nodes1.concat(flowShapeModel).concat(bpmnShapeModel);\n    var offsetx = 60;\n    var offsety = 50;\n    var count = 1;\n    for (var i = 0; i < nodes1.length; i++) {\n        var node = nodes1[i];\n        node.width = 40;\n        node.height = 40;\n        if (node.shape.type === 'Flow') {\n            var shapeType = node.shape.shape;\n            if (shapeType === 'Process' || shapeType === 'Terminator') {\n                node.height = 20;\n            } else if (shapeType === 'Decision') {\n                node.height = 35;\n            } else if (shapeType === 'Document' || shapeType === 'DirectData' ||\n                shapeType === 'MultiDocument' || shapeType === 'PreDefinedProcess') {\n                node.height = 30;\n            }\n        }\n        node.offsetX = offsetx;\n        node.offsetY = offsety;\n        if (node.shape.type !== \"Text\") {\n            node.annotations[0].verticalAlignment = 'Top';\n            node.annotations[0].offset = { y: 1 };\n            node.annotations[0].margin = { top: 10 };\n\n            offsetx = offsetx + 90;\n            if (count % 10 === 0) {\n                offsety = offsety + 100;\n                offsetx = 60;\n            }\n            count++;\n        }\n        if (node.shape.type === 'Text') {\n            offsetx = 60;\n            offsety = offsety + 50;\n            count = 1;\n            node.width = 150;\n            node.height = 100;\n            node.offsetX = 90;\n            if (node.shape.content !== 'Basic Shapes') {\n                node.offsetX = 90;\n                node.offsetY = offsety + 50;\n                offsety = offsety + 100;\n            }\n        }\n    }\n    return nodes1;\n}\n\n    var objects = getNodes();\n    //Initialize diagram control\n    var diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '499px', snapSettings: { constraints: ej.diagrams.SnapConstraints.None },\n        nodes: objects,\n        //Defines the default node and connector properties\n        getNodeDefaults: function (obj, diagram) {\n            return obj;\n        },\n    });\n    diagram.appendTo('#diagram');\n    diagram.fitToPage({ mode: 'Width' });\n\n"}