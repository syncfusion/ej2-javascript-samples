{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/development/demos/diagram/shape-gallery/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}ej.diagrams.Diagram.Inject(ej.diagrams.DataBinding, ej.diagrams.BpmnDiagrams);\r\nvar basicShapeModel = [\r\n    {\r\n        shape: { type: 'Text', content: 'Basic Shapes' }, constraints: ej.diagrams.NodeConstraints.PointerEvents,\r\n        style: { fontSize: 16, fill: 'None', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 },\r\n    },\r\n    {\r\n        shape: { type: 'Basic', shape: 'Rectangle' }, annotations: [\r\n            { content: 'Rectangle' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Basic', shape: 'Ellipse' }, annotations: [\r\n            { content: 'Ellipse' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Basic', shape: 'Triangle' }, annotations: [\r\n            { content: 'Triangle' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Basic', shape: 'Plus' }, annotations: [\r\n            { content: 'Plus' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Basic', shape: 'Star' }, annotations: [\r\n            { content: 'Star' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Basic', shape: 'Pentagon' }, annotations: [\r\n            { content: 'Pentagon' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Basic', shape: 'Heptagon' }, annotations: [\r\n            { content: 'Heptagon' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Basic', shape: 'Octagon' }, annotations: [\r\n            { content: 'Octagon' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Basic', shape: 'Trapezoid' }, annotations: [\r\n            { content: 'Trapezoid' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Basic', shape: 'Decagon' }, annotations: [\r\n            { content: 'Decagon' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Basic', shape: 'RightTriangle' }, annotations: [\r\n            { content: 'Right Triangle' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Basic', shape: 'Parallelogram' }, annotations: [\r\n            { content: 'Parallelogram' }\r\n        ]\r\n    },\r\n];\r\nvar flowShapeModel = [\r\n    {\r\n        shape: { type: 'Text', content: 'Flow Shapes' }, constraints: ej.diagrams.NodeConstraints.PointerEvents,\r\n        style: { fontSize: 16, fill: 'None', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 },\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'Terminator' }, annotations: [\r\n            { content: 'Terminator' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'Process' }, annotations: [\r\n            { content: 'Process' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'Decision' }, annotations: [\r\n            { content: 'Decision' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'Document' }, annotations: [\r\n            { content: 'Document' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'PreDefinedProcess' }, annotations: [\r\n            { content: 'Predefined Process' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'PaperTap' }, annotations: [\r\n            { content: 'Paper Tape' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'DirectData' }, annotations: [\r\n            { content: 'Direct Data' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'SequentialData' }, annotations: [\r\n            { content: 'Direct Data' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'Sort' }, annotations: [\r\n            { content: 'Sort' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'MultiDocument' }, annotations: [\r\n            { content: 'Multi-Document' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'Collate' }, annotations: [\r\n            { content: 'Collate' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'SummingJunction' }, annotations: [\r\n            { content: 'Summing Junction' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'Or' }, annotations: [\r\n            { content: 'Or' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'InternalStorage' }, annotations: [\r\n            { content: 'Internal Storage' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'Extract' }, annotations: [\r\n            { content: 'Extract' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'ManualOperation' }, annotations: [\r\n            { content: 'Manual Operation' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'Merge' }, annotations: [\r\n            { content: 'Merge' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'OffPageReference' }, annotations: [\r\n            { content: 'Off-Page Reference' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'SequentialAccessStorage' }, annotations: [\r\n            { content: 'Sequential Access Storage' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'Data' }, annotations: [\r\n            { content: 'Data' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Flow', shape: 'Card' }, annotations: [\r\n            { content: 'Card' }\r\n        ]\r\n    },\r\n];\r\n\r\nvar bpmnShapeModel = [\r\n    {\r\n        shape: { type: 'Text', content: 'BPMN Shapes' }, constraints: ej.diagrams.NodeConstraints.PointerEvents,\r\n        style: { fontSize: 16, fill: 'none', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 },\r\n    },\r\n    {\r\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'None' } },\r\n        annotations: [\r\n            { content: 'Start Event' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Intermediate', trigger: 'None' } },\r\n        annotations: [\r\n            { content: 'Intermediate Event' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'None' } },\r\n        annotations: [\r\n            { content: 'End Event' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Bpmn', shape: 'Gateway' },\r\n        annotations: [\r\n            { content: 'Gateway' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } },\r\n        annotations: [\r\n            { content: 'Task' }\r\n        ]\r\n    },\r\n    {\r\n        shape: {\r\n            type: 'Bpmn', shape: 'Activity', activity: {\r\n                activity: 'SubProcess',\r\n                subProcess: {\r\n                    type: 'Transaction', transaction: {\r\n                        success: { visible: false }, failure: { visible: false }, cancel: { visible: false }\r\n                    }\r\n                }\r\n            },\r\n        },\r\n        annotations: [\r\n            { content: 'Transaction' }\r\n        ]\r\n    },\r\n    {\r\n        shape: { type: 'Bpmn', shape: 'Message' }, annotations: [{ content: 'Message' }]\r\n    },\r\n    {\r\n        shape: { type: 'Bpmn', shape: 'DataObject' }, annotations: [{ content: 'Data Object' }]\r\n    },\r\n    {\r\n        shape: { type: 'Bpmn', shape: 'DataSource' }, annotations: [{ content: 'Data Source' }]\r\n    },\r\n    {\r\n        shape: { type: 'Bpmn', shape: 'Group' }, annotations: [{ content: 'Group' }]\r\n    },\r\n    {\r\n        shape: { type: 'Bpmn', shape: 'TextAnnotation' }, annotations: [{ content: 'Text Annotation' }]\r\n    }\r\n];\r\n/**\r\n * Sample for Shape gallery.\r\n */\r\nvar shape = [\r\n    { shapeName: 'Basic Shapes', shapeId: 'Basic' },\r\n    { shapeName: 'Flow Shapes', shapeId: 'Flow' },\r\n    { shapeName: 'BPMN Shapes', shapeId: 'Bpmn' },\r\n];\r\n//create and return the Nodes collection.\r\nfunction getNodes() {\r\n    var nodes1 = basicShapeModel;\r\n    nodes1 = nodes1.concat(flowShapeModel).concat(bpmnShapeModel);\r\n    var offsetx = 60;\r\n    var offsety = 50;\r\n    var count = 1;\r\n    for (var i = 0; i < nodes1.length; i++) {\r\n        var node = nodes1[i];\r\n        node.width = 40;\r\n        node.height = 40;\r\n        if (node.shape.type === 'Flow') {\r\n            var shapeType = node.shape.shape;\r\n            if (shapeType === 'Process' || shapeType === 'Terminator') {\r\n                node.height = 20;\r\n            } else if (shapeType === 'Decision') {\r\n                node.height = 35;\r\n            } else if (shapeType === 'Document' || shapeType === 'DirectData' ||\r\n                shapeType === 'MultiDocument' || shapeType === 'PreDefinedProcess') {\r\n                node.height = 30;\r\n            }\r\n        }\r\n        node.offsetX = offsetx;\r\n        node.offsetY = offsety;\r\n        if (node.shape.type !== \"Text\") {\r\n            node.annotations[0].verticalAlignment = 'Top';\r\n            node.annotations[0].offset = { y: 1 };\r\n            node.annotations[0].margin = { top: 10 };\r\n\r\n            offsetx = offsetx + 90;\r\n            if (count % 10 === 0) {\r\n                offsety = offsety + 100;\r\n                offsetx = 60;\r\n            }\r\n            count++;\r\n        }\r\n        if (node.shape.type === 'Text') {\r\n            offsetx = 60;\r\n            offsety = offsety + 50;\r\n            count = 1;\r\n            node.width = 150;\r\n            node.height = 100;\r\n            node.offsetX = 90;\r\n            if (node.shape.content !== 'Basic Shapes') {\r\n                node.offsetX = 90;\r\n                node.offsetY = offsety + 50;\r\n                offsety = offsety + 100;\r\n            }\r\n        }\r\n    }\r\n    return nodes1;\r\n}\r\n\r\n    var objects = getNodes();\r\n    //Initialize diagram control\r\n    var diagram = new ej.diagrams.Diagram({\r\n        width: '100%', height: '499px', snapSettings: { constraints: ej.diagrams.SnapConstraints.None },\r\n        nodes: objects,\r\n        //Defines the default node and connector properties\r\n        getNodeDefaults: function (obj, diagram) {\r\n            return obj;\r\n        },\r\n    });\r\n    diagram.appendTo('#diagram');\r\n    diagram.fitToPage({ mode: 'Width' });\r\n\r\n"}