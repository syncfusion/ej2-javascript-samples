{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/development/demos/diagram/crud/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n        <style>\n                @font-face {\n                    font-family: 'e-ddb-icons';\n                    src:url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');\n                    font-weight: normal;\n                    font-style: normal;\n                }\n            \n                .e-ddb-icons {\n                    font-family: 'e-ddb-icons';\n                    speak: none;\n                    font-size: 55px;\n                    font-style: normal;\n                    font-weight: normal;\n                    font-variant: normal;\n                    text-transform: none;\n                    line-height: 1;\n                    -webkit-font-smoothing: antialiased;\n                    -moz-osx-font-smoothing: grayscale;\n                }\n            \n                .e-add::before {\n                    content: \"\\e705\";\n                }\n            \n                .e-update::before {\n                    content: \"\\e703\";\n                }\n            \n                .e-delete::before {\n                    content: \"\\e701\";\n                }\n            \n                .material .e-add::before {\n                    content: \"\\e704\";\n                }\n            \n                .material .e-update::before {\n                    content: \"\\e702\";\n                }\n            \n                .material .e-delete::before {\n                    content: \"\\e707\";\n                }\n            \n                .bootstrap .e-add::before {\n                    content: \"\\e706\";\n                }\n            \n                .bootstrap .e-update::before {\n                    content: \"\\e708\";\n                }\n            \n                .bootstrap .e-delete::before {\n                    content: \"\\e700\";\n                }\n            \n                .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-btn.e-tbtn-txt .e-icons.e-btn-icon {\n                    padding: 3px;\n                }\n                .showDropdown {\n                    display: none;\n                }\n            </style>\n    <div style=\"width: 100%;height: 10%\">\n        <div id=\"toolbar\" style=\"width:100%;height: 10%;margin-top: 10px;\">\n        </div>\n    </div>\n    <div style=\"width: 100%;height: 80%;border-width: 0 1px 1px 1px; border-style: solid; border-color:#D7D7D7\">\n        <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n            <div id=\"diagram\"></div>\n        </div>\n    </div>\n</div>\n<div id=\"editDialog\">\n    <div class=\"showLabel\">\n        <input id=\"Description\">\n    </div>\n    <div class=\"showLabel\" style=\"padding-top: 14px\">\n        <input id=\"Color\">\n    </div>\n    <div class=\"showDropdown\">\n        <input type=\"text\" id=\"SourceId\">\n    </div>\n    <div class=\"showDropdown\" style=\"padding-top: 14px\">\n        <input type=\"text\" id=\"TargetId\">\n    </div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}/**\r\n * CRUD sample\r\n */\r\nej.diagrams.Diagram.Inject(\r\n  ej.diagrams.DataBinding,\r\n  ej.diagrams.HierarchicalTree\r\n);\r\nvar diagram;\r\nvar dialog;\r\nvar toolbarObj;\r\nvar sourceDropdown;\r\nvar targetDropdown;\r\nvar sourceID;\r\nvar targetID;\r\nvar nodeData = [];\r\n\r\n//Disable or Enable the toolbar items based on element selection.\r\nfunction selectionChange(args) {\r\n  if (args.state === \"Changing\") {\r\n    if (args.newValue.length > 0) {\r\n      if (args.newValue[0] instanceof ej.diagrams.Node) {\r\n        enableToolbarItems(true);\r\n      } else {\r\n        toolbarObj.enableItems( document.getElementById(items[0].id).parentElement, false );\r\n        toolbarObj.enableItems( document.getElementById(items[2].id).parentElement, true );\r\n        toolbarObj.enableItems( document.getElementById(items[4].id).parentElement, false );\r\n      }\r\n    } else {\r\n      enableToolbarItems(false);\r\n    }\r\n  }\r\n}\r\n\r\nfunction connectionChange(args) {\r\n  if (args.state === \"Completed\") {\r\n    if (!args.connector.targetID || !args.connector.sourceID) {\r\n      args.cancel = true;\r\n    }\r\n  }\r\n}\r\n\r\n//Set an label for each node.\r\nfunction setNodeTemplate(obj) {\r\n  obj.annotations = [{ style: { color: \"black\" } }];\r\n  obj.annotations[0].content = obj.Description;\r\n  obj.style = { fill: obj.Color };\r\n  if (obj.Id === 1) {\r\n    //Restrict Delete Constraints for root node.\r\n    obj.constraints = ej.diagrams.NodeConstraints.Default & ~ej.diagrams.NodeConstraints.Delete;\r\n  }\r\n}\r\n\r\n//Returns an node text collection in diagram.\r\nfunction getDataSource() {\r\n  var i;\r\n  nodeData = [];\r\n  for (i = 0; i < diagram.nodes.length; i++) {\r\n    var node = diagram.nodes[i];\r\n    var element = { Name: node.id, Label: node.Description };\r\n    nodeData.push(element);\r\n  }\r\n  return nodeData;\r\n}\r\n\r\n\r\n//Add icons in Toolbar.\r\nvar items = [\r\n  {\r\n    text: \"Add\",\r\n    tooltipText: \"Add\",\r\n    prefixIcon: \"e-ddb-icons e-add\",\r\n    id: \"Add\"\r\n  },\r\n  {\r\n    type: \"Separator\"\r\n  },\r\n  {\r\n    text: \"Edit\",\r\n    tooltipText: \"Edit\",\r\n    prefixIcon: \"e-ddb-icons e-update\",\r\n    id: \"Edit\"\r\n  },\r\n  {\r\n    type: \"Separator\"\r\n  },\r\n  {\r\n    text: \"Delete\",\r\n    tooltipText: \"Delete\",\r\n    prefixIcon: \"e-ddb-icons e-delete\",\r\n    id: \"Delete\"\r\n  }\r\n];\r\n\r\n\r\n  diagram = new ej.diagrams.Diagram({\r\n    width: \"100%\",\r\n    height: 600,\r\n    dataSourceSettings: {\r\n      id: 'Name',\r\n      //Define URL to perform CRUD operations with nodes records in database.\r\n      crudAction: {\r\n        read: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/GetNodes',\r\n        create: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/AddNodes',\r\n        update: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/UpdateNodes',\r\n        destroy: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/DeleteNodes',\r\n        customFields: ['Id', 'Description', 'Color'],\r\n      },\r\n      connectionDataSource: {\r\n        id: 'Name',\r\n        sourceID: 'SourceNode',\r\n        targetID: 'TargetNode',\r\n        //Define URL to perform CRUD operations with connector records in database.\r\n        crudAction: {\r\n          read: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/GetConnectors',\r\n          create: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/AddConnectors',\r\n          update: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/UpdateConnectors',\r\n          destroy: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/DeleteConnectors',\r\n          customFields: ['Id'],\r\n        }\r\n      }\r\n    },\r\n    layout: { type: \"HierarchicalTree\", verticalSpacing: 40 },\r\n    snapSettings: { constraints: 0 },\r\n    //Set node default properties.\r\n    getNodeDefaults: function (obj, diagram) {\r\n      obj.width = 100;\r\n      obj.height = 50;\r\n      obj.shape = { type: 'Basic', shape: 'Rectangle' };\r\n      obj.style = { strokeWidth: 1, strokeColor: '#DDDDDD' };\r\n      return obj;\r\n    },\r\n    //Set connector default properties.\r\n    getConnectorDefaults: function (connector, diagram) {\r\n      connector.type = 'Orthogonal';\r\n      connector.style.fill = '#707070';\r\n      connector.style.strokeColor = '#707070';\r\n      connector.targetDecorator = {\r\n        style: {\r\n          strokeColor: '#707070',\r\n          fill: '#707070'\r\n        },\r\n      };\r\n      return connector;\r\n    },\r\n    selectionChange: selectionChange,\r\n    sourcePointChange: connectionChange,\r\n    targetPointChange: connectionChange,\r\n    setNodeTemplate: setNodeTemplate\r\n  });\r\n  diagram.appendTo(\"#diagram\");\r\n\r\n  //Initialize ToolBar control.\r\n  toolbarObj = new ej.navigations.Toolbar({\r\n    clicked: toolbarClick,\r\n    items: items\r\n  });\r\n  toolbarObj.appendTo(\"#toolbar\");\r\n  enableToolbarItems(false);\r\n\r\n  //Initialize dialog control.\r\n  dialog = new ej.popups.Dialog({\r\n    width: \"300px\",\r\n    visible: false,\r\n    isModal: true,\r\n    showCloseIcon: true,\r\n    buttons: [\r\n      {\r\n        click: dlgButtonClick,\r\n        buttonModel: { content: \"Update\", isPrimary: true }\r\n      }\r\n    ]\r\n  });\r\n  dialog.appendTo(\"#editDialog\");\r\n\r\n  //Initialize textbox control.\r\n  var inputobj1 = new ej.inputs.TextBox({\r\n    floatLabelType: \"Always\",\r\n    placeholder: \"Description\"\r\n  });\r\n  inputobj1.appendTo(\"#Description\");\r\n\r\n  //Initialize textbox control.\r\n  var inputobj2 = new ej.inputs.TextBox({\r\n    floatLabelType: \"Always\",\r\n    placeholder: \"Color\"\r\n  });\r\n  inputobj2.appendTo(\"#Color\");\r\n\r\n  //Initialize button control to update the node label and node color.\r\n  var button = new ej.buttons.Button();\r\n  button.appendTo(\"#btnUpdate\");\r\n\r\n  //Initialize dropdownlist control to display an sourceNodes in diagram.\r\n  sourceDropdown = new ej.dropdowns.DropDownList({\r\n    fields: { text: \"Label\", value: \"Name\" },\r\n    change: sourceDropdownChange,\r\n    created: sourceDropdownCreate\r\n  });\r\n  sourceDropdown.appendTo(\"#SourceId\");\r\n\r\n  //Initialize dropdownlist control to display an targetNodes in diagram.\r\n  targetDropdown = new ej.dropdowns.DropDownList({\r\n    fields: { text: \"Label\", value: \"Name\" },\r\n    change: targetDropdownChange,\r\n    created: targetDropdownCreate\r\n  });\r\n  targetDropdown.appendTo(\"#TargetId\");\r\n\r\n\r\n"}