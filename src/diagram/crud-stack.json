{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/production/demos/diagram/crud/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"http://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"http://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n        <style>\n                @font-face {\n                    font-family: 'e-ddb-icons';\n                    src:url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj0gSR8AAAEoAAAAVmNtYXDnKOeBAAABqAAAAEZnbHlmP/EWVwAAAggAAAMMaGVhZBMKQgEAAADQAAAANmhoZWEHnwNtAAAArAAAACRobXR4JygAAAAAAYAAAAAobG9jYQTSBCQAAAHwAAAAFm1heHABGgA+AAABCAAAACBuYW1lmAO1gQAABRQAAALNcG9zdHwLfoAAAAfkAAAAewABAAADUv9qAFoEAAAA//gD8AABAAAAAAAAAAAAAAAAAAAACgABAAAAAQAAJYsEL18PPPUACwPoAAAAANf9/pYAAAAA1/3+lgAAAAAD8APwAAAACAACAAAAAAAAAAEAAAAKADIABgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQPqAZAABQAAAnoCvAAAAIwCegK8AAAB4AAxAQIAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnCANS/2oAWgPwAJYAAAABAAAAAAAABAAAAAPoAAAD6AAAA+gAAAPoAAAD6AAAA+gAAAPoAAAD6AAAA+gAAAAAAAIAAAADAAAAFAADAAEAAAAUAAQAMgAAAAQABAABAADnCP//AADnAP//AAAAAQAEAAAAAQACAAMABAAFAAYABwAIAAkAAAAAAAAAQgCQAK4A/gEWAS4BRgFoAYYAAAAFAAAAAANyA/AAAwAHAAsADwAlAAABESMRIxEjESMRIxEBFyE3BxEeARchPgE3ETM1IycuASMhIgYPAQJ2P18+Xz8BRBX+yBXzAUc2Afg2RwE/2xsHIBX+8hUgB/YClv5GAbr+RgG6/kYBugEbPz9+/Us2RwEBRzYCtT9TFBcXFJIAAAAGAAAAAAMzA/AAAwAHAAsAFQAZADEAACUzESMDMxEjAzMRIyURFAYjISImNRElFSM1JxUjFTMRHgEXIT4BNxEzNSM1NCYrASIGAfg/P34/P34/PwG5Eg3+CA4SAXq9P/w/ATUpAfgoNQE//BIN/A4SvQH4/ggB+P4IAfh+/SsNEhINAtV+Pz8fXj/9Kyg1AQE1KALVP14OEhIAAAACAAAAAAPvA/AABAAOAAA1FTMBJzcHFzc2NC8BJiLeAlLer3TedBERixAy3t4CUt6vdN50ETIQixEAAAAEAAAAAAPwA/AABwANAB4ALAAANx4CFwc3FgkBLgEnATceAhUUDgEPASc3PgIzMicGBwEDJQE+ATQuAiKqFCAWBaIoFwKv/ewRSzUCFb0THBAKEgsYkBcLGBwTFVQeGP14TgE4AogXGRotPELoCx8oFyihBAHB/es1SxECFGQIHCUVExwYCxeQGAsSCjMNF/14/shOAogYPUI8LRoAAAAAAQAAAAAD8APwAAsAAAEhFSERMxEhNSERIwG5/kcBuX4Buf5HfgI3fv5HAbl+AbkAAQAAAAADsQPwAAsAAAEhFSERMxEhNSERIwG5/kcBuT8Buf5HPwI3P/5HAbk/AbkAAQAAAAADcgPwAAsAAAEhFSERMxEhNSERIwFa/qYBWr4BWv6mvgKWvv6mAVq+AVoAAgAAAAADcgPwAAkAEQAANx4BFyE+ATcRITcjFSE1IychPwFINQH4NUgB/Qyd3ANy3ED+xn41SAEBSDUCdr1+fj8AAAACAAAAAAPwA/AABAAOAAA1FTMBJzcHFzc2NC8BJiL+AlD+ilL+URkZhhhH/v4CUP6JUf5SGEcYhhkAAAAAABIA3gABAAAAAAAAAAEAAAABAAAAAAABABUAAQABAAAAAAACAAcAFgABAAAAAAADABUAHQABAAAAAAAEABUAMgABAAAAAAAFAAsARwABAAAAAAAGABUAUgABAAAAAAAKACwAZwABAAAAAAALABIAkwADAAEECQAAAAIApQADAAEECQABACoApwADAAEECQACAA4A0QADAAEECQADACoA3wADAAEECQAEACoBCQADAAEECQAFABYBMwADAAEECQAGACoBSQADAAEECQAKAFgBcwADAAEECQALACQByyBEaWFncmFtIGJ1aWxkZXIgaWNvbnNSZWd1bGFyRGlhZ3JhbSBidWlsZGVyIGljb25zRGlhZ3JhbSBidWlsZGVyIGljb25zVmVyc2lvbiAxLjBEaWFncmFtIGJ1aWxkZXIgaWNvbnNGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AIABiAHUAaQBsAGQAZQByACAAaQBjAG8AbgBzAFIAZQBnAHUAbABhAHIARABpAGEAZwByAGEAbQAgAGIAdQBpAGwAZABlAHIAIABpAGMAbwBuAHMARABpAGEAZwByAGEAbQAgAGIAdQBpAGwAZABlAHIAIABpAGMAbwBuAHMAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AIABiAHUAaQBsAGQAZQByACAAaQBjAG8AbgBzAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAHUAcwBpAG4AZwAgAFMAeQBuAGMAZgB1AHMAaQBvAG4AIABNAGUAdAByAG8AIABTAHQAdQBkAGkAbwB3AHcAdwAuAHMAeQBuAGMAZgB1AHMAaQBvAG4ALgBjAG8AbQAAAAACAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoBAgEDAQQBBQEGAQcBCAEJAQoBCwAIQl9kZWxldGUIRl9kZWxldGUGTV9FZGl0BkZfRWRpdAVNX0FkZAVGX0FkZAVCX0FkZAhNX2RlbGV0ZQZCX0VkaXQAAAA=) format('truetype');\n                    font-weight: normal;\n                    font-style: normal;\n                }\n            \n                .e-ddb-icons {\n                    font-family: 'e-ddb-icons';\n                    speak: none;\n                    font-size: 55px;\n                    font-style: normal;\n                    font-weight: normal;\n                    font-variant: normal;\n                    text-transform: none;\n                    line-height: 1;\n                    -webkit-font-smoothing: antialiased;\n                    -moz-osx-font-smoothing: grayscale;\n                }\n            \n                .e-add::before {\n                    content: \"\\e705\";\n                }\n            \n                .e-update::before {\n                    content: \"\\e703\";\n                }\n            \n                .e-delete::before {\n                    content: \"\\e701\";\n                }\n            \n                .material .e-add::before {\n                    content: \"\\e704\";\n                }\n            \n                .material .e-update::before {\n                    content: \"\\e702\";\n                }\n            \n                .material .e-delete::before {\n                    content: \"\\e707\";\n                }\n            \n                .bootstrap .e-add::before {\n                    content: \"\\e706\";\n                }\n            \n                .bootstrap .e-update::before {\n                    content: \"\\e708\";\n                }\n            \n                .bootstrap .e-delete::before {\n                    content: \"\\e700\";\n                }\n            \n                .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-btn.e-tbtn-txt .e-icons.e-btn-icon {\n                    padding: 3px;\n                }\n                .showDropdown {\n                    display: none;\n                }\n            </style>\n    <div style=\"width: 100%;height: 10%\">\n        <div id=\"toolbar\" style=\"width:100%;height: 10%;margin-top: 10px;\">\n        </div>\n    </div>\n    <div style=\"width: 100%;height: 80%;border-width: 0 1px 1px 1px; border-style: solid; border-color:#D7D7D7\">\n        <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n            <div id=\"diagram\"></div>\n        </div>\n    </div>\n</div>\n<div id=\"editDialog\">\n    <div class=\"showLabel\">\n        <input id=\"Description\">\n    </div>\n    <div class=\"showLabel\" style=\"padding-top: 14px\">\n        <input id=\"Color\">\n    </div>\n    <div class=\"showDropdown\">\n        <input type=\"text\" id=\"SourceId\">\n    </div>\n    <div class=\"showDropdown\" style=\"padding-top: 14px\">\n        <input type=\"text\" id=\"TargetId\">\n    </div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}/**\n * CRUD sample\n */\nej.diagrams.Diagram.Inject(\n  ej.diagrams.DataBinding,\n  ej.diagrams.HierarchicalTree\n);\nvar diagram;\nvar dialog;\nvar toolbarObj;\nvar sourceDropdown;\nvar targetDropdown;\nvar sourceID;\nvar targetID;\nvar nodeData = [];\n\n//Disable or Enable the toolbar items based on element selection.\nfunction selectionChange(args) {\n  if (args.state === \"Changing\") {\n    if (args.newValue.length > 0) {\n      if (args.newValue[0] instanceof ej.diagrams.Node) {\n        enableToolbarItems(true);\n      } else {\n        toolbarObj.enableItems( document.getElementById(items[0].id).parentElement, false );\n        toolbarObj.enableItems( document.getElementById(items[2].id).parentElement, true );\n        toolbarObj.enableItems( document.getElementById(items[4].id).parentElement, false );\n      }\n    } else {\n      enableToolbarItems(false);\n    }\n  }\n}\n\nfunction connectionChange(args) {\n  if (args.state === \"Completed\") {\n    if (!args.connector.targetID || !args.connector.sourceID) {\n      args.cancel = true;\n    }\n  }\n}\n\n//Set an label for each node.\nfunction setNodeTemplate(obj) {\n  obj.annotations = [{ style: { color: \"black\" } }];\n  obj.annotations[0].content = obj.Description;\n  obj.style = { fill: obj.Color };\n  if (obj.Id === 1) {\n    //Restrict Delete Constraints for root node.\n    obj.constraints = ej.diagrams.NodeConstraints.Default & ~ej.diagrams.NodeConstraints.Delete;\n  }\n}\n\n//Returns an node text collection in diagram.\nfunction getDataSource() {\n  var i;\n  nodeData = [];\n  for (i = 0; i < diagram.nodes.length; i++) {\n    var node = diagram.nodes[i];\n    var element = { Name: node.id, Label: node.Description };\n    nodeData.push(element);\n  }\n  return nodeData;\n}\n\n\n//Add icons in Toolbar.\nvar items = [\n  {\n    text: \"Add\",\n    tooltipText: \"Add\",\n    prefixIcon: \"e-ddb-icons e-add\",\n    id: \"Add\"\n  },\n  {\n    type: \"Separator\"\n  },\n  {\n    text: \"Edit\",\n    tooltipText: \"Edit\",\n    prefixIcon: \"e-ddb-icons e-update\",\n    id: \"Edit\"\n  },\n  {\n    type: \"Separator\"\n  },\n  {\n    text: \"Delete\",\n    tooltipText: \"Delete\",\n    prefixIcon: \"e-ddb-icons e-delete\",\n    id: \"Delete\"\n  }\n];\n\n\n  diagram = new ej.diagrams.Diagram({\n    width: \"100%\",\n    height: 600,\n    dataSourceSettings: {\n      id: 'Name',\n      //Define URL to perform CRUD operations with nodes records in database.\n      crudAction: {\n        read: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/GetNodes',\n        create: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/AddNodes',\n        update: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/UpdateNodes',\n        destroy: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/DeleteNodes',\n        customFields: ['Id', 'Description', 'Color'],\n      },\n      connectionDataSource: {\n        id: 'Name',\n        sourceID: 'SourceNode',\n        targetID: 'TargetNode',\n        //Define URL to perform CRUD operations with connector records in database.\n        crudAction: {\n          read: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/GetConnectors',\n          create: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/AddConnectors',\n          update: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/UpdateConnectors',\n          destroy: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/DeleteConnectors',\n          customFields: ['Id'],\n        }\n      }\n    },\n    layout: { type: \"HierarchicalTree\", verticalSpacing: 40 },\n    snapSettings: { constraints: 0 },\n    //Set node default properties.\n    getNodeDefaults: function (obj, diagram) {\n      obj.width = 100;\n      obj.height = 50;\n      obj.shape = { type: 'Basic', shape: 'Rectangle' };\n      obj.style = { strokeWidth: 1, strokeColor: '#DDDDDD' };\n      return obj;\n    },\n    //Set connector default properties.\n    getConnectorDefaults: function (connector, diagram) {\n      connector.type = 'Orthogonal';\n      connector.style.fill = '#707070';\n      connector.style.strokeColor = '#707070';\n      connector.targetDecorator = {\n        style: {\n          strokeColor: '#707070',\n          fill: '#707070'\n        },\n      };\n      return connector;\n    },\n    selectionChange: selectionChange,\n    sourcePointChange: connectionChange,\n    targetPointChange: connectionChange,\n    setNodeTemplate: setNodeTemplate\n  });\n  diagram.appendTo(\"#diagram\");\n\n  //Initialize ToolBar control.\n  toolbarObj = new ej.navigations.Toolbar({\n    clicked: toolbarClick,\n    items: items\n  });\n  toolbarObj.appendTo(\"#toolbar\");\n  enableToolbarItems(false);\n\n  //Initialize dialog control.\n  dialog = new ej.popups.Dialog({\n    width: \"300px\",\n    visible: false,\n    isModal: true,\n    showCloseIcon: true,\n    buttons: [\n      {\n        click: dlgButtonClick,\n        buttonModel: { content: \"Update\", isPrimary: true }\n      }\n    ]\n  });\n  dialog.appendTo(\"#editDialog\");\n\n  //Initialize textbox control.\n  var inputobj1 = new ej.inputs.TextBox({\n    floatLabelType: \"Always\",\n    placeholder: \"Description\"\n  });\n  inputobj1.appendTo(\"#Description\");\n\n  //Initialize textbox control.\n  var inputobj2 = new ej.inputs.TextBox({\n    floatLabelType: \"Always\",\n    placeholder: \"Color\"\n  });\n  inputobj2.appendTo(\"#Color\");\n\n  //Initialize button control to update the node label and node color.\n  var button = new ej.buttons.Button();\n  button.appendTo(\"#btnUpdate\");\n\n  //Initialize dropdownlist control to display an sourceNodes in diagram.\n  sourceDropdown = new ej.dropdowns.DropDownList({\n    fields: { text: \"Label\", value: \"Name\" },\n    change: sourceDropdownChange,\n    created: sourceDropdownCreate\n  });\n  sourceDropdown.appendTo(\"#SourceId\");\n\n  //Initialize dropdownlist control to display an targetNodes in diagram.\n  targetDropdown = new ej.dropdowns.DropDownList({\n    fields: { text: \"Label\", value: \"Name\" },\n    change: targetDropdownChange,\n    created: targetDropdownCreate\n  });\n  targetDropdown.appendTo(\"#TargetId\");\n\n\n"}