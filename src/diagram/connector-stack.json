{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/development/demos/diagram/connector/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-9 control-section\">\n        <style>\n                .image-pattern-style {\n                    background-color: white;\n                    background-size: contain;\n                    background-repeat: no-repeat;\n                    height: 45px;\n                    width: calc((100% - 13px) / 3);\n                    cursor: pointer;\n                    border: 1px solid #D5D5D5;\n                    background-position: center;\n                    float: left;\n                }\n            \n                .image-pattern-style:hover {\n                    border-color: gray;\n                    border-width: 2px;\n                }\n            \n                .row {\n                    margin-left: 0px;\n                    margin-right: 0px;\n                }\n            \n                .row-header {\n                    font-size: 13px;\n                    font-weight: 500;\n                }\n            \n                .e-checkbox-wrapper .e-label {\n                    font-size: 12px;\n                }\n            \n                .col-xs-6 {\n                    padding-left: 0px;\n                    padding-right: 0px;\n                }\n            \n                .e-selected-style {\n                    border-color: #006CE6;\n                    border-width: 2px;\n                }\n            </style>\n    <div class=\"content-wrapper\" style=\"width:100%;background: white\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div class=\"col-lg-3 property-section\">\n    <div class=\"property-panel-header\">\n        Properties\n    </div>\n    <div class=\"row property-panel-content\" id=\"appearance\">\n        <div class=\"row row-header\">\n            Appearance\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"straightConnector\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_1.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"orthogonalConnector\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_2.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"bezierConnector\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_3.png); margin-left: 3px\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"straightConnectorWithStroke\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_4.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"orthogonalConnectorWithStroke\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_5.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"bezierConnectorWithStroke\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_6.png); margin-left: 3px\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"straightConnectorWithDasharray\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_7.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"orthogonalConnectorWithDasharray\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_8.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"bezierConnectorWithDasharray\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_9.png); margin-left: 3px\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"cornerRadious\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_10.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"sourceDecorator\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_11.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"sourceDecoratorWithDasharray\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_12.png); margin-left: 3px\">\n            </div>\n        </div>\n    </div>\n    <div class=\"row property-panel-content\" style=\"padding-top: 10px\">\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <input type=\"checkbox\" id=\"checked\" unchecked=\"false\">\n        </div>\n    </div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}/**\r\n * Connector sample\r\n */\r\nej.diagrams.Diagram.Inject(ej.diagrams.DataBinding, ej.diagrams.HierarchicalTree,\r\n    ej.diagrams.ConnectorBridging);\r\nvar diagram;\r\n\r\n\r\n//creation of the TextElement.\r\nfunction getTextElement(text) {\r\n    var textElement = new ej.diagrams.TextElement();\r\n    textElement.id = ej.diagrams.randomId(); \r\n    textElement.width = 80;\r\n    textElement.height = 35;\r\n    textElement.content = text;\r\n    textElement.style.fill = '#6f409f';\r\n    textElement.style.color = 'white';\r\n    textElement.style.strokeColor = '#6f409f';\r\n    textElement.cornerRadius = 5;\r\n    textElement.margin = { top: 10, bottom: 10, left: 10, right: 10 };\r\n    textElement.relativeMode = 'Object';\r\n    return textElement;\r\n}\r\n\r\n//creation of Port for Node.\r\nfunction getPorts(obj) {\r\n    if (obj.id === 'node2') {\r\n        var node2Ports = [\r\n            { id: 'port1', offset: { x: 1, y: 0.25 }, visibility: ej.diagrams.PortVisibility.Hidden },\r\n            { id: 'port2', offset: { x: 1, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },\r\n            { id: 'port3', offset: { x: 1, y: 0.75 }, visibility: ej.diagrams.PortVisibility.Hidden }\r\n        ];\r\n        return node2Ports;\r\n    }\r\n    else if (obj.id === 'node6') {\r\n        var node6Ports = [\r\n            { id: 'port4', offset: { x: 0, y: 0.46 }, visibility: ej.diagrams.PortVisibility.Hidden },\r\n            { id: 'port5', offset: { x: 0, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },\r\n            { id: 'port6', offset: { x: 0, y: 0.54 }, visibility: ej.diagrams.PortVisibility.Hidden }\r\n        ];\r\n        return node6Ports;\r\n    }\r\n    else {\r\n        var ports = [\r\n            { id: 'portIn', offset: { x: 0, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },\r\n            { id: 'portOut', offset: { x: 1, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden },\r\n        ];\r\n        return ports;\r\n    }\r\n}\r\n\r\n//ConnectorStyle customization\r\nfunction applyConnectorStyle(dashedLine, sourceDec, isRounded, type, target, strokeWidth) {\r\n    for (var i = 0; i < diagram.connectors.length; i++) {\r\n        connector = diagram.connectors[i];\r\n        connector.style.strokeWidth = !strokeWidth ? 2 : strokeWidth;\r\n        connector.type = type;\r\n        connector.cornerRadius = isRounded ? 5 : 0;\r\n        connector.style.strokeDashArray = dashedLine ? '5,5' : '';\r\n        if (sourceDec) {\r\n            diagram.connectors[i].sourceDecorator = {\r\n                style: {\r\n                    strokeColor: '#6f409f',\r\n                    fill: '#6f409f', strokeWidth: 2\r\n                }, shape: 'Circle'\r\n            };\r\n        }\r\n        else {\r\n            diagram.connectors[i].sourceDecorator = { shape: 'None' };\r\n        }\r\n        diagram.connectors[i].targetDecorator = {\r\n            style: {\r\n                strokeColor: '#6f409f',\r\n                fill: '#6f409f', strokeWidth: 2\r\n            }, shape: 'Arrow'\r\n        };\r\n        diagram.dataBind();\r\n    }\r\n\r\n}\r\n// tslint:disable-next-line:max-func-body-length\r\n\r\n    var bounds = document.getElementsByClassName('content-wrapper')[0].getBoundingClientRect();\r\n    var marginLeft = (bounds.width - 560) / 2;\r\n    //Initialize Diagram Nodes\r\n    var nodes = [\r\n        { id: 'node1', annotations: [{ content: 'Promotion' }] },\r\n        { id: 'node2', annotations: [{ content: 'Lead' }] },\r\n        { id: 'node3', annotations: [{ content: 'Account' }] },\r\n        { id: 'node4', annotations: [{ content: 'Information' }] },\r\n        { id: 'node5', annotations: [{ content: 'Opportunity' }] },\r\n        { id: 'node6', offsetX: marginLeft + 530, offsetY: 290, excludeFromLayout: true }\r\n    ];\r\n    //Initialize Diagram connectors\r\n    var connectors = [\r\n        { id: 'connectr', sourceID: 'node1', targetID: 'node2' },\r\n        {\r\n            id: 'connectr1', sourceID: 'node2', sourcePortID: 'port1',\r\n            targetID: 'node3', targetPortID: 'portIn'\r\n        },\r\n        {\r\n            id: 'connectr2', sourceID: 'node2', sourcePortID: 'port2',\r\n            targetID: 'node4', targetPortID: 'portIn'\r\n        },\r\n        {\r\n            id: 'connectr3', sourceID: 'node2', sourcePortID: 'port3',\r\n            targetID: 'node5', targetPortID: 'portIn'\r\n        },\r\n        {\r\n            id: 'connectr4', sourceID: 'node6', sourcePortID: 'port4',\r\n            targetID: 'node3', targetPortID: 'portOut'\r\n        },\r\n        {\r\n            id: 'connectr5', sourceID: 'node6', sourcePortID: 'port5',\r\n            targetID: 'node4', targetPortID: 'portOut'\r\n        },\r\n        {\r\n            id: 'connectr7', sourceID: 'node6', sourcePortID: 'port6',\r\n            targetID: 'node5', targetPortID: 'portOut'\r\n        }\r\n    ];\r\n    //Initializes diagram control\r\n    diagram = new ej.diagrams.Diagram({\r\n        width: '100%', height: 580, nodes: nodes,\r\n        connectors: connectors,\r\n        selectedItems: {\r\n            constraints: (ej.diagrams.SelectorConstraints.ConnectorSourceThumb\r\n                | ej.diagrams.SelectorConstraints.ConnectorTargetThumb)\r\n        },\r\n        //Configrues hierarchical tree layout\r\n        layout: {\r\n            type: 'HierarchicalTree', orientation: 'LeftToRight',\r\n            verticalSpacing: 75, margin: { left: marginLeft, right: 0, top: 0, bottom: 0 }\r\n        },\r\n        snapSettings: { constraints: 0 },\r\n        //set default value for Nodes.\r\n        getNodeDefaults: function (obj) {\r\n            if (obj.id !== 'node1') {\r\n                obj.ports = getPorts(obj);\r\n            }\r\n            if (obj.id !== 'node6') {\r\n                obj.shape = { type: 'Basic', shape: 'Rectangle', cornerRadius: 10 };\r\n                obj.width = 80;\r\n                obj.style.strokeWidth = 2;\r\n                obj.style.strokeColor = '#6F409F';\r\n                obj.height = 35;\r\n            }\r\n        },\r\n        //set default value for Connectors.\r\n        getConnectorDefaults: function (obj) {\r\n            obj.type = 'Bezier';\r\n            obj.style.strokeColor = '#6f409f';\r\n            obj.style.strokeWidth = 2;\r\n            obj.targetDecorator = {\r\n                style: {\r\n                    strokeColor: '#6f409f',\r\n                    fill: '#6f409f',\r\n                }\r\n            };\r\n        },\r\n        //Customize the content of the node\r\n        setNodeTemplate: function (obj) {\r\n            if (obj.id === 'node6') {\r\n                var canvas = new ej.diagrams.StackPanel();\r\n                canvas.id = ej.diagrams.randomId();\r\n                canvas.children = [];\r\n                canvas.style.strokeWidth = 0;\r\n                canvas.style.fill = '#e6e0eb';\r\n                canvas.children.push(getTextElement('Events', '#a6a1e0'));\r\n                canvas.children.push(getTextElement('Emails', '#db8ec9'));\r\n                canvas.children.push(getTextElement('Calls', '#db8ec9'));\r\n                canvas.children.push(getTextElement('Smart Contents', '#db8ec9'));\r\n                return canvas;\r\n            }\r\n            return null;\r\n        },\r\n    });\r\n    diagram.appendTo('#diagram');\r\n    //checkbox is used to enable or disable the connector interaction.\r\n    var checkBoxObj = new ej.buttons.CheckBox({\r\n        checked: false, label: 'Lock',\r\n        change: function (args) {\r\n            for (var j = 0; j < diagram.connectors.length; j++) {\r\n                var connector = diagram.connectors[j];\r\n                if (args.checked) {\r\n                    connector.constraints &= ~(ej.diagrams.ConnectorConstraints.DragSourceEnd\r\n                        | ej.diagrams.ConnectorConstraints.DragTargetEnd | ej.diagrams.ConnectorConstraints.DragSegmentThumb);\r\n                    connector.constraints |= ej.diagrams.ConnectorConstraints.ReadOnly;\r\n                }\r\n                else {\r\n                    connector.constraints |= ej.diagrams.ConnectorConstraints.Default & ~(ej.diagrams.ConnectorConstraints.ReadOnly);\r\n                }\r\n                diagram.dataBind();\r\n            }\r\n        }\r\n    });\r\n    checkBoxObj.appendTo('#checked');\r\n\r\n    //Click Event for Appearance of the layout.\r\n    document.getElementById('appearance').onclick = function (args) {\r\n        var target = args.target;\r\n\r\n        if (target.className === 'image-pattern-style') {\r\n            switch (target.id) {\r\n                case 'straightConnector':\r\n                    applyConnectorStyle(false, false, false, 'Straight', target, 1);\r\n                    break;\r\n                case 'orthogonalConnector':\r\n                    applyConnectorStyle(false, false, false, 'Orthogonal', target, 1);\r\n                    break;\r\n                case 'bezierConnector':\r\n                    applyConnectorStyle(false, false, false, 'Bezier', target, 1);\r\n                    break;\r\n                case 'straightConnectorWithStroke':\r\n                    applyConnectorStyle(false, false, false, 'Straight', target);\r\n                    break;\r\n                case 'orthogonalConnectorWithStroke':\r\n                    applyConnectorStyle(false, false, false, 'Orthogonal', target);\r\n                    break;\r\n                case 'bezierConnectorWithStroke':\r\n                    applyConnectorStyle(false, false, false, 'Bezier', target);\r\n                    break;\r\n                case 'straightConnectorWithDasharray':\r\n                    applyConnectorStyle(true, false, false, 'Straight', target);\r\n                    break;\r\n                case 'orthogonalConnectorWithDasharray':\r\n                    applyConnectorStyle(true, false, false, 'Orthogonal', target);\r\n                    break;\r\n                case 'bezierConnectorWithDasharray':\r\n                    applyConnectorStyle(true, false, false, 'Bezier', target);\r\n                    break;\r\n                case 'cornerRadious':\r\n                    applyConnectorStyle(false, false, true, 'Orthogonal', target);\r\n                    break;\r\n                case 'sourceDecorator':\r\n                    applyConnectorStyle(false, true, false, 'Straight', target);\r\n                    break;\r\n                case 'sourceDecoratorWithDasharray':\r\n                    applyConnectorStyle(true, true, false, 'Straight', target);\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n\r\n"}