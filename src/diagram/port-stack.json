{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/development/demos/diagram/port/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-8 control-section\">\n        <style>\n                .sb-child-row {\n                    margin-top: 8px;\n                }\n            \n                .property-section .e-remove-selection {\n                    cursor: not-allowed;\n                }\n            \n                .row-header {\n                    font-size: 13px;\n                    font-weight: 500;\n                    padding-left: 10px\n                }\n            \n                .e-remove-selection .property-section-content {\n                    pointer-events: none;\n                }\n            </style>\n    <div id=\"diagram\"></div>\n</div>\n<div class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-header\">\n        Properties\n    </div>\n    <div class=\"property-panel-content\">\n        <div id=\"propertypanel\" class=\"e-remove-selection\">\n            <div class=\"property-section-content\">\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Visibility\n                        </div>\n                        <div>\n                            <input type=\"text\" id=\"portsVisiblity\">\n                        </div>\n                    </div>\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Shape\n                        </div>\n                        <div>\n                            <input type=\"text\" id=\"shape\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Fill Color\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <input type=\"text\" id=\"fill\">\n                        </div>\n                    </div>\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Stroke Color\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <input type=\"text\" id=\"border\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Stroke Width\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <input type=\"text\" id=\"width\">\n                        </div>\n                    </div>\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Size\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <input type=\"text\" id=\"size\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n</div></body></html>","index.js":"{{ripple}}ej.diagrams.Diagram.Inject(ej.diagrams.UndoRedo);\r\nej.dropdowns.MultiSelect.Inject(ej.dropdowns.CheckBoxSelection);\r\n//get the port for the selected node.\r\nvar diagram;\r\nvar portVisibilityDrop;\r\nvar portFillDrop;\r\nvar portBorderDrop;\r\nvar portShapeDrop;\r\n\r\nvar portWidthNum;\r\nvar portSizeNum;\r\n\r\nfunction getPort() {\r\n    var node = diagram.selectedItems.nodes[0];\r\n    var port = [];\r\n    if (node) {\r\n        port = node.ports;\r\n    }\r\n    return port;\r\n}\r\n//enable or disable the property panel based on the Selection.\r\nfunction selectionChange(args) {\r\n    if (args.state === 'Changed') {\r\n        var appearance = document.getElementById('propertypanel');\r\n        var selectedElement = document.getElementsByClassName('e-remove-selection');\r\n        if (args.newValue) {\r\n\r\n            if (args.newValue[0] instanceof ej.diagrams.Node && selectedElement.length) {\r\n                selectedElement[0].classList.remove('e-remove-selection');\r\n                var port = getPort()[0];\r\n                portVisibilityDrop.value = [];\r\n                if (ej.diagrams.PortVisibility.Visible & port.visibility) {\r\n                    portVisibilityDrop.value.push(ej.diagrams.PortVisibility.Visible);\r\n                }\r\n                if (ej.diagrams.PortVisibility.Hidden & port.visibility) {\r\n                    portVisibilityDrop.value.push(ej.diagrams.PortVisibility.Hidden);\r\n                }\r\n                if (ej.diagrams.PortVisibility.Hover & port.visibility) {\r\n                    portVisibilityDrop.value.push(ej.diagrams.PortVisibility.Hover);\r\n                }\r\n                if (ej.diagrams.PortVisibility.Connect & port.visibility) {\r\n                    portVisibilityDrop.value.push(ej.diagrams.PortVisibility.Connect);\r\n                }\r\n                if (portVisibilityDrop.value.length === 0) {\r\n                    portVisibilityDrop.placeholder = 'Select Visibility';\r\n                }\r\n                portVisibilityDrop.dataBind();\r\n                portFillDrop.value = port.style.fill;\r\n                portFillDrop.dataBind();\r\n                portBorderDrop.value = port.style.strokeColor;\r\n                portBorderDrop.dataBind();\r\n                portShapeDrop.value = port.shape;\r\n                portShapeDrop.dataBind();\r\n                portSizeNum.value = port.height;\r\n                portSizeNum.dataBind();\r\n                portWidthNum.value = port.style.strokeWidth;\r\n                portWidthNum.dataBind();\r\n            }\r\n        }\r\n    }\r\n}\r\n//change the Visibility of the Port.\r\nfunction portVisibilityChange(args) {\r\n    var port = getPort();\r\n    if (port) {\r\n        for (var j = 0; j < port.length; j++) {\r\n            port[j].visibility = 0;\r\n            for (var i = 0; i < args.value.length; i++) {\r\n                port[j].visibility += args.value[i];\r\n            }\r\n        }\r\n    }\r\n    diagram.dataBind();\r\n}\r\n//set the appearence of the Port.\r\nfunction applyPortStyle(value) {\r\n    var port = getPort();\r\n    for (var j = 0; j < port.length; j++) {\r\n        if (value === 'size') {\r\n\r\n            port[j].height = portSizeNum.value;\r\n            port[j].width = portSizeNum.value;\r\n\r\n        } else if (value === 'strokewidth') {\r\n            port[j].style.strokeWidth = portWidthNum.value;\r\n        }\r\n    }\r\n    diagram.dataBind();\r\n}\r\n//change the shape of the Port.\r\nfunction portShapeChange(args) {\r\n    var port = getPort();\r\n    for (var j = 0; j < port.length; j++) {\r\n        switch (portShapeDrop.value) {\r\n            case 'X':\r\n                port[j].shape = 'X';\r\n                break;\r\n            case 'Circle':\r\n                port[j].shape = 'Circle';\r\n                break;\r\n            case 'Square':\r\n                port[j].shape = 'Square';\r\n                break;\r\n            case 'Custom':\r\n                port[j].shape = 'Custom';\r\n                port[j].pathData = 'M6.805,0L13.61,10.703L0,10.703z';\r\n                break;\r\n        }\r\n        diagram.dataBind();\r\n    }\r\n\r\n}\r\n\r\n\r\n    var bounds = document.getElementsByClassName('control-section')[0].getBoundingClientRect();\r\n    var centerX = bounds.width / 2;\r\n    var node1Port = [\r\n        {\r\n            id: 'port1', shape: 'Circle', offset: { x: 0, y: 0.5 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'In - 1'\r\n        },\r\n        {\r\n            id: 'port2', shape: 'Circle', offset: { x: 1, y: 0.5 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'OUT - 1'\r\n        },\r\n        {\r\n            id: 'port3', shape: 'Circle', offset: { x: 0.25, y: 1 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'In - 2'\r\n        },\r\n        {\r\n            id: 'port4', shape: 'Circle', offset: { x: 0.5, y: 1 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'OUT - 2'\r\n        },\r\n        {\r\n            id: 'port5', shape: 'Circle', offset: { x: 0.75, y: 1 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'In - 3'\r\n        }\r\n    ];\r\n    var node2Port = [\r\n        {\r\n            id: 'port6', shape: 'Circle', offset: { x: 0, y: 0.5 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'In - 1'\r\n        },\r\n        {\r\n            id: 'port7', shape: 'Circle', offset: { x: 1, y: 0.35 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'OUT - 1'\r\n        },\r\n        {\r\n            id: 'port8', shape: 'Circle', offset: { x: 1, y: 0.70 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'In - 2'\r\n        },\r\n        {\r\n            id: 'port9', shape: 'Circle', offset: { x: 0.5, y: 1 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'OUT - 2'\r\n        }\r\n    ];\r\n    var node3Port = [\r\n        {\r\n            id: 'port10', shape: 'Circle', offset: { x: 0, y: 0.5 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'Out - 1'\r\n        },\r\n        {\r\n            id: 'port11', shape: 'Circle', offset: { x: 0.5, y: 0 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'In - 1'\r\n        },\r\n        {\r\n            id: 'port12', shape: 'Circle', offset: { x: 0.5, y: 1 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'OUT - 2'\r\n        }\r\n    ];\r\n    var node4Port = [\r\n        {\r\n            id: 'port13', shape: 'Circle', offset: { x: 0, y: 0.5 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'In - 1'\r\n        },\r\n        {\r\n            id: 'port14', shape: 'Circle', offset: { x: 0.5, y: 0 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'In - 2'\r\n        },\r\n        {\r\n            id: 'port15', shape: 'Circle', offset: { x: 0.5, y: 1 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'OUT - 1'\r\n        }\r\n    ];\r\n    var node5Port = [\r\n        {\r\n            id: 'port16', shape: 'Circle', offset: { x: 0, y: 0.5 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'out - 1'\r\n        },\r\n        {\r\n            id: 'port17', shape: 'Circle', offset: { x: 0.5, y: 0 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'In - 1'\r\n        },\r\n        {\r\n            id: 'port18', shape: 'Circle', offset: { x: 1, y: 0.5 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'OUT - 2'\r\n        }\r\n    ];\r\n    var node6Port = [\r\n        {\r\n            id: 'port19', shape: 'Circle', offset: { x: 0, y: 0.35 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'In - 1'\r\n        },\r\n        {\r\n            id: 'port20', shape: 'Circle', offset: { x: 0.5, y: 1 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'Out - 1'\r\n        }\r\n    ];\r\n    var node7Port = [\r\n        {\r\n            id: 'port21', shape: 'Circle', offset: { x: 0.5, y: 0 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'In - 1'\r\n        },\r\n        {\r\n            id: 'port22', shape: 'Circle', offset: { x: 0.5, y: 1 }, height: 8, width: 8, visibility: ej.diagrams.PortVisibility.Visible,\r\n            text: 'Out - 1'\r\n        }\r\n    ];\r\n    var shape1 = { type: 'Basic', shape: 'Rectangle' };\r\n    var shape2 = { type: 'Basic', shape: 'Diamond' };\r\n    var nodes = [\r\n        {\r\n            id: 'node1', offsetX: centerX - 200, offsetY: 100,\r\n            annotations: [{ content: 'Publisher' }], ports: node1Port\r\n        },\r\n        {\r\n            id: 'node2', offsetX: centerX, offsetY: 100,\r\n            annotations: [{ content: 'Completed Book', margin: { left: 5, right: 5 } }], ports: node2Port\r\n        },\r\n        {\r\n            id: 'node3', offsetX: centerX, offsetY: 200,\r\n            annotations: [{ content: '1st Review' }], ports: node3Port\r\n        },\r\n        {\r\n            id: 'node4', offsetX: centerX, offsetY: 300,\r\n            annotations: [{ content: 'Legal Terms' }], ports: node4Port\r\n        },\r\n        {\r\n            id: 'node5', offsetX: centerX, offsetY: 400,\r\n            annotations: [{ content: '2nd Review' }], ports: node5Port\r\n        },\r\n        {\r\n            id: 'node6', offsetX: centerX + 200, offsetY: 100,\r\n            annotations: [{ content: 'Board' }], ports: node6Port\r\n        },\r\n        {\r\n            id: 'node7', offsetX: centerX + 200, offsetY: 200,\r\n            annotations: [{ content: 'Approval' }], ports: node7Port\r\n        }\r\n    ];\r\n    var connectors = [\r\n        {\r\n            id: 'connector1', sourceID: 'node1', sourcePortID: 'port2',\r\n            targetID: 'node2', targetPortID: 'port6'\r\n        },\r\n        {\r\n            id: 'connector2', sourceID: 'node1', sourcePortID: 'port4',\r\n            targetID: 'node4', targetPortID: 'port13'\r\n        },\r\n        {\r\n            id: 'connector3', sourceID: 'node2', sourcePortID: 'port9',\r\n            targetID: 'node3', targetPortID: 'port11'\r\n        },\r\n        {\r\n            id: 'connector4', sourceID: 'node2', sourcePortID: 'port7',\r\n            targetID: 'node6', targetPortID: 'port19'\r\n        },\r\n        {\r\n            id: 'connector5', sourceID: 'node3', sourcePortID: 'port10',\r\n            targetID: 'node1', targetPortID: 'port5'\r\n        },\r\n        {\r\n            id: 'connector6', sourceID: 'node3', sourcePortID: 'port12',\r\n            targetID: 'node4', targetPortID: 'port14'\r\n        },\r\n        {\r\n            id: 'connector7', sourceID: 'node4', sourcePortID: 'port15',\r\n            targetID: 'node5', targetPortID: 'port17'\r\n        },\r\n        {\r\n            id: 'connector8', sourceID: 'node5', sourcePortID: 'port18',\r\n            targetID: 'node2', targetPortID: 'port8'\r\n        },\r\n        {\r\n            id: 'connector9', sourceID: 'node5', sourcePortID: 'port16',\r\n            targetID: 'node1', targetPortID: 'port3'\r\n        },\r\n        {\r\n            id: 'connector10', sourceID: 'node6', sourcePortID: 'port20',\r\n            targetID: 'node7', targetPortID: 'port21'\r\n        },\r\n        {\r\n            id: 'connector11', sourceID: 'node7', sourcePortID: 'port22',\r\n            targetID: 'node1', targetPortID: 'port1'\r\n        }\r\n    ];\r\n    //Initialize diagram control\r\n    diagram = new ej.diagrams.Diagram({\r\n        width: '100%', height: 580,\r\n        nodes: nodes, connectors: connectors, selectionChange: selectionChange,\r\n        snapSettings: { constraints: 0 },\r\n        //Sets the default values of nodes\r\n        getNodeDefaults: function (obj) {\r\n            //Initialize shape\r\n            if (obj.id === 'node1' || obj.id === 'node2' || obj.id === 'node4' || obj.id === 'node6') {\r\n                obj.shape = shape1;\r\n            } else if (obj.id === 'node3' || obj.id === 'node5' || obj.id === 'node7') {\r\n                obj.shape = shape2;\r\n            }\r\n            //sets height and width for nodes\r\n            obj.height = 65;\r\n            obj.width = 100;\r\n            obj.style = { fill: '#ebf8fb', strokeColor: '#baeaf5' };\r\n            for (var i = 0; i < obj.ports.length; i++) {\r\n                //sets styles for the ports\r\n                obj.ports[i].style = {\r\n                    fill: '#366f8c',\r\n                    strokeColor: '#366f8c'\r\n                };\r\n                obj.ports[i].width = 6;\r\n                obj.ports[i].height = 6;\r\n            }\r\n            obj.annotations[0].style = {\r\n                fontSize: 13,\r\n                color: 'black'\r\n            };\r\n        },\r\n        //Sets the default values of connector\r\n        getConnectorDefaults: function (connector) {\r\n            //defines type of the connectors\r\n            connector.type = 'Orthogonal';\r\n            connector.style = { strokeColor: '#8cdcef', strokeWidth: 1 };\r\n            connector.targetDecorator = { width: 5, height: 5, style: { fill: '#8cdcef', strokeColor: '#8cdcef' } };\r\n        },\r\n    });\r\n    diagram.appendTo('#diagram');\r\n    //Visibility collection of the Port.\r\n    var visibility = [\r\n        { PortVisibility: ej.diagrams.PortVisibility.Visible, text: 'Visible' },\r\n        { PortVisibility: ej.diagrams.PortVisibility.Hidden, text: 'Hidden' },\r\n        { PortVisibility: ej.diagrams.PortVisibility.Hover, text: 'Hover' },\r\n        { PortVisibility: ej.diagrams.PortVisibility.Connect, text: 'Connect' }\r\n    ];\r\n    //Enable or disable the visibility of the Port\r\n    portVisibilityDrop = new ej.dropdowns.MultiSelect({\r\n        enabled: true, dataSource: visibility,\r\n        fields: { value: 'PortVisibility', text: 'text' },\r\n        mode: 'CheckBox',\r\n        showSelectAll: true,\r\n        showdropdownsIcon: true,\r\n        popupHeight: '280px',\r\n        popupWidth: '180px',\r\n        change: portVisibilityChange\r\n    });\r\n    portVisibilityDrop.appendTo('#portsVisiblity');\r\n    //Colorpicker used to apply for fill color of the Port.\r\n    portFillDrop = new ej.inputs.ColorPicker({\r\n        value: '#000', disabled: false, change: function (arg) {\r\n            var port = getPort();\r\n            for (var j = 0; j < port.length; j++) {\r\n                port[j].style.fill = arg.currentValue.rgba;\r\n            }\r\n        }\r\n    });\r\n    portFillDrop.appendTo('#fill');\r\n    //Colorpicker used to apply for stroke color of the Port.\r\n    portBorderDrop = new ej.inputs.ColorPicker({\r\n        value: '#000', disabled: false, change: function (arg) {\r\n            var port = getPort();\r\n            for (var j = 0; j < port.length; j++) {\r\n                port[j].style.strokeColor = arg.currentValue.rgba;\r\n            }\r\n        }\r\n    });\r\n    portBorderDrop.appendTo('#border');\r\n    //Shape collection of the Port.\r\n    var shape = [\r\n        { shape: 'X', text: 'X' },\r\n        { shape: 'Circle', text: 'Circle' },\r\n        { shape: 'Square', text: 'Square' },\r\n        { shape: 'Custom', text: 'Custom' }\r\n    ];\r\n    //DropDownList is used to apply the shape of the Port.\r\n    portShapeDrop = new ej.dropdowns.DropDownList({\r\n        enabled: true, placeholder: 'Select a Port', value: 'Circle',\r\n        dataSource: shape, fields: { value: 'shape', text: 'text' },\r\n        change: portShapeChange\r\n    });\r\n    //NumericTextBox is used to apply the size of the Port.\r\n    portShapeDrop.appendTo('#shape');\r\n    portSizeNum = new ej.inputs.NumericTextBox({\r\n        enabled: true,\r\n        format: '###.##',\r\n        value: 6,\r\n        min: 1,\r\n        step: 1,\r\n        change: function (args) {\r\n            applyPortStyle('size');\r\n        }\r\n    });\r\n    portSizeNum.appendTo('#size');\r\n    //NumericTextBox is used to apply the StrokeWidth of the Port.\r\n    portWidthNum = new ej.inputs.NumericTextBox({\r\n        enabled: true,\r\n        format: '###.##',\r\n        value: 1,\r\n        min: 0.5,\r\n        step: 0.5,\r\n        change: function (args) {\r\n            applyPortStyle('strokewidth');\r\n        }\r\n    });\r\n    portWidthNum.appendTo('#width');\r\n    diagram.select([diagram.nodes[0]]);\r\n"}