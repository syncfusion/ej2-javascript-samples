{
    "name": "Diagram",
    "directory": "diagram",
    "category": "Data Visualization",
    "ftName": "diagram",
    "type": "preview",
    "samples": [
        {
            "url": "default-functionalities",
            "name": "Default Functionalities",
            "description": "This sample visualizes the processing of an order placed using credit card with built-in flow shapes.",
            "category": "Getting Started"
        },
        {
            "url": "shape-gallery",
            "name": "Shapes",
            "description": "This sample illustrates basic built-in shapes, such as basic shapes, flow shapes, and BPMN shapes.",
            "category": "Getting Started"
        },
        {
            "url": "getting-started-node",
            "name": "Nodes",
            "description": "This sample visualizes the different stages of a software development life cycle using a circular flow diagram. Customizing the appearance of the nodes is illustrated in this example.",
            "category": "Getting Started"
        },
        {
            "url": "connector",
            "name": "Connectors",
            "description": "This sample visualizes the data flow in a marketing process using predefined shapes and connectors. Different types of connectors and decorators are used to customize the appearance, path, and direction of the data flow.",
            "category": "Getting Started"
        },
        {
            "url": "getting-started-annotation",
            "name": "Annotations",
            "description": "This sample illustrates the competitive environment of a business through five forces chart. The elements of the five force chart is described using nodes and annotations. Customizing the position and appearance of the annotation is illustrated in this example.",
            "category": "Getting Started"
        },
        {
            "url": "port",
            "name": "Ports",
            "description": "This sample visualizes the process flow of publishing a book using connection points. Connection points are static points over the shapes that allow creating connections to the shapes. Customizing the size and appearance of the connection points is illustrated in this example.",
            "category": "Getting Started"
        },
        {
            "url": "bpmn-editor",
            "name": "BPMN Editor",
            "type": "new",
            "description": "This sample visualizes the hotel booking reservation system and its built with ready made BPMN shapes.",
            "category": "Getting Started"
        },
        {
            "url": "custom-shapes",
            "name": "Complex Shapes",
            "description": "This sample demonstrates how to host a HTML element inside a node. In this example, a Gauge control is hosted inside a HTML Node.",
            "category": "Getting Started"
        },
        {
            "url": "drawing-tool",
            "name": "Drawing Tools",
            "description": "This sample visualizes how to build a diagram interactively using drawing tools. Continuous draw option, snapping, and undo/redo support are enabled to easily draw diagrams. Rulers, gridlines, and snapping options are enabled to easily align objects.",
            "category": "User Interaction"
        },
        {
            "url": "key-board-functions",
            "name": "Keyboard Interaction",
            "description": "This sample illustrates interaction with diagram control using shortcut keys. Command Manager support is used to manage keyboard interactions.",
            "category": "User Interaction"
        },
        {
            "url": "quick-commands",
            "name": "User Handles",
            "description": "This sample visualizes a simple flow diagram along with options to execute the frequently used commands using user handles.",
            "category": "User Interaction"
        },
        {
            "url": "symbol-palette",
            "name": "Symbol Palette",
            "description": "This example illustrates predefining shapes in a palette that can be easily dragged and dropped into the drawing area. Customizable options of the symbol palette are also illustrated in this example.",
            "category": "User Interaction"
        },
        {
            "url": "overview",
            "name": "Overview Panel",
            "description": "This sample visualizes an organizational structure along with an overview for easily navigating the large organizational structure using Overview Panel.",
            "category": "User Interaction"
        },
        {
            "url": "serialization",
            "name": "Save and Load",
            "description": "This sample visualizes building diagrams interactively and editing the saved diagrams. Symbol Palette is used to easily build diagrams.",
            "category": "Print and Export"
        },
        {
            "url": "print-export",
            "name": "Print and Export",
            "description": "This sample demonstrates printing and exporting the diagram as images.",
            "category": "Print and Export"
        },
        {
            "url": "hierarchical-model",
            "name": "Hierarchical Tree",
            "description": "This sample illustrates a simple hierarchical tree that is built from an external data source. Hierarchical tree layout algorithm is used to build hierarchical trees. Customizing the spacing between objects and orientation of the trees is illustrated in this example.",
            "category": "Automatic Layouts"
        },
        {
            "url": "organization-model",
            "name": "Organizational Chart",
            "description": "This sample illustrates a simple business management structure that is built from an external data source. Hierarchical tree layout algorithm is used to build organizational charts. Customizing the orientation and structure of the organizational chart is illustrated in this example.",
            "category": "Automatic Layouts"
        },
        {
            "url": "radial-tree",
            "name": "Radial Tree",
            "description": "This sample demonstrates a huge organizational structure using a compact layout model. Radial tree layout algorithm is used to build such a layout.",
            "category": "Automatic Layouts"
        },
        {
            "url": "mind-map",
            "name": "Mind Map",
            "description": "This sample demonstrates the concept of creativity using mind map layout algorithm. User handles are used to extend the mind map interactively.",
            "category": "Automatic Layouts"
        },
        {
            "url": "symmetric-layout",
            "name": "Symmetric Layout",
            "description": "This sample visualizes a simple network template using symmetrical layout algorithm.",
            "category": "Automatic Layouts"
        },
        {
            "url": "complex-hierarchical-tree",
            "name": "Complex Hierarchical Tree",
            "description": "This sample demonstrates a complex hierarchical template that is built from an external data source using complex hierarchical tree algorithm.",
            "category": "Automatic Layouts"
        },
        {
            "url": "right-to-left-tree",
            "name": "RTL Tree",
            "description": "This sample visualizes the concept of Artificical Intelligence using hierarchical tree layout algorithm",
            "category": "Automatic Layouts"
        },
        {
            "url": "pert-chart",
            "name": "PERT chart",
            "description": "This sample visualizes a project development process using Program Evaluation Review Technique (PERT). Complex hierarchical tree layout algorithm is used to automatically arrange the nodes.",
            "category": "Automatic Layouts"
        },
        {
            "url": "local-data",
            "name": "Local Data",
            "description": "This sample visualizes the classifications of species using hierarchical tree layout algorithm. Data Manager support is used to bind data with the diagram.",
            "category": "Data Binding"
        },
        {
            "url": "remote-data",
            "name": "Remote Data",
            "description": "This sample demonstrates binding remote data with the diagram using the Data Manager support.",
            "category": "Data Binding"
        },
        {
            "url": "venn-diagram",
            "name": "Venn Diagram",
            "description": "This sample visually represents the hotel booking reservation system. It is built with readymade BPMN shapes.",
            "category": "Static Diagram"
        },
        {
            "url": "fishbone-diagram",
            "name": "Fishbone Diagram",
            "type": "new",
            "description":"This sample visually represents a simple fishbone diagram (Ishikawa). Diagram nodes and annotations are used to define fishbone diagrams. Read-only mode is enabled here.",
            "category": "Static Diagram"
        }
    ]
}