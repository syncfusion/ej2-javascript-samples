{
    "name": "Diagram",
    "directory": "diagram",
    "category": "Data Visualization",
    "ftName": "diagram",
    "dataSourcePath":"src/diagram/diagram-data.js", 
    "type": "update",
    "samples": [
        {
            "url": "default-functionalities",
            "name": "Default Functionalities",
            "description": "This sample visualizes the processing of an order placed using credit card with built-in flow shapes.",
            "category": "Getting Started"
        },
        {
            "url": "shape-gallery",
            "name": "Shapes",
            "description": "This sample illustrates list of built-in shapes available in our JavaScript Diagram Library which includes basic shapes, flow shapes, and BPMN shapes.",
            "category": "Getting Started"
        },
        {
            "url": "getting-started-node",
            "name": "Nodes",
            "description": "This sample visualizes the different stages of a software development life cycle using a circular flow diagram.",
            "category": "Getting Started"
        },
        {
            "url": "connector",
            "name": "Connectors",
            "description": "This sample visualizes the data flow in a marketing process using predefined diagram shapes and connectors.",
            "category": "Getting Started"
        },
        {
            "url": "getting-started-annotation",
            "name": "Annotations",
            "description": "This sample illustrates the competitive environment of a business through five forces chart and its described using nodes and annotations.",
            "category": "Getting Started"
        },
        {
            "url": "port",
            "name": "Ports",
            "description": "This sample visualizes process flow of publishing a book using connection points which are static points over shapes that allow creating connections onto it.",
            "category": "Getting Started"
        },
        {
            "url": "swimlane",
            "name": "Swimlane",
            "description": "This sample  Different types of connectors and decorators are used to customize the appearance, path, and direction of the data flow.",
            "category": "Getting Started",
            "type": "new"
        },
        {
            "url": "custom-shapes",
            "name": "Complex Shapes",
            "description": "This sample demonstrates how to host a HTML elements inside a node. In this example, a Gauge control is hosted inside a HTML Node.",
            "category": "Getting Started"
        },
        {
            "url": "diagram-events",
            "name": "Events",
            "description": "This sample visualizes what are the client side events are available in our JavaScript Diagram Library.",
            "category": "Getting Started",
            "type": "new"
        },
        {
            "url": "tooltip-Sample",
            "name": "Tooltip",
            "description": "This sample demonstrates how to add the extra information to the nodes and connectors and how to show the information through diagram's tooltip feature.",
            "category": "Getting Started",
            "type": "new"
        },
        {
            "url": "history-manager",
            "name": "History Manager",
            "description": "This sample  Different types of connectors and decorators are used to customize the appearance, path, and direction of the data flow.",
            "category": "Getting Started",
            "type": "new"
        },
        {
            "url": "flow-execution",
            "name": "Flow Execution",
            "description": "This sample  Different types of connectors and decorators are used to customize the appearance, path, and direction of the data flow.",
            "category": "Getting Started",
            "type": "new"
        },
        {
            "url": "bpmn-editor",
            "name": "BPMN Editor",
            "description": "This sample visualizes the hotel booking reservation system and its built with ready made BPMN shapes.",
            "category": "Use Case Diagram"
        },
        {
            "url": "logic-circuit",
            "name": "Logic Circuit Diagram",
            "description": "This sample visualizes implementation of three input Boolean functions using universal logic gates and shape for logic gates designed with diagram's path node.",
            "category": "Use Case Diagram"
        },
        {
            "url": "uml-activity",
            "name": "UML Activity Diagram",
            "description": "This sample visually represents the hotel booking reservation system. It is built with readymade BPMN shapes.",
            "category": "Use Case Diagram"
        },
        {
            "url": "network-diagram",
            "name": "Network Diagram",
            "description": "This sample visualizes graphical layout of a network diagram using diagram's Native(SVG) nodes feature.",
            "category": "Use Case Diagram"
        },
        {
            "url": "uml-class-diagram",
            "name": "UML Class Diagram",
            "description": "This sample represents the hospital management system using diagram's built-in UML class diagram shapes.",
            "category": "Use Case Diagram"
        },
        {
            "url": "hierarchical-model",
            "name": "Hierarchical Tree",
            "description": "This sample illustrates a generating hierarchical tree from right to left orientation with external data source.",
            "category": "Automatic Layouts"
        },
        {
            "url": "organization-model",
            "name": "Organizational Chart",
            "description": "This sample illustrates a simple business management structure that is built from an external data source.",
            "category": "Automatic Layouts"
        },
        {
            "url": "radial-tree",
            "name": "Radial Tree",
            "description": "This sample demonstrates a huge organizational structure using a compact layout model. Radial tree layout algorithm is used to build such a layout.",
            "category": "Automatic Layouts"
        },
        {
            "url": "mind-map",
            "name": "Mind Map",
            "description": "This sample demonstrates the concept of creativity using mind map layout algorithm. User handles are used to extend the mind map interactively.",
            "category": "Automatic Layouts"
        },
        {
            "url": "symmetric-layout",
            "name": "Symmetric Layout",
            "description": "This sample visualizes a simple network template using symmetrical layout algorithm. It uses attractive and repulsive forces.",
            "category": "Automatic Layouts"
        },
        {
            "url": "complex-hierarchical-tree",
            "name": "Complex Hierarchical Tree",
            "description": "This sample demonstrates a complex hierarchical template that is built from an external data source using complex hierarchical tree algorithm.",
            "category": "Automatic Layouts"
        },
        {
            "url": "right-to-left-tree",
            "name": "RTL Tree",
            "description": "This sample visualizes the concept of Artificical Intelligence using hierarchical tree layout algorithm",
            "category": "Automatic Layouts"
        },
        {
            "url": "pert-chart",
            "name": "PERT chart",
            "description": "This sample visualizes a project development process using Program Evaluation Review Technique (PERT).",
            "category": "Automatic Layouts"
        },
        {
            "url": "drawing-tool",
            "name": "Drawing Tools",
            "description": "This sample visualizes how to build a diagram interactively using drawing tools. Continuous draw option, snapping are enabled to easily draw diagrams.",
            "category": "User Interaction"
        },
        {
            "url": "key-board-functions",
            "name": "Keyboard Interaction",
            "description": "This sample illustrates interaction with diagram control using shortcut keys. Command Manager support is used to manage keyboard interactions.",
            "category": "User Interaction"
        },
        {
            "url": "quick-commands",
            "name": "User Handles",
            "description": "This sample visualizes a simple flow diagram along with options to execute the frequently used commands using user handles.",
            "category": "User Interaction"
        },
        {
            "url": "symbol-palette",
            "name": "Symbol Palette",
            "description": "This example illustrates predefining shapes in a palette that can be easily dragged and dropped into the drawing area.",
            "category": "User Interaction"
        },
        {
            "url": "overview",
            "name": "Overview Panel",
            "description": "This sample visualizes an organizational structure along with an overview for easily navigating the large organizational structure using Overview Panel.",
            "category": "User Interaction"
        },
        {
            "url": "serialization",
            "name": "Save and Load",
            "description": "This sample visualizes building diagrams interactively and editing the saved diagrams. Symbol Palette is used to easily build diagrams.",
            "category": "Print and Export"
        },
        {
            "url": "print-export",
            "name": "Print and Export",
            "description": "This example shows how to print the diagram and how to export the diagram as image (*.jpg, *.png, and *bmp) and SVG format.",
            "category": "Print and Export"
        },
        {
            "url": "local-data",
            "name": "Local Data",
            "description": "This sample visualizes the classifications of species using hierarchical tree layout algorithm. Data Manager support is used to bind data with the diagram.",
            "category": "Data Binding"
        },
        {
            "url": "remote-data",
            "name": "Remote Data",
            "description": "This sample demonstrates how to bind an remote data with the diagram using the Data Manager support.",
            "category": "Data Binding"
        },
        {
            "url": "crud",
            "name": "CRUD",
            "description": "This sample demonstrates generating a diagram by reading data from the database, and updating it with new inserted/updated/deleted objects through web services.",
            "category": "Data Binding"
        },
        {
            "url": "venn-diagram",
            "name": "Venn Diagram",
            "description": "This sample visually represents the hotel booking reservation system. It is built with readymade BPMN shapes.",
            "category": "Static Diagram"
        },
        {
            "url": "fishbone-diagram",
            "name": "Fishbone Diagram",
            "description": "This sample visually represents a simple fishbone diagram (Ishikawa). Diagram nodes and annotations are used to define fishbone diagrams.",
            "category": "Static Diagram"
        }
    ]
}