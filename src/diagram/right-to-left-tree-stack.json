{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/production/demos/diagram/right-to-left-tree/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"http://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"http://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div style=\"width:100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}/**\n * Sample for RTL tree\n */\nej.diagrams.Diagram.Inject(ej.diagrams.DataBinding, ej.diagrams.HierarchicalTree);\n //Create and add ports for Node.\n function getPorts(root) {\n    var ports = [\n        {\n            id: 'port1', shape: 'Circle', offset: { x: 0, y: 0.5 }, horizontalAlignment: 'Left',\n            verticalAlignment: 'Bottom', margin: { right: -2, bottom: -5.5 }\n        },\n        {\n            id: 'port2', shape: 'Circle', offset: { x: 1, y: 0.99 }, horizontalAlignment: 'Right',\n            verticalAlignment: 'Bottom', margin: { right: -2, bottom: -5.5 }\n        }\n    ];\n    if (!root) {\n        ports[0].offset.y = 1;\n    }\n    else {\n        ports[0].verticalAlignment = 'Center';\n        ports[0].horizontalAlignment = 'Center';\n    }\n    return ports;\n}\n\n    //Initializes diagram control\n    var diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '600px', snapSettings: { constraints: ej.diagrams.SnapConstraints.None },\n        //Configure the data source\n        dataSourceSettings: {\n            id: 'Name', parentId: 'Category',\n            dataManager: new ej.data.DataManager(window.artificialIntelligence),\n            doBinding: function (nodeModel, data, diagram) {\n                var nameKey = 'Name';\n                nodeModel.annotations = [{ content: data[nameKey] }];\n            }\n        },\n        //Configures the layout\n        layout: {\n            type: 'HierarchicalTree', orientation: 'RightToLeft',\n            verticalAlignment: 'Center', horizontalAlignment: 'Center', verticalSpacing: 100,\n            horizontalSpacing: -10\n        },\n        //Enables zoom pan tool \n        tool: ej.diagrams.DiagramTools.ZoomPan,\n        //Sets the default values of a Node\n        getNodeDefaults: function (obj, diagram) {\n            obj.width = 120;\n            obj.style = { fill: '#034d6d', strokeWidth: 1 };\n            var key = 'branch';\n            //set the shape of the Node.\n            if (obj.data[key] === 'root') {\n                obj.shape = { type: 'Basic', shape: 'Ellipse' };\n                obj.height = 120;\n            }\n            else {\n                obj.shape = {\n                    type: 'Native',\n                    content: '<svg width=\"120\" height=\"61\"><g><line x1=\"0\" x2=\"120\" y1=\"60\" y2=\"60\" stroke-width=\"1\" stroke= \"black\"></line>' +\n                        '<rect x=\"0\" y=\"0\" width=\"120\" height=\"60\" fill=\"transparent\" stroke=\"none\"></rect></g></svg>'\n                };\n                obj.style.strokeWidth = 0;\n                obj.height = 60;\n            }\n            //Set ports and annotations\n            obj.ports = getPorts(obj.data[key] === 'root');\n            var annotation = obj.annotations[0];\n            if (obj.data[key] !== 'root') {\n                annotation.offset = { y: 1 };\n                annotation.verticalAlignment = 'Bottom';\n                annotation.margin = { bottom: 10 };\n            }\n            else {\n                annotation.style = { color: 'white' };\n            }\n            return obj;\n        },\n        //Sets the default values of a Connector\n        getConnectorDefaults: function (connector, diagram) {\n            connector.type = 'Bezier';\n            connector.sourcePortID = 'port1';\n            connector.targetPortID = 'port2';\n            connector.targetDecorator = { shape: 'None' };\n            return connector;\n        },\n    });\n    diagram.appendTo('#diagram');\n   \n"}