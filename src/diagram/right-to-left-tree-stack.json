{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/development/demos/diagram/right-to-left-tree/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div style=\"width:100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}/**\r\n * Sample for RTL tree\r\n */\r\nej.diagrams.Diagram.Inject(ej.diagrams.DataBinding, ej.diagrams.HierarchicalTree);\r\n //Create and add ports for Node.\r\n function getPorts(root) {\r\n    var ports = [\r\n        {\r\n            id: 'port1', shape: 'Circle', offset: { x: 0, y: 0.5 }, horizontalAlignment: 'Left',\r\n            verticalAlignment: 'Bottom', margin: { right: -2, bottom: -5.5 }\r\n        },\r\n        {\r\n            id: 'port2', shape: 'Circle', offset: { x: 1, y: 0.99 }, horizontalAlignment: 'Right',\r\n            verticalAlignment: 'Bottom', margin: { right: -2, bottom: -5.5 }\r\n        }\r\n    ];\r\n    if (!root) {\r\n        ports[0].offset.y = 1;\r\n    }\r\n    else {\r\n        ports[0].verticalAlignment = 'Center';\r\n        ports[0].horizontalAlignment = 'Center';\r\n    }\r\n    return ports;\r\n}\r\n\r\n    //Initializes diagram control\r\n    var diagram = new ej.diagrams.Diagram({\r\n        width: '100%', height: '600px', snapSettings: { constraints: ej.diagrams.SnapConstraints.None },\r\n        //Configure the data source\r\n        dataSourceSettings: {\r\n            id: 'Name', parentId: 'Category',\r\n            dataSource: new ej.data.DataManager(window.artificialIntelligence),\r\n            doBinding: function (nodeModel, data, diagram) {\r\n                var nameKey = 'Name';\r\n                nodeModel.annotations = [{ content: data[nameKey] }];\r\n            }\r\n        },\r\n        //Configures the layout\r\n        layout: {\r\n            type: 'HierarchicalTree', orientation: 'RightToLeft',\r\n            verticalAlignment: 'Center', horizontalAlignment: 'Center', verticalSpacing: 100,\r\n            horizontalSpacing: -10\r\n        },\r\n        //Enables zoom pan tool \r\n        tool: ej.diagrams.DiagramTools.ZoomPan,\r\n        //Sets the default values of a Node\r\n        getNodeDefaults: function (obj, diagram) {\r\n            obj.width = 120;\r\n            obj.style = { fill: '#034d6d', strokeWidth: 1 };\r\n            var key = 'branch';\r\n            //set the shape of the Node.\r\n            if (obj.data[key] === 'root') {\r\n                obj.shape = { type: 'Basic', shape: 'Ellipse' };\r\n                obj.height = 120;\r\n            }\r\n            else {\r\n                obj.shape = {\r\n                    type: 'Native',\r\n                    content: '<svg width=\"120\" height=\"61\"><g><line x1=\"0\" x2=\"120\" y1=\"60\" y2=\"60\" stroke-width=\"1\" stroke= \"black\"></line>' +\r\n                        '<rect x=\"0\" y=\"0\" width=\"120\" height=\"60\" fill=\"transparent\" stroke=\"none\"></rect></g></svg>'\r\n                };\r\n                obj.style.strokeWidth = 0;\r\n                obj.height = 60;\r\n            }\r\n            //Set ports and annotations\r\n            obj.ports = getPorts(obj.data[key] === 'root');\r\n            var annotation = obj.annotations[0];\r\n            if (obj.data[key] !== 'root') {\r\n                annotation.offset = { y: 1 };\r\n                annotation.verticalAlignment = 'Bottom';\r\n                annotation.margin = { bottom: 10 };\r\n            }\r\n            else {\r\n                annotation.style = { color: 'white' };\r\n            }\r\n            return obj;\r\n        },\r\n        //Sets the default values of a Connector\r\n        getConnectorDefaults: function (connector, diagram) {\r\n            connector.type = 'Bezier';\r\n            connector.sourcePortID = 'port1';\r\n            connector.targetPortID = 'port2';\r\n            connector.targetDecorator = { shape: 'None' };\r\n            return connector;\r\n        },\r\n    });\r\n    diagram.appendTo('#diagram');\r\n   \r\n"}