{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/production/demos/diagram/mind-map/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"http://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"http://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}/*jshint esversion: 6 */\nej.diagrams.Diagram.Inject(ej.diagrams.DataBinding, ej.diagrams.MindMap, ej.diagrams.HierarchicalTree);\nvar diagram;\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        /* jshint proto: true */\n        ({ __proto__: [] } instanceof Array && function (der, b) { der.__proto__ = b; }) ||\n        function (der, b) { for (var p in b) if (b.hasOwnProperty(p)) der[p] = b[p]; };\n    return function (der, b) {\n        extendStatics(der, b);\n        function __() { this.constructor = der; }\n        der.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Mind-map sample\n */\n\nfunction selectionChange(arg) {\n    if (arg.state === 'Changing') {\n        if (arg.newValue[0] instanceof ej.diagrams.Node) {\n            for (var _i = 0, _a = diagram.selectedItems.userHandles; _i < _a.length; _i++) {\n                var handle_1 = _a[_i];\n                handle_1.visible = true;\n            }\n            if (arg.newValue[0].data.branch === 'Left' ||\n                arg.newValue[0].data.branch === 'subLeft') {\n                hideUserHandle('leftHandle');\n                changeUserHandlePosition('leftHandle');\n            }\n            else if (arg.newValue[0].data.branch === 'Right' ||\n                arg.newValue[0].data.branch === 'subRight') {\n                hideUserHandle('rightHandle');\n                changeUserHandlePosition('rightHandle');\n            }\n            else if (arg.newValue[0].data.branch === 'Root') {\n                hideUserHandle('delete');\n            }\n        }\n        else {\n            hideUserHandle('leftHandle');\n            hideUserHandle('rightHandle');\n            hideUserHandle('delete');\n        }\n    }\n}\n\nfunction getNodeDefaults(obj) {\n    obj.constraints = ej.diagrams.NodeConstraints.Default & ~ej.diagrams.NodeConstraints.Drag;\n    if (obj.data.branch === 'Left' || obj.data.branch === 'Right' || obj.data.branch === 'Root') {\n        obj.shape = { type: 'Basic', shape: 'Ellipse' };\n        obj.borderColor = 'black';\n        obj.style = {\n            fill: obj.data.branch === 'Root' ? '#E74C3C' : '#F39C12', strokeColor: 'none',\n            strokeWidth: 2\n        };\n        obj.annotations = [{\n            content: obj.data.Label, margin: { left: 10, right: 10, top: 10, bottom: 10 },\n            style: { color: 'white' }\n        }];\n        var port1 = getPort();\n        for (var i = 0; i < port1.length; i++) {\n            obj.ports.push(new ej.diagrams.PointPort(obj, 'ports', port1[i], true));\n        }\n        hideUserHandle('Top');\n    }\n    else {\n        var color = void 0;\n        if (obj.data.branch === 'Right' || obj.data.branch === 'subRight') {\n            color = '#8E44AD';\n        }\n        else {\n            color = '#3498DB';\n        }\n        obj.shape = { type: 'Basic', shape: 'Rectangle' };\n        obj.style = { fill: color, strokeWidth: 0 };\n        obj.minWidth = 100;\n        obj.height = 4;\n        var port2 = getPort();\n        for (var j = 0; j < port2.length; j++) {\n            obj.ports.push(new ej.diagrams.PointPort(obj, 'ports', port2[j], true));\n        }\n        obj.annotations = [{\n            content: obj.data.Label, offset: { x: 0.5, y: 0 }, verticalAlignment: 'Bottom'\n        }];\n        obj.shape.margin = { left: 0, right: 0, top: 0, bottom: 0 };\n    }\n    return obj;\n}\n\nfunction getConnectorDefaults(connector, diagram) {\n    connector.type = 'Bezier';\n    connector.targetDecorator = { shape: 'None' };\n    var sourceNode = diagram.getObject(connector.sourceID);\n    var targetNode = diagram.getObject(connector.targetID);\n    if (targetNode.data.branch === 'Right' || targetNode.data.branch === 'subRight') {\n        connector.sourcePortID = sourceNode.ports[0].id;\n        connector.targetPortID = targetNode.ports[1].id;\n        connector.style = { strokeWidth: 2, strokeColor: '#8E44AD' };\n    }\n    else if (targetNode.data.branch === 'Left' || targetNode.data.branch === 'subLeft') {\n        connector.sourcePortID = sourceNode.ports[1].id;\n        connector.targetPortID = targetNode.ports[0].id;\n        connector.style = { strokeWidth: 2, strokeColor: '#3498DB' };\n    }\n    connector.constraints &= ~ej.diagrams.ConnectorConstraints.Select;\n    return connector;\n}\n\n//creation of the Ports\nfunction getPort() {\n    var port =\n        [{\n            id: 'port1', offset: { x: 0, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden,\n            style: { fill: 'black' }\n        },\n        {\n            id: 'port2', offset: { x: 1, y: 0.5 }, visibility: ej.diagrams.PortVisibility.Hidden,\n            style: { fill: 'black' }\n        },\n        ];\n    return port;\n}\n\nfunction addNode() {\n    var obj = {};\n    obj.id = ej.diagrams.randomId();\n    obj.data = {};\n    obj.data.Label = 'Node';\n    return obj;\n}\nfunction addConnector(source, target) {\n    var connector = {};\n    connector.id = ej.diagrams.randomId();\n    connector.sourceID = source.id;\n    connector.targetID = target.id;\n    return connector;\n}\n\n//Tool for Userhandles.\nfunction getTool(action) {\n    var tool;\n    if (action === 'leftHandle') {\n        tool = new LeftExtendTool(diagram.commandHandler);\n    } else if (action === 'rightHandle') {\n        tool = new RightExtendTool(diagram.commandHandler);\n    } else if (action === 'delete') {\n        tool = new DeleteClick(diagram.commandHandler);\n    }\n    return tool;\n}\n\nvar LeftExtendTool = (function (_super) {\n    __extends(LeftExtendTool, _super);\n    function LeftExtendTool() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LeftExtendTool.prototype.mouseDown = function (args) {\n        _super.prototype.mouseDown.call(this, args);\n        this.inAction = true;\n    };\n    LeftExtendTool.prototype.mouseUp = function (args) {\n        if (this.inAction) {\n            var selectedElement = this.commandHandler.getSelectedObject();\n            if (selectedElement[0]) {\n                if (selectedElement[0] instanceof ej.diagrams.Node) {\n                    var node = addNode();\n                    if (selectedElement[0].data.branch === 'Root') {\n                        node.data.branch = 'Right';\n                    }\n                    else if (selectedElement[0].data.branch === 'Right' ||\n                        selectedElement[0].data.branch === 'subRight') {\n                        node.data.branch = 'subRight';\n                    }\n                    var connector = addConnector(selectedElement[0], node);\n                    diagram.clearSelection();\n                    var nd = diagram.add(node);\n                    diagram.add(connector);\n                    diagram.doLayout();\n                    diagram.bringIntoView(nd.wrapper.bounds);\n                    diagram.startTextEdit(nd);\n                }\n            }\n        }\n    };\n    return LeftExtendTool;\n}(ej.diagrams.ToolBase));\n\nvar RightExtendTool = (function (_super) {\n    __extends(RightExtendTool, _super);\n    function RightExtendTool() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    RightExtendTool.prototype.mouseDown = function (args) {\n        _super.prototype.mouseDown.call(this, args);\n        this.inAction = true;\n    };\n    RightExtendTool.prototype.mouseUp = function (args) {\n        if (this.inAction) {\n            var selectedObject = this.commandHandler.getSelectedObject();\n            if (selectedObject[0]) {\n                if (selectedObject[0] instanceof ej.diagrams.Node) {\n                    var node = addNode();\n                    if (selectedObject[0].data.branch === 'Root') {\n                        node.data.branch = 'Left';\n                    }\n                    else if (selectedObject[0].data.branch === 'Left' ||\n                        selectedObject[0].data.branch === 'subLeft') {\n                        node.data.branch = 'subLeft';\n                    }\n                    var connector = addConnector(selectedObject[0], node);\n                    diagram.clearSelection();\n                    var nd = diagram.add(node);\n                    diagram.add(connector);\n                    diagram.doLayout();\n                    diagram.bringIntoView(nd.wrapper.bounds);\n                    diagram.startTextEdit(nd);\n                }\n            }\n        }\n    };\n    return RightExtendTool;\n}(ej.diagrams.ToolBase));\n\nvar DeleteClick = (function (_super) {\n    __extends(DeleteClick, _super);\n    function DeleteClick() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DeleteClick.prototype.mouseDown = function (args) {\n        _super.prototype.mouseDown.call(this, args);\n        this.inAction = true;\n    };\n    DeleteClick.prototype.mouseUp = function (args) {\n        if (this.inAction) {\n            var selectedObject = this.commandHandler.getSelectedObject();\n            if (selectedObject[0]) {\n                if (selectedObject[0] instanceof ej.diagrams.Node) {\n                    var node = selectedObject[0];\n                    this.removeSubChild(node);\n                }\n                diagram.doLayout();\n            }\n        }\n    };\n    DeleteClick.prototype.removeSubChild = function (node) {\n        for (var i = node.outEdges.length - 1; i >= 0; i--) {\n            var connector = diagram.getObject(node.outEdges[i]);\n            var childNode = diagram.getObject(connector.targetID);\n            if (childNode.outEdges.length > 0) {\n                this.removeSubChild(childNode);\n            }\n            else {\n                diagram.remove(childNode);\n            }\n        }\n        diagram.remove(node);\n    };\n    return DeleteClick;\n}(ej.diagrams.ToolBase));\n\nfunction onchange(params) {\n    if (selectedObject[0].data.branch === 'Root' || selectedObject[0].data.branch === 'Left' || selectedObject[0].data.branch === 'Right') {\n        selectedObject[0].style.fill = args.target.value;\n        diagram.dataBind();\n    } else {\n        selectedObject[0].annotations[0].style.color = args.target.value;\n        diagram.dataBind();\n    }\n}\n//hide the require userhandle.\nfunction hideUserHandle(name) {\n    for (var _i = 0, _a = diagram.selectedItems.userHandles; _i < _a.length; _i++) {\n        var handle_2 = _a[_i];\n        if (handle_2.name === name) {\n            handle_2.visible = false;\n        }\n    }\n}\n\nvar leftarrow = 'M11.924,6.202 L4.633,6.202 L4.633,9.266 L0,4.633 L4.632,0 L4.632,3.551 L11.923,3.551 L11.923,6.202Z';\nvar rightarrow = 'M0,3.063 L7.292,3.063 L7.292,0 L11.924,4.633 L7.292,9.266 L7.292,5.714 L0.001,5.714 L0.001,3.063Z';\nvar deleteicon = 'M 7.04 22.13 L 92.95 22.13 L 92.95 88.8 C 92.95 91.92 91.55 94.58 88.76' +\n    '96.74 C 85.97 98.91 82.55 100 78.52 100 L 21.48 100 C 17.45 100 14.03 98.91 11.24 96.74 C 8.45 94.58 7.04' +\n    '91.92 7.04 88.8 z M 32.22 0 L 67.78 0 L 75.17 5.47 L 100 5.47 L 100 16.67 L 0 16.67 L 0 5.47 L 24.83 5.47 z';\nvar leftuserhandle = setUserHandle('leftHandle', leftarrow, 'Left', 1, { top: 0, bottom: 0, left: 0, right: 10 }, 'Left', 'Top');\nvar rightuserhandle = setUserHandle('rightHandle', rightarrow, 'Right', 1, { top: 0, bottom: 0, left: 10, right: 0 }, 'Right', 'Top');\nvar deleteuserhandle = setUserHandle('delete', deleteicon, 'Top', 0.5, { top: 0, bottom: 10, left: 0, right: 0 }, 'Center', 'Center');\nvar handle = [leftuserhandle, rightuserhandle, deleteuserhandle];\n//set and creation of the Userhandle.\nfunction setUserHandle(name, pathData, side, offset, margin, halignment, valignment) {\n    var userhandle = {\n        name: name,\n        pathData: pathData,\n        backgroundColor: 'black',\n        pathColor: 'white',\n        side: side,\n        offset: offset,\n        margin: margin,\n        horizontalAlignment: halignment,\n        verticalAlignment: valignment,\n    };\n    return userhandle;\n}\n//Change the Position of the UserHandle.\nfunction changeUserHandlePosition(change) {\n    for (var handle in diagram.selectedItems.userHandles) {\n        if (handle.name === 'delete' && change === 'leftHandle') {\n            applyHandle(handle, 'Left', 1, { top: 0, bottom: 0, left: 0, right: 10 }, 'Left', 'Top');\n\n        } else if (handle.name === 'delete' && change === 'rightHandle') {\n            applyHandle(handle, 'Right', 1, { top: 0, bottom: 0, left: 10, right: 0 }, 'Right', 'Top');\n        }\n    }\n}\n//set the value for UserHandle element\nfunction applyHandle(handle, side, offset, margin, halignment, valignment) {\n    handle.side = side;\n    handle.offset = offset;\n    handle.margin = margin;\n    handle.horizontalAlignment = halignment;\n    handle.verticalAlignment = valignment;\n}\n\n\n    var items = new ej.data.DataManager(window.data, new ej.data.Query().take(7));\n\n    //initialization of the Diagram.\n    diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '550px',\n        snapSettings: { constraints: ej.diagrams.SnapConstraints.None },\n        tool: ej.diagrams.DiagramTools.SingleSelect,\n        layout: {\n            type: 'MindMap', horizontalSpacing: 50,\n            getBranch: function (node) {\n                return node.data.branch;\n            }\n        },\n        selectionChange: selectionChange,\n        selectedItems: { constraints: ej.diagrams.SelectorConstraints.UserHandle, userHandles: handle },\n        dataSourceSettings: { id: 'id', parentId: 'parentId', dataManager: items, root: String(1) },\n        //sets node default value\n        getNodeDefaults: getNodeDefaults,\n        //sets connector default value \n        getConnectorDefaults: getConnectorDefaults,\n        getCustomTool: getTool,\n    });\n    diagram.appendTo('#diagram');\n    diagram.fitToPage();\n\n"}