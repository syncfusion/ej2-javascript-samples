{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/development/demos/diagram/diagram-events/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-8 control-section\">\n    <style>\n      #diagramEventsControlSection .sb-mobile-palette {\n        width: 200px;\n        height: 100%;\n        float: left;\n      }\n  \n     #diagramEventsControlSection .sb-mobile-palette-bar {\n        display: none;\n      }\n  \n     #diagramEventsControlSection .sb-mobile-diagram {\n        width: calc(100% - 200px);\n        height: 100%;\n        float: left;\n        border: 1px solid #d9dedd;\n      }\n      \n      .material #diagramEventsControlSection  #palette-space .e-accordion {\n          border: none;\n      }\n      .material #diagramEventsControlSection #palette-space {\n         border: 1px solid rgba(0, 0, 0, 0.12);\n      }\n  \n      @media (max-width: 550px) {\n        #diagramEventsControlSection .sb-mobile-palette {\n          z-index: 19;\n          position: absolute;\n          display: none;\n          transition: transform 300ms linear, visibility 0s linear 300ms;\n          width: 39%;\n          height: 100%;\n        }\n  \n        #diagramEventsControlSection .sb-mobile-palette-bar {\n          display: block;\n          width: 100%;\n          background: #fafafa;\n          padding: 10px 10px;\n          border: 0.5px solid #e0e0e0;\n          min-height: 40px;\n        }\n  \n        #diagramEventsControlSection .sb-mobile-diagram {\n          width: 100%;\n          height: 100%;\n          float: left;\n          left: 0px;\n        }\n  \n        #diagramEventsControlSection #palette-icon {\n          font-size: 20px;\n        }\n      }\n  \n      #diagramEventsControlSection .sb-mobile-palette-open {\n        position: absolute;\n        display: block;\n        right: 15px;\n      }\n  \n      @font-face {\n        font-family: \"e-ddb-icons1\";\n        src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA)\n          format(\"truetype\");\n        font-weight: normal;\n        font-style: normal;\n      }\n  \n      .e-ddb-icons1 {\n        font-family: \"e-ddb-icons1\";\n        speak: none;\n        font-size: 16px;\n        font-style: normal;\n        font-weight: normal;\n        font-variant: normal;\n        text-transform: none;\n        line-height: 1;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n      }\n  \n      #diagramEventsControlSection .e-toggle-palette::before {\n        content: \"\\e700\";\n      }\n  \n      \n      #diagramEventsPropertySection .event-tracer {\n        width: 240px;\n        height: 700px;\n        min-height: 700px;\n        float: left;\n      }\n  \n     #diagramEventsPropertySection .heading {\n        color: #807f7f;\n        font-size: 15px;\n        height: 50px;\n        width: 100%;\n        border-bottom: 1px solid #d9dedd;\n        padding: 10px;\n      }\n\n      #EventLog b {\n       color: #388e3c;\n      }\n\n      hr {\n        margin: 1px 10px 1px 0px;\n        border-top: 1px solid #eee;\n      }\n  \n      .property-section {\n        padding-top: 20px;\n        padding-bottom: 20px;\n        height: 740px;\n        padding-right: 0px;\n      }\n  \n      #diagramEventsPropertySection .evtbtn { \n        float: right; \n      }\n  \n      #diagramEventsPropertySection .listbox {\n        width: 100%;\n        height: 50%;\n      }\n  \n     #diagramEventsPropertySection .event-tracer .prop-grid {\n        width: 100%;\n        height: 50%;\n      }\n  \n     #diagramEventsPropertySection #EventLog {\n        height: calc(100% - 50px);\n        padding: 15px;\n        overflow: auto;\n        width: 100%;\n      }\n    </style>\n    <div id=\"diagramEventsControlSection\" class=\"content-wrapper\" style=\"width:100%;background: white\">\n      <div id=\"palette-space\" class=\"sb-mobile-palette\">\n        <div id=\"symbolpalette\" style=\"width:90%;\"></div>\n      </div>\n      <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n        <div id=\"diagram\"></div>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-lg-4 property-section\">\n    <div id=\"diagramEventsPropertySection\" style=\"height:100%;border: 1px solid #e0e0e0\">\n      <div class=\"listbox\">\n        <div class=\"heading\" style=\"height:40px\"><span>Client-side events</span></div>\n        <div id=\"listview-def\" tabindex=\"1\"></div>\n      </div>\n      <div class=\"prop-grid content\" style=\"height:50%; border-top: 1px solid #e0e0e0\">\n        <div class=\"heading\">\n          <span style=\"display: inline-block;margin-top: 5px;\">Event arguments</span>\n          <div class=\"evtbtn\"><button id=\"clearbtn\">Clear</button></div>\n        </div>\n        <div id=\"EventLog\">\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  \n  </div></body></html>","index.js":"{{ripple}}ej.diagrams.Diagram.Inject(ej.diagrams.UndoRedo, ej.diagrams.DiagramContextMenu, ej.diagrams.Snapping);\r\n\r\nfunction getSymbolDefaults(symbol) {\r\n    symbol.width = 50;\r\n    symbol.height = 50;\r\n    symbol.constraints = ej.diagrams.NodeConstraints.Default | ej.diagrams.NodeConstraints.AllowDrop;\r\n}\r\n\r\nfunction getSymbolInfo(symbol) {\r\n    return { fit: true };\r\n}\r\n\r\nfunction dragEnter(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\nfunction dragLeave(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\nfunction dragOver(args) {\r\n    if (args.target) {\r\n        getEventDetails(args);\r\n    }\r\n}\r\n\r\nfunction click(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\nfunction historyChange(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\nfunction doubleClick(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\nfunction textEdit(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\nfunction scrollChange(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\nfunction selectionChange(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\nfunction sizeChange(args) {\r\n    if (args.state === 'Completed') {\r\n        getEventDetails(args);\r\n    }\r\n}\r\n\r\nfunction connectionChange(args) {\r\n    if (args.state === 'Changed') {\r\n        getEventDetails(args);\r\n    }\r\n}\r\n\r\nfunction sourcePointChange(args) {\r\n    if (args.state === 'Completed') {\r\n        getEventDetails(args);\r\n    }\r\n}\r\n\r\nfunction targetPointChange(args) {\r\n    if (args.state === 'Completed') {\r\n        getEventDetails(args);\r\n    }\r\n}\r\n\r\nfunction propertyChange(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\nfunction positionChange(args) {\r\n    if (args.state === 'Completed') {\r\n        getEventDetails(args);\r\n    }\r\n}\r\n\r\nfunction rotateChange(args) {\r\n    if (args.state === 'Completed') {\r\n        getEventDetails(args);\r\n    }\r\n}\r\n\r\nfunction collectionChange(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\nfunction mouseEnter(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\nfunction mouseLeave(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\nfunction mouseOver(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\nfunction contextMenuOpen(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\nfunction contextMenuBeforeItemRender(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\nfunction contextMenuClick(args) {\r\n    getEventDetails(args);\r\n}\r\n\r\n// tslint:disable-next-line:max-func-body-length\r\n\r\n\r\n    var data = [\r\n        { text: 'Drag enter', id: 'dragEnter' },\r\n        { text: 'Drag leave', id: 'dragLeave' },\r\n        { text: 'Drag over', id: 'dragOver' },\r\n        { text: 'Click', id: 'click', isChecked: true },\r\n        { text: 'History change', id: 'historyChange', isChecked: true },\r\n        { text: 'Double click', id: 'doubleClick' },\r\n        { text: 'Text edit', id: 'textEdit', isChecked: true },\r\n        { text: 'Scroll change', id: 'scrollChange' },\r\n        { text: 'Selection change', id: 'selectionChange', isChecked: true },\r\n        { text: 'Size change', id: 'sizeChange', isChecked: true },\r\n        { text: 'Connection change', id: 'connectionChange', isChecked: true },\r\n        { text: 'SourcePoint change', id: 'sourcePointChange' },\r\n        { text: 'TargetPoint change', id: 'targetPointChange' },\r\n        { text: 'Position change', id: 'positionChange', isChecked: true },\r\n        { text: 'Rotate change', id: 'rotateChange', isChecked: true },\r\n        { text: 'Collection change', id: 'collectionChange', isChecked: true },\r\n        { text: 'Mouse enter', id: 'mouseEnter' },\r\n        { text: 'Mouse leave', id: 'mouseLeave' },\r\n        { text: 'Mouse over', id: 'mouseOver' },\r\n        { text: 'Context menu open', id: 'contextMenuOpen' },\r\n        { text: 'Context menu before item render', id: 'contextMenuBeforeItemRender' },\r\n        { text: 'Context menu click', id: 'contextMenuClick' }\r\n    ];\r\n\r\n    //Initialize ListView component\r\n    var listObj = new ej.lists.ListView({\r\n        //Set defined data to dataSource property\r\n        dataSource: data,\r\n        height: \"calc(100% - 40px)\",\r\n        //Enables checkbox\r\n        showCheckBox: true\r\n    });\r\n\r\n    //Render initialized ListView component\r\n    listObj.appendTo('#listview-def');\r\n\r\n    //Render initialized button component\r\n    var button = new ej.buttons.Button();\r\n    button.appendTo('#clearbtn');\r\n\r\n    //Initializes diagram control\r\n    var diagram = new ej.diagrams.Diagram({\r\n        width: '100%', height: '700px',\r\n        contextMenuSettings: { show: true },\r\n        snapSettings: { constraints: ej.diagrams.SnapConstraints.None },\r\n        dragEnter: dragEnter,\r\n        dragLeave: dragLeave,\r\n        dragOver: dragOver,\r\n        click: click,\r\n        historyChange: historyChange,\r\n        doubleClick: doubleClick,\r\n        textEdit: textEdit,\r\n        scrollChange: scrollChange,\r\n        selectionChange: selectionChange,\r\n        sizeChange: sizeChange,\r\n        connectionChange: connectionChange,\r\n        sourcePointChange: sourcePointChange,\r\n        targetPointChange: targetPointChange,\r\n        propertyChange: propertyChange,\r\n        positionChange: positionChange,\r\n        rotateChange: rotateChange,\r\n        collectionChange: collectionChange,\r\n        mouseEnter: mouseEnter,\r\n        mouseLeave: mouseLeave,\r\n        mouseOver: mouseOver,\r\n        contextMenuOpen: contextMenuOpen,\r\n        contextMenuBeforeItemRender: contextMenuBeforeItemRender,\r\n        contextMenuClick: contextMenuClick\r\n    });\r\n    diagram.appendTo('#diagram');\r\n    clearEventLog();\r\n\r\n    //Initialize the basicshapes for the symbol palatte\r\n    var basicShapes = [\r\n        { id: 'RectangleNode', shape: { type: 'Basic', shape: 'Rectangle' } },\r\n        { id: 'EllipseNode', shape: { type: 'Basic', shape: 'Ellipse' } },\r\n        { id: 'ParallelogramNode', shape: { type: 'Basic', shape: 'Parallelogram' } },\r\n        { id: 'TriangleNode', shape: { type: 'Basic', shape: 'Triangle' } },\r\n        { id: 'HexagonNode', shape: { type: 'Basic', shape: 'Hexagon' } },\r\n        { id: 'PentagonNode', shape: { type: 'Basic', shape: 'Pentagon' } },\r\n        { id: 'CylinderNode', shape: { type: 'Basic', shape: 'Cylinder' } },\r\n        { id: 'PlusNode', shape: { type: 'Basic', shape: 'Plus' } },\r\n        { id: 'HeptagonNode', shape: { type: 'Basic', shape: 'Heptagon' } },\r\n        { id: 'OctagonNode', shape: { type: 'Basic', shape: 'Octagon' } },\r\n        { id: 'TrapezoidNode', shape: { type: 'Basic', shape: 'Trapezoid' } },\r\n        { id: 'DecagonNode', shape: { type: 'Basic', shape: 'Decagon' } },\r\n        { id: 'RightTriangleNode', shape: { type: 'Basic', shape: 'RightTriangle' } },\r\n        { id: 'DiamondNode', shape: { type: 'Basic', shape: 'Diamond' } },\r\n        { id: 'StarNode', shape: { type: 'Basic', shape: 'Star' } }\r\n    ];\r\n\r\n    //Initializes connector symbols for the symbol palette\r\n    var connectorSymbols = [\r\n        {\r\n            id: 'connector1', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\r\n            targetDecorator: { shape: 'Arrow' }, style: { strokeWidth: 1 }\r\n        },\r\n        {\r\n            id: 'connector2', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\r\n            style: { strokeWidth: 1 }, targetDecorator: { shape: 'None' }\r\n        },\r\n        {\r\n            id: 'connector3', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\r\n            targetDecorator: { shape: 'Arrow' }, style: { strokeWidth: 1 }\r\n        },\r\n        {\r\n            id: 'connector4', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\r\n            style: { strokeWidth: 1 }, targetDecorator: { shape: 'None' }\r\n        },\r\n        {\r\n            id: 'connector5', type: 'Bezier', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\r\n            style: { strokeWidth: 1 }, targetDecorator: { shape: 'None' }\r\n        },\r\n    ];\r\n\r\n    var palettes = [\r\n        { id: 'basic', expanded: true, symbols: basicShapes, iconCss: 'e-ddb-icons e-basic', title: 'Basic Shapes' },\r\n        { id: 'connectors', expanded: true, symbols: connectorSymbols, iconCss: 'e-ddb-icons e-connector', title: 'Connectors' }\r\n    ];\r\n\r\n    //Initializes the symbol palette\r\n    var palette = new ej.diagrams.SymbolPalette({\r\n        expandMode: 'Multiple', palettes: palettes,\r\n        width: '100%', height: '700px', symbolHeight: 60, symbolWidth: 60,\r\n        symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 },\r\n        getNodeDefaults: getSymbolDefaults, getSymbolInfo: getSymbolInfo\r\n    });\r\n    palette.appendTo('#symbolpalette');\r\n\r\n    document.getElementById('clearbtn').onclick = function (args) {\r\n        var data = document.getElementById(\"EventLog\");\r\n        for (var i = data.childNodes.length - 1; i >= 0; i--) {\r\n            data.removeChild(data.childNodes[i]);\r\n        }\r\n    };\r\n\r\n\r\nfunction getEventDetails(args) {\r\n    var listView = document.getElementById(\"listview-def\");\r\n    var listViewComponent = listView.ej2_instances[0];\r\n    var selectedItems = listViewComponent.getSelectedItems();\r\n    if (selectedItems.data.length > 0) {\r\n        var elementName = getName(selectedItems, args);\r\n        if (elementName) {\r\n            eventInformation(args);\r\n        }\r\n    } else {\r\n        eventInformation(args);\r\n    }\r\n}\r\n\r\nfunction getName(selectedItems, args) {\r\n    for (var i = 0; i < selectedItems.data.length; i++) {\r\n        var eventName = selectedItems.data[i].id;\r\n        if (eventName === args.name) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction clearEventLog() {\r\n    var data = document.getElementById('EventLog');\r\n    data.innerHTML = '';\r\n}\r\n\r\nfunction eventInformation(args) {\r\n    var span = document.createElement('span');\r\n    span.innerHTML = 'Diagram ' + args.name.bold() + ' event called' + '<hr>';\r\n    var log = document.getElementById('EventLog');\r\n    log.insertBefore(span, log.firstChild);\r\n}\r\n\r\n"}