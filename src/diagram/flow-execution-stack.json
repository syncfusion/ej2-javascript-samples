{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/development/demos/diagram/flow-execution/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-8 control-section\">\n    <style>\n        #flowExecitionPropertySection .row {\n            margin-left: 0px;\n            margin-right: 0px;\n        }\n\n        #flowExecitionPropertySection .col-xs-7 {\n            width: 300px;\n        }\n\n        #flowExecitionPropertySection .col-xs-7 {\n            padding-left: 0px;\n            padding-right: 0px;\n        }\n\n        #flowExecitionControlSection.content-wrapper {\n            border: 1px solid #D7D7D7;\n        }\n    </style>\n\n    <div id=\"flowExecitionControlSection\" class=\"content-wrapper\" style=\"width: 100%;\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div id=\"flowExecitionPropertySection\" class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-header\">\n        Show flow execution\n    </div>\n    <div class=\"row property-panel-content\" id=\"appearance\">\n        <div class=\"row property-panel-content\" style=\"width:260px;\">\n            <div class=\"row\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"UnhighlightAll\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"LinksInto\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"LinksOutOf\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"LinksConnected\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"NodesInto\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"NodesOutOf\">\n\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"NodesConnected\">\n\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"NodesReachable\">\n\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}\r\nvar diagram;\r\nfunction CreateConnector(\r\n    name, source, target, content, type,\r\n    direction, targePort, length) {\r\n    var connector = {};\r\n    connector.id = name;\r\n    connector.sourceID = source;\r\n    connector.targetID = target;\r\n    connector.style = { strokeWidth: 2 };\r\n    var annotation = {};\r\n    annotation.content = content;\r\n    annotation.style = { fill: 'white' };\r\n    connector.annotations = [annotation];\r\n    connector.style.strokeColor = '#8D8D8D';\r\n    connector.targetDecorator = {};\r\n    connector.targetDecorator.style = {};\r\n    connector.targetDecorator.style.strokeColor = '#8D8D8D';\r\n    connector.targetDecorator.style.fill = '#8D8D8D';\r\n    if (targePort) {\r\n        connector.targetPortID = targePort;\r\n    }\r\n    var segment = {};\r\n    if (type) {\r\n        connector.type = type;\r\n        segment.direction = direction;\r\n        segment.type = type;\r\n        segment.length = length;\r\n        connector.segments = [segment];\r\n    }\r\n    return connector;\r\n}\r\n\r\nfunction CreateNodes(\r\n    name, offsetX, offsetY, shape, content,\r\n    width, height, ports) {\r\n    var node = {};\r\n    node.id = name;\r\n    node.offsetX = offsetX;\r\n    node.width = 150;\r\n    node.height = 50;\r\n    node.offsetY = offsetY;\r\n    var annotations = {};\r\n    annotations.content = content;\r\n    node.annotations = [annotations];\r\n    node.shape = { type: 'Flow', shape: shape };\r\n    node.style = { fill: '#FBF6E1', strokeColor: '#E8DFB6', strokeWidth: 2 };\r\n    if (ports) {\r\n        node.ports = ports;\r\n    }\r\n    return node;\r\n}\r\n\r\n    var selectedButton = 'LinksConnected';\r\n    var nodes = [];\r\n    var port1 = { id: 'port1', offset: { x: 0.5, y: 1 } };\r\n    var port = { id: 'port', offset: { x: 1, y: 0.5 } };\r\n    nodes.push(CreateNodes('node1', 100, 125, 'Terminator', 'Begin', 100, 35));\r\n    nodes.push(CreateNodes('node2', 300, 125, 'Process', 'Specify collection', 120, 25, [port]));\r\n    nodes.push(CreateNodes('node3', 500, 125, 'Decision', 'Particulars \\n required?', 100, 50, [port1]));\r\n    nodes.push(CreateNodes('node4', 730, 125, 'Process', 'Specify particulars', 90, 25));\r\n    nodes.push(CreateNodes('node5', 500, 225, 'Process', 'Design collection', 100, 25, [port]));\r\n    nodes.push(CreateNodes('node6', 500, 320, 'Process', 'Cluster of events', 100, 25));\r\n    nodes.push(CreateNodes('node7', 500, 420, 'Process', 'Start the process', 100, 25));\r\n    nodes.push(CreateNodes('node8', 730, 320, 'Process', 'Record and analyze \\n results', 170, 25, [port]));\r\n    nodes.push(CreateNodes('node9', 730, 420, 'Terminator', 'End ', 100, 35));\r\n\r\n    var connectors = [];\r\n    connectors.push(CreateConnector('connector1', 'node1', 'node2', ''));\r\n    connectors.push(CreateConnector('connector2', 'node2', 'node3', ''));\r\n    connectors.push(CreateConnector('connector3', 'node3', 'node4', 'Yes'));\r\n    connectors.push(CreateConnector('connector4', 'node3', 'node5', 'No'));\r\n    connectors.push(CreateConnector('connector5', 'node5', 'node6', ''));\r\n    connectors.push(CreateConnector('connector6', 'node6', 'node7', ''));\r\n    connectors.push(CreateConnector('connector7', 'node8', 'node6', ''));\r\n    connectors.push(CreateConnector('connector8', 'node7', 'node9', ''));\r\n    connectors.push(CreateConnector('connector10', 'node4', 'node5', '', 'Orthogonal', 'Bottom', 'port', 220));\r\n\r\n    //initialization of the Diagram.\r\n    diagram = new ej.diagrams.Diagram({\r\n        width: '100%', height: '600px', nodes: nodes, connectors: connectors,\r\n        snapSettings: { constraints: ej.diagrams.SnapConstraints.None }\r\n    });\r\n    diagram.appendTo('#diagram');\r\n\r\n    var highLightedObjects = [];\r\n    var radioButton = new ej.buttons.RadioButton({\r\n        label: 'None', name: 'radio', value: 'UnhighlightAll', change: buttonChange,\r\n    });\r\n    radioButton.appendTo('#UnhighlightAll');\r\n\r\n    radioButton = new ej.buttons.RadioButton({ label: 'Incoming connections', change: buttonChange, name: 'radio', value: 'LinksInto' });\r\n    radioButton.appendTo('#LinksInto');\r\n\r\n    radioButton = new ej.buttons.RadioButton({ label: 'Outgoing connections', change: buttonChange, name: 'radio', value: 'LinksOutOf' });\r\n    radioButton.appendTo('#LinksOutOf');\r\n\r\n    radioButton = new ej.buttons.RadioButton({ label: 'Incoming and outgoing connections', change: buttonChange, name: 'radio', value: 'LinksConnected', checked: true });\r\n    radioButton.appendTo('#LinksConnected');\r\n\r\n    radioButton = new ej.buttons.RadioButton({ label: 'Incoming nodes', change: buttonChange, name: 'radio', value: 'NodesInto' });\r\n    radioButton.appendTo('#NodesInto');\r\n\r\n    radioButton = new ej.buttons.RadioButton({ label: 'Outgoing nodes', change: buttonChange, name: 'radio', value: 'NodesOutOf' });\r\n    radioButton.appendTo('#NodesOutOf');\r\n\r\n    radioButton = new ej.buttons.RadioButton({ label: 'Incoming and outgoing nodes', change: buttonChange, name: 'radio', value: 'NodesConnected' });\r\n    radioButton.appendTo('#NodesConnected');\r\n\r\n    radioButton = new ej.buttons.RadioButton({ label: 'Adjacent nodes', change: buttonChange, name: 'radio', value: 'NodesReachable' });\r\n    radioButton.appendTo('#NodesReachable');\r\n\r\n\r\n    function buttonChange(args) {       \r\n        applyChanges(args.event.srcElement.id);\r\n        selectedButton = args.event.srcElement.id;\r\n    }\r\n\r\n    function applyChanges(id) {\r\n        Unhighlight();\r\n        switch (id) {\r\n            case 'LinksInto':\r\n                linkedIn();\r\n                break;\r\n            case 'LinksOutOf':\r\n                LinksOut();\r\n                break;\r\n            case 'LinksConnected':\r\n                LinksConnector();\r\n                break;\r\n            case 'NodesInto':\r\n                NodesIn();\r\n                break;\r\n            case 'NodesOutOf':\r\n                NodesOut();\r\n                break;\r\n            case 'NodesConnected':\r\n                NodesConnect();\r\n                break;\r\n            case 'NodesReachable':\r\n                NodeReachable();\r\n                break;\r\n        }\r\n    }\r\n    function linkedIn() {\r\n        if (diagram.selectedItems.nodes.length) {\r\n            var nodes = diagram.selectedItems.nodes[0].inEdges;\r\n            for (var i = 0; i < nodes.length; i++) {\r\n                var index = diagram.connectors.indexOf(diagram.nameTable[nodes[i]]);\r\n                highLightedObjects.push(nodes[i]);\r\n                diagram.connectors[index].style.strokeColor = '#1413F8';\r\n                diagram.connectors[index].targetDecorator.style.strokeColor = '#1413F8';\r\n                diagram.connectors[index].targetDecorator.style.fill = '#1413F8';\r\n                diagram.dataBind();\r\n            }\r\n        }\r\n    }\r\n    function LinksOut() {\r\n        if (diagram.selectedItems.nodes.length) {\r\n            var node = diagram.selectedItems.nodes[0].outEdges;\r\n            for (var i = 0; i < node.length; i++) {\r\n                var index = diagram.connectors.indexOf(diagram.nameTable[node[i]]);\r\n                highLightedObjects.push(node[i]);\r\n                diagram.connectors[index].style.strokeColor = '#1413F8';\r\n                diagram.connectors[index].targetDecorator.style.strokeColor = '#1413F8';\r\n                diagram.connectors[index].targetDecorator.style.fill = '#1413F8';\r\n                diagram.dataBind();\r\n            }\r\n        }\r\n    }\r\n    function LinksConnector() {\r\n        LinksOut();\r\n        linkedIn();\r\n    }\r\n    function NodesIn() {\r\n        if (diagram.selectedItems.nodes.length) {\r\n            var node = diagram.selectedItems.nodes[0].inEdges;\r\n            for (var i = 0; i < node.length; i++) {\r\n                var nodeId = diagram.nameTable[node[i]].sourceID;\r\n                highLightedObjects.push(nodeId);\r\n                var index = diagram.nodes.indexOf(diagram.nameTable[nodeId]);\r\n                diagram.nodes[index].style.strokeColor = '#1413F8';\r\n                diagram.dataBind();\r\n            }\r\n        }\r\n    }\r\n    function NodesOut() {\r\n        if (diagram.selectedItems.nodes.length) {\r\n            var node = diagram.selectedItems.nodes[0].outEdges;\r\n            for (var i = 0; i < node.length; i++) {\r\n                var nodeId = diagram.nameTable[node[i]].targetID;\r\n                highLightedObjects.push(nodeId);\r\n                var index = diagram.nodes.indexOf(diagram.nameTable[nodeId]);\r\n                diagram.nodes[index].style.strokeColor = '#1413F8';\r\n                diagram.dataBind();\r\n            }\r\n        }\r\n    }\r\n    function NodesConnect() {\r\n        NodesOut();\r\n        NodesIn();\r\n    }\r\n    function NodeReachable() {\r\n        if (diagram.selectedItems.nodes.length) {\r\n            var connectors_1 = diagram.selectedItems.nodes[0].outEdges;\r\n            var nodeList = foundNode(connectors_1, []);\r\n            for (var i = 0; i < nodeList.length; i++) {\r\n                var index = diagram.connectors.indexOf(diagram.nameTable[nodeList[i]]);\r\n                highLightedObjects.push(nodeList[i]);\r\n                diagram.connectors[index].style.strokeColor = '#1413F8';\r\n                diagram.connectors[index].targetDecorator.style.strokeColor = '#1413F8';\r\n                diagram.connectors[index].targetDecorator.style.fill = '#1413F8';\r\n                diagram.dataBind();\r\n            }\r\n        }\r\n    }\r\n    function foundNode(list, nodeList) {\r\n        for (var i = 0; i < list.length; i++) {\r\n            var connector = diagram.nameTable[list[i]];\r\n            if (nodeList.indexOf(connector.id) > -1) {\r\n                break;\r\n            }\r\n            if (!connector.annotations[0] || (connector.annotations[0] && connector.annotations[0].content !== 'No')) {\r\n                nodeList.push(connector.id);\r\n            }\r\n            if (diagram.nameTable[connector.targetID].outEdges.length) {\r\n                if (list.indexOf(connector.targetID) === -1) {\r\n                    foundNode(diagram.nameTable[connector.targetID].outEdges, nodeList);\r\n                }\r\n            }\r\n        }\r\n        return nodeList;\r\n    }\r\n    function Unhighlight() {\r\n        for (var i = highLightedObjects.length - 1; i >= 0; i--) {\r\n            if (diagram.nameTable[highLightedObjects[i]] instanceof ej.diagrams.Node) {\r\n                var index = diagram.nodes.indexOf(diagram.nameTable[highLightedObjects[i]]);\r\n                diagram.nodes[index].style.strokeColor = '#E8DFB6';\r\n                diagram.dataBind();\r\n            }\r\n            else {\r\n                var firstIndex = diagram.connectors.indexOf(diagram.nameTable[highLightedObjects[i]]);\r\n                diagram.connectors[firstIndex].style.strokeColor = '#8D8D8D';\r\n                diagram.connectors[firstIndex].targetDecorator.style.strokeColor = '#8D8D8D';\r\n                diagram.connectors[firstIndex].targetDecorator.style.fill = '#8D8D8D';\r\n                diagram.dataBind();\r\n            }\r\n        }\r\n        highLightedObjects = [];\r\n    }\r\n\r\n    diagram.selectionChange = function (arg) {\r\n        applyChanges(selectedButton);\r\n    };\r\n    diagram.select([diagram.nodes[2]]);\r\n\r\n"}