{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/production/demos/diagram/flow-execution/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"http://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"http://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-8 control-section\">\n    <style>\n        #flowExecitionPropertySection .row {\n            margin-left: 0px;\n            margin-right: 0px;\n        }\n\n        #flowExecitionPropertySection .col-xs-7 {\n            width: 300px;\n        }\n\n        #flowExecitionPropertySection .col-xs-7 {\n            padding-left: 0px;\n            padding-right: 0px;\n        }\n\n        #flowExecitionControlSection.content-wrapper {\n            border: 1px solid #D7D7D7;\n        }\n    </style>\n\n    <div id=\"flowExecitionControlSection\" class=\"content-wrapper\" style=\"width: 100%;\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div id=\"flowExecitionPropertySection\" class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-header\">\n        Show flow execution\n    </div>\n    <div class=\"row property-panel-content\" id=\"appearance\">\n        <div class=\"row property-panel-content\" style=\"width:260px;\">\n            <div class=\"row\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"UnhighlightAll\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"LinksInto\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"LinksOutOf\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"LinksConnected\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"NodesInto\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"NodesOutOf\">\n\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"NodesConnected\">\n\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"NodesReachable\">\n\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}\nvar diagram;\nfunction CreateConnector(\n    name, source, target, content, type,\n    direction, targePort, length) {\n    var connector = {};\n    connector.id = name;\n    connector.sourceID = source;\n    connector.targetID = target;\n    connector.style = { strokeWidth: 2 };\n    var annotation = {};\n    annotation.content = content;\n    annotation.style = { fill: 'white' };\n    connector.annotations = [annotation];\n    connector.style.strokeColor = '#8D8D8D';\n    connector.targetDecorator = {};\n    connector.targetDecorator.style = {};\n    connector.targetDecorator.style.strokeColor = '#8D8D8D';\n    connector.targetDecorator.style.fill = '#8D8D8D';\n    if (targePort) {\n        connector.targetPortID = targePort;\n    }\n    var segment = {};\n    if (type) {\n        connector.type = type;\n        segment.direction = direction;\n        segment.type = type;\n        segment.length = length;\n        connector.segments = [segment];\n    }\n    return connector;\n}\n\nfunction CreateNodes(\n    name, offsetX, offsetY, shape, content,\n    width, height, ports) {\n    var node = {};\n    node.id = name;\n    node.offsetX = offsetX;\n    node.width = 150;\n    node.height = 50;\n    node.offsetY = offsetY;\n    var annotations = {};\n    annotations.content = content;\n    node.annotations = [annotations];\n    node.shape = { type: 'Flow', shape: shape };\n    node.style = { fill: '#FBF6E1', strokeColor: '#E8DFB6', strokeWidth: 2 };\n    if (ports) {\n        node.ports = ports;\n    }\n    return node;\n}\n\n    var nodes = [];\n    var port1 = { id: 'port1', offset: { x: 0.5, y: 1 } };\n    var port = { id: 'port', offset: { x: 1, y: 0.5 } };\n    nodes.push(CreateNodes('node1', 100, 125, 'Terminator', 'Begin', 100, 35));\n    nodes.push(CreateNodes('node2', 300, 125, 'Process', 'Specify collection', 120, 25, [port]));\n    nodes.push(CreateNodes('node3', 500, 125, 'Decision', 'Particulars \\n required?', 100, 50, [port1]));\n    nodes.push(CreateNodes('node4', 730, 125, 'Process', 'Specify particulars', 90, 25));\n    nodes.push(CreateNodes('node5', 500, 225, 'Process', 'Design collection', 100, 25, [port]));\n    nodes.push(CreateNodes('node6', 500, 320, 'Process', 'Cluster of events', 100, 25));\n    nodes.push(CreateNodes('node7', 500, 420, 'Process', 'Start the process', 100, 25));\n    nodes.push(CreateNodes('node8', 730, 320, 'Process', 'Record and analyze \\n results', 170, 25, [port]));\n    nodes.push(CreateNodes('node9', 730, 420, 'Terminator', 'End ', 100, 35));\n\n    var connectors = [];\n    connectors.push(CreateConnector('connector1', 'node1', 'node2', ''));\n    connectors.push(CreateConnector('connector2', 'node2', 'node3', ''));\n    connectors.push(CreateConnector('connector3', 'node3', 'node4', 'Yes'));\n    connectors.push(CreateConnector('connector4', 'node3', 'node5', 'No'));\n    connectors.push(CreateConnector('connector5', 'node5', 'node6', ''));\n    connectors.push(CreateConnector('connector6', 'node6', 'node7', ''));\n    connectors.push(CreateConnector('connector7', 'node8', 'node6', ''));\n    connectors.push(CreateConnector('connector8', 'node7', 'node9', ''));\n    connectors.push(CreateConnector('connector10', 'node4', 'node5', '', 'Orthogonal', 'Bottom', 'port', 220));\n\n    //initialization of the Diagram.\n    diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '600px', nodes: nodes, connectors: connectors,\n        snapSettings: { constraints: ej.diagrams.SnapConstraints.None }\n    });\n    diagram.appendTo('#diagram');\n\n    var highLightedObjects = [];\n    var currentButton = 'UnhighlightAll';\n    var radioButton = new ej.buttons.RadioButton({\n        label: 'None', name: 'radio', value: 'UnhighlightAll', change: buttonChange, checked: true\n    });\n    radioButton.appendTo('#UnhighlightAll');\n\n    radioButton = new ej.buttons.RadioButton({ label: 'Incoming connections', change: buttonChange, name: 'radio', value: 'LinksInto' });\n    radioButton.appendTo('#LinksInto');\n\n    radioButton = new ej.buttons.RadioButton({ label: 'Outgoing connections', change: buttonChange, name: 'radio', value: 'LinksOutOf' });\n    radioButton.appendTo('#LinksOutOf');\n\n    radioButton = new ej.buttons.RadioButton({ label: 'Incoming and outgoing connections', change: buttonChange, name: 'radio', value: 'LinksConnected' });\n    radioButton.appendTo('#LinksConnected');\n\n    radioButton = new ej.buttons.RadioButton({ label: 'Incoming nodes', change: buttonChange, name: 'radio', value: 'NodesInto' });\n    radioButton.appendTo('#NodesInto');\n\n    radioButton = new ej.buttons.RadioButton({ label: 'Outgoing nodes', change: buttonChange, name: 'radio', value: 'NodesOutOf' });\n    radioButton.appendTo('#NodesOutOf');\n\n    radioButton = new ej.buttons.RadioButton({ label: 'Incoming and outgoing nodes', change: buttonChange, name: 'radio', value: 'NodesConnected' });\n    radioButton.appendTo('#NodesConnected');\n\n    radioButton = new ej.buttons.RadioButton({ label: 'Adjacent nodes', change: buttonChange, name: 'radio', value: 'NodesReachable' });\n    radioButton.appendTo('#NodesReachable');\n\n\n    function buttonChange(args) {\n        currentButton = args.event.srcElement.id;\n        applyChanges(args.event.srcElement.id);\n    }\n\n    function applyChanges(id) {\n        Unhighlight();\n        switch (id) {\n            case 'LinksInto':\n                linkedIn();\n                break;\n            case 'LinksOutOf':\n                LinksOut();\n                break;\n            case 'LinksConnected':\n                LinksConnector();\n                break;\n            case 'NodesInto':\n                NodesIn();\n                break;\n            case 'NodesOutOf':\n                NodesOut();\n                break;\n            case 'NodesConnected':\n                NodesConnect();\n                break;\n            case 'NodesReachable':\n                NodeReachable();\n                break;\n        }\n    }\n    function linkedIn() {\n        if (diagram.selectedItems.nodes.length) {\n            var nodes = diagram.selectedItems.nodes[0].inEdges;\n            for (var i = 0; i < nodes.length; i++) {\n                var index = diagram.connectors.indexOf(diagram.nameTable[nodes[i]]);\n                highLightedObjects.push(nodes[i]);\n                diagram.connectors[index].style.strokeColor = '#1413F8';\n                diagram.connectors[index].targetDecorator.style.strokeColor = '#1413F8';\n                diagram.connectors[index].targetDecorator.style.fill = '#1413F8';\n                diagram.dataBind();\n            }\n        }\n    }\n    function LinksOut() {\n        if (diagram.selectedItems.nodes.length) {\n            var node = diagram.selectedItems.nodes[0].outEdges;\n            for (var i = 0; i < node.length; i++) {\n                var index = diagram.connectors.indexOf(diagram.nameTable[node[i]]);\n                highLightedObjects.push(node[i]);\n                diagram.connectors[index].style.strokeColor = '#1413F8';\n                diagram.connectors[index].targetDecorator.style.strokeColor = '#1413F8';\n                diagram.connectors[index].targetDecorator.style.fill = '#1413F8';\n                diagram.dataBind();\n            }\n        }\n    }\n    function LinksConnector() {\n        LinksOut();\n        linkedIn();\n    }\n    function NodesIn() {\n        if (diagram.selectedItems.nodes.length) {\n            var node = diagram.selectedItems.nodes[0].inEdges;\n            for (var i = 0; i < node.length; i++) {\n                var nodeId = diagram.nameTable[node[i]].sourceID;\n                highLightedObjects.push(nodeId);\n                var index = diagram.nodes.indexOf(diagram.nameTable[nodeId]);\n                diagram.nodes[index].style.strokeColor = '#1413F8';\n                diagram.dataBind();\n            }\n        }\n    }\n    function NodesOut() {\n        if (diagram.selectedItems.nodes.length) {\n            var node = diagram.selectedItems.nodes[0].outEdges;\n            for (var i = 0; i < node.length; i++) {\n                var nodeId = diagram.nameTable[node[i]].targetID;\n                highLightedObjects.push(nodeId);\n                var index = diagram.nodes.indexOf(diagram.nameTable[nodeId]);\n                diagram.nodes[index].style.strokeColor = '#1413F8';\n                diagram.dataBind();\n            }\n        }\n    }\n    function NodesConnect() {\n        NodesOut();\n        NodesIn();\n    }\n    function NodeReachable() {\n        if (diagram.selectedItems.nodes.length) {\n            var connectors_1 = diagram.selectedItems.nodes[0].outEdges;\n            var nodeList = foundNode(connectors_1, []);\n            for (var i = 0; i < nodeList.length; i++) {\n                var index = diagram.connectors.indexOf(diagram.nameTable[nodeList[i]]);\n                highLightedObjects.push(nodeList[i]);\n                diagram.connectors[index].style.strokeColor = '#1413F8';\n                diagram.connectors[index].targetDecorator.style.strokeColor = '#1413F8';\n                diagram.connectors[index].targetDecorator.style.fill = '#1413F8';\n                diagram.dataBind();\n            }\n        }\n    }\n    function foundNode(list, nodeList) {\n        for (var i = 0; i < list.length; i++) {\n            var connector = diagram.nameTable[list[i]];\n            if (nodeList.indexOf(connector.id) > -1) {\n                break;\n            }\n            if (!connector.annotations[0] || (connector.annotations[0] && connector.annotations[0].content !== 'No')) {\n                nodeList.push(connector.id);\n            }\n            if (diagram.nameTable[connector.targetID].outEdges.length) {\n                if (list.indexOf(connector.targetID) === -1) {\n                    foundNode(diagram.nameTable[connector.targetID].outEdges, nodeList);\n                }\n            }\n        }\n        return nodeList;\n    }\n    function Unhighlight() {\n        for (var i = highLightedObjects.length - 1; i >= 0; i--) {\n            if (diagram.nameTable[highLightedObjects[i]] instanceof ej.diagrams.Node) {\n                var index = diagram.nodes.indexOf(diagram.nameTable[highLightedObjects[i]]);\n                diagram.nodes[index].style.strokeColor = '#E8DFB6';\n                diagram.dataBind();\n            }\n            else {\n                var firstIndex = diagram.connectors.indexOf(diagram.nameTable[highLightedObjects[i]]);\n                diagram.connectors[firstIndex].style.strokeColor = '#8D8D8D';\n                diagram.connectors[firstIndex].targetDecorator.style.strokeColor = '#8D8D8D';\n                diagram.connectors[firstIndex].targetDecorator.style.fill = '#8D8D8D';\n                diagram.dataBind();\n            }\n        }\n        highLightedObjects = [];\n    }\n\n    diagram.selectionChange = function (arg) {\n        applyChanges(currentButton);\n    };\n    diagram.select([diagram.nodes[2]]);\n\n"}