{"index.html":"<html><head><script src=\"http://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"http://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div>\n    <div class=\"col-md-8 control-section\">\n        <div class=\"content-wrapper\">\n            <div id=\"axisContainer\"></div>\n        </div>\n    </div>\n    <!-- property panel -->\n    <div class=\"col-md-4 property-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%;\">\n            <tbody><tr>\n                <td>\n                    <div id=\"minValue\">Axis Minimum\n                        <span>&#xA0;&#xA0;&#xA0;0</span>\n                    </div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"range\" step=\"5\" id=\"min\" value=\"0\" min=\"0\" max=\"100\" style=\"width:90%;\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div id=\"maxValue\">Axis Maximum\n                        <span>&#xA0;&#xA0;&#xA0;100</span>\n                    </div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"range\" step=\"5\" id=\"max\" value=\"100\" min=\"0\" max=\"100\" style=\"width:90%;\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Axis Inversed</div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"checkbox\" id=\"axisInversed\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Axis Opposed</div>\n                </td>\n                <td>\n                    <div>\n                        <input type=\"checkbox\" id=\"opposed\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Label Format</div>\n                </td>\n                <td>\n                    <div class=\"e-float-input\" style=\"margin-top: 0px;\">\n                        <input type=\"text\" value=\"{value}\" id=\"format\" class=\"form-control\" style=\"width:90%\">\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Pointer type</div>\n                </td>\n                <td>\n                    <div>\n                        <select name=\"selectIndex\" autocomplete=\"off\" id=\"pointerType\" class=\"form-control\" style=\"width:90%\">\n                            <option value=\"Marker\">Marker</option>\n                            <option value=\"Bar\">Bar</option>\n                        </select>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div>Marker Placement</div>\n                </td>\n                <td>\n                    <div>\n                        <select name=\"selectIndex\" autocomplete=\"off\" id=\"pointerPlace\" class=\"form-control\" style=\"width:90%\">\n                            <option value=\"Far\">Far</option>\n                            <option value=\"Near\">Near</option>\n                            <option value=\"Center\">Center</option>\n                        </select>\n                    </div>\n                </td>\n            </tr>\n        </tbody></table>\n    </div>\n</div>\n\n\n","index.js":"{{ripple}}/**\n * Axes Sample\n */\n\n    var gauge = new ej.lineargauge.LinearGauge(linearAxes());\n    gauge.appendTo('#axisContainer');\n    // code for property panel\n    document.getElementById('opposed').onchange = function (sender) {\n        var ele = document.getElementById('opposed');\n        gauge.axes[0].opposedPosition = ele.checked;\n        if (ele.checked) {\n            gauge.axes[0].pointers[0].placement = 'Near';\n            gauge.axes[0].pointers[0].markerType = 'Triangle';\n            gauge.axes[0].pointers[0].offset = -20;\n            gauge.axes[0].labelStyle.offset = 0;\n            gauge.annotations[0].x = 10;\n            gauge.annotations[0].y = -60;\n        }\n        else {\n            gauge.axes[0].pointers[0].placement = 'Far';\n            gauge.axes[0].pointers[0].offset = 0;\n            gauge.axes[0].pointers[0].offset = 30;\n            gauge.axes[0].pointers[0].markerType = 'InvertedTriangle';\n            gauge.axes[0].labelStyle.offset = 38;\n            gauge.annotations[0].x = 10;\n            gauge.annotations[0].y = 60;\n        }\n        gauge.refresh();\n    };\n    document.getElementById('axisInversed').onchange = function (sender) {\n        var ele = document.getElementById('axisInversed');\n        gauge.axes[0].isInversed = ele.checked;\n        gauge.refresh();\n    };\n    document.getElementById('min').ontouchmove = document.getElementById('min').onpointermove =\n        document.getElementById('min').onchange = function () {\n            var min = document.getElementById('min');\n            var max = document.getElementById('max');\n            gauge.axes[0].minimum = parseInt(min.value, 10);\n            gauge.axes[0].maximum = parseInt(max.value, 10);\n            document.getElementById('minValue').innerHTML = 'Axis Minimum <span>&nbsp;&nbsp;&nbsp;' + min.value;\n            gauge.refresh();\n            gauge.annotations[0].axisValue = gauge.axes[0].pointers[0].currentValue;\n            gauge.refresh();\n        };\n    document.getElementById('max').ontouchmove = document.getElementById('max').onpointermove =\n        document.getElementById('max').onchange = function () {\n            var min = document.getElementById('min');\n            var max = document.getElementById('max');\n            gauge.axes[0].maximum = parseInt(max.value, 10);\n            gauge.axes[0].minimum = parseInt(min.value, 10);\n            document.getElementById('maxValue').innerHTML = 'Axis Maximum <span>&nbsp;&nbsp;&nbsp;' + max.value;\n            gauge.refresh();\n            gauge.annotations[0].axisValue = gauge.axes[0].pointers[0].currentValue;\n            gauge.refresh();\n        };\n    document.getElementById('format').onchange = function () {\n        var ele = document.getElementById('format');\n        gauge.axes[0].labelStyle.format = ele.value.indexOf('{value}') > -1 ? ele.value : gauge.axes[0].labelStyle.format;\n        gauge.refresh();\n    };\n    var pointerPlace = new ej.dropdowns.DropDownList({\n        index: 0,\n        placeholder: 'Select Range Bar Color',\n        width: 120,\n        change: function () {\n            gauge.axes[0].pointers[0].placement = pointerPlace.value;\n            gauge.refresh();\n        }\n    });\n    pointerPlace.appendTo('#pointerPlace');\n    var pointerType = new ej.dropdowns.DropDownList({\n        index: 0,\n        placeholder: 'Select Range Bar Color',\n        width: 120,\n        change: function () {\n            gauge.axes[0].pointers[0].type = pointerType.value;\n            pointerPlace.enabled = (pointerType.value === 'Marker');\n            gauge.refresh();\n        }\n    });\n    pointerType.appendTo('#pointerType');\n\nfunction getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n}\n/**\n * Code for Linear gauge\n */\nfunction linearAxes() {\n    var gauge = new ej.lineargauge.LinearGauge({\n\n        orientation: 'Horizontal',\n        axes: [{\n            line: {\n                color: '#9E9E9E'\n            },\n            pointers: [{\n                value: 10,\n                height: 15,\n                width: 15,\n                color: '#757575',\n                offset: 30\n            }],\n            majorTicks: {\n                color: '#9E9E9E',\n                interval: 10\n            },\n            minorTicks: {\n                color: '#9E9E9E',\n                interval: 2\n            },\n            labelStyle: {\n                offset: 48\n            }\n        }],\n        annotations: [{\n            content: '<div id=\"pointer\" style=\"width:70px\"><h1 style=\"font-size:14px;\">' +\n            '${axes[0].pointers[0].currentValue} MPH</h1></div>',\n            axisIndex: 0,\n            axisValue: 10,\n            x: 10,\n            y: 60, zIndex: '1'\n        }]\n    });\n    return gauge;\n}"}