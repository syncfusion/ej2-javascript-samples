{"index.html":"<html><head><script src=\"//npmci.syncfusion.com/development/demos/range-navigator/period-selector-stocks/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div style=\"width: 90%\">\n        <div id=\"stockRange\" style=\"font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:14px;\">\n            <div id=\"title\">AAPL 2012-2015</div>\n            <div id=\"close\" style=\" font-size:10px\">\n                <div id=\"value\" style=\"float: left;\">159.67</div>\n                <div id=\"inc\" style=\"float: left; color: green;\">&#xA0;&#xA0;&#xA0;+11.49 (+1.06%)</div>\n            </div>\n        </div>\n    </div>\n    <br>\n    <div id=\"container\" align=\"center\"></div>\n    <div id=\"chart\" align=\"center\"></div>\n    \n    \n    <style>\n        #control-container {\n            padding: 0px !important;\n        }\n\n        #chart_tooltip {\n            opacity: 0;\n        }\n\n        #chart_HorizontalLine,\n        #chart_VerticalLine {\n            stroke-dasharray: 2\n        }\n    </style></div></div></body></html>","index.js":"{{ripple}}/**\r\n * Sample for stock chart\r\n */\r\n    var index = 0;\r\n    var selectedTheme = location.hash.split('/')[1];\r\n    selectedTheme = selectedTheme ? selectedTheme : 'Material';\r\n    var theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, 'Dark');\r\n    var removeSecondaryElement;\r\n    var periodsValue = {\r\n        position: 'Top',\r\n        periods: [\r\n            { text: '1M', interval: 1, intervalType: 'Months' }, { text: '3M', interval: 3, intervalType: 'Months' },\r\n            { text: '6M', interval: 6, intervalType: 'Months' }, { text: 'YTD' },\r\n            { text: '1Y', interval: 1, intervalType: 'Years' },\r\n            { text: '2Y', interval: 2, intervalType: 'Years', selected: true\r\n            },\r\n            { text: 'All' }\r\n        ]\r\n    };\r\n    var annotationString = '<div id=\"annotation\" style=\"line-height: 18px;' +\r\n        ' font-size: 13px;background: #fff; opacity:0.9; color: #464e56; ' +\r\n        ' box-shadow:0 0 8px 0 rgba(70,78,86,.25); padding: 7px 10px;' +\r\n        ' border-radius: 3px\">';\r\n    removeSecondaryElement = function () {\r\n        setTimeout(function () {\r\n            if (ej.charts.getElement('annotation')) {\r\n                ej.base.remove(ej.charts.getElement('annotation'));\r\n            }\r\n        }, 2000);\r\n    };\r\n    var range;\r\n    var pointColors = [];\r\n    var chartSeries = [{\r\n            dataSource: window.chartData, width: 2, type: 'Candle', animation: { enable: true },\r\n            xName: 'x', yName: 'y', low: 'low', high: 'high', close: 'close', volume: 'volume', open: 'open',\r\n            name: 'Apple Inc', bearFillColor: '#2ecd71', bullFillColor: '#e74c3d'\r\n        }, {\r\n            dataSource: window.chartData, width: 2, type: 'Column', animation: { enable: true },\r\n            xName: 'x', yName: 'volume', yAxisName: 'secondary'\r\n        }];\r\n    var getContent = function (value) {\r\n        var text = value.split('<br/>');\r\n        var html = '<table><thead>' + text[0] + '</thead>';\r\n        for (var i = 1; i < text.length; i++) {\r\n            var value1 = text[i].split(':');\r\n            if (i === text.length - 1) {\r\n                html += '<tr><td style=\"opacity:0.5\">' + value1[0] + '</td><td style=\"padding-left: 5px;\">' +\r\n                    Math.round(((+value1[1].split('</b>')[0].split('<b>')[1]) / 10000000)) + 'B';\r\n            }\r\n            else {\r\n                html += '<tr><td style=\"opacity:0.5\">' + value1[0] + '</td><td style=\"padding-left: 5px;\">$' +\r\n                    (+value1[1].split(' <b>')[1].split('</b>')[0]).toFixed(2) + '</td></tr>';\r\n            }\r\n        }\r\n        return html;\r\n    };\r\n    \r\n        var chart = new ej.charts.Chart({\r\n            primaryXAxis: { valueType: 'DateTime', majorGridLines: { width: 0 }, crosshairTooltip: { enable: true } },\r\n            annotations: [\r\n                { content: '<div id=\"annotation\"></div>', coordinateUnits: 'Pixel', region: 'Chart', x: '15%', y: '20%' }\r\n            ],\r\n            primaryYAxis: {\r\n                crosshairTooltip: { enable: true }, labelFormat: 'n0', plotOffset: 25,\r\n                rowIndex: 1, opposedPosition: true, lineStyle: { width: 0 }, rangePadding: 'None', majorGridLines: { width: 0 }\r\n            }, rows: [{ height: '30%' }, { height: '70%' }],\r\n            axes: [{\r\n                    name: 'secondary', opposedPosition: true, rowIndex: 0,\r\n                    majorGridLines: { width: 0 }, lineStyle: { width: 0 }, majorTickLines: { width: 0 }, rangePadding: 'None'\r\n                }], height: '350',\r\n            axisLabelRender: function (args) {\r\n                if (args.axis.name === 'secondary') {\r\n                    args.text = Math.round((args.value / 10000000)) + 'B';\r\n                }\r\n                else if (args.axis.orientation === 'Vertical') {\r\n                    args.text = '$' + Math.round(args.value);\r\n                }\r\n            },\r\n            axisRangeCalculated: function (args) {\r\n                chart.setAnnotationValue(0, '<div></div>');\r\n            },\r\n            loaded: function (args) {\r\n                var labels = (args.chart.axisCollections[0]).visibleLabels;\r\n                var maxValue = args.chart.axisCollections[0].visibleRange.max;\r\n                if (args.chart.primaryXAxis.stripLines.length === 1) {\r\n                    for (var i = 0; i < labels.length; i += 2) {\r\n                        args.chart.primaryXAxis.stripLines.push({\r\n                            start: new Date(labels[i].value), end: labels[i + 1] ? new Date(labels[i + 1].value) : new Date(maxValue),\r\n                            zIndex: 'Behind', border: { width: 0, color: 'transparent' }, rotation: null,\r\n                            opacity: 0.7, textStyle: {}, text: '', color: 'whitesmoke', visible: true\r\n                        });\r\n                    }\r\n                    args.chart.refresh();\r\n                }\r\n            },\r\n            series: chartSeries, tooltip: {\r\n                enable: true, shared: true,\r\n                format: '${point.x}<br/>High : <b>${point.high}</b><br/>Low :' +\r\n                    ' <b>${point.low}</b><br/>Open : <b>${point.open}</b><br/>Close : <b>${point.close}</b><br/>Volume : <b>${point.volume}</b>'\r\n            },\r\n            indicators: [{\r\n                    type: 'Tma', period: 3, fastPeriod: 8, slowPeriod: 5, seriesName: 'Apple Inc', macdType: 'Both', width: 2,\r\n                    macdPositiveColor: '#2ecd71', macdNegativeColor: '#e74c3d', fill: '#6063ff'\r\n                }],\r\n            tooltipRender: function (args) {\r\n                if (args.series.type === 'Candle') {\r\n                    chart.setAnnotationValue(0, annotationString + (getContent(args.text) + '</table>') + '</div>');\r\n                }\r\n                args.text = '';\r\n            },\r\n            pointRender: function (args) {\r\n                if (args.series.type === 'Candle') {\r\n                    pointColors.push(args.fill);\r\n                }\r\n                else {\r\n                    args.fill = pointColors[args.point.index];\r\n                }\r\n            },\r\n            chartMouseLeave: function (args) { removeSecondaryElement(); },\r\n            chartMouseMove: function (args) {\r\n                if (!ej.charts.withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect)) {\r\n                    removeSecondaryElement();\r\n                }\r\n            }, margin: { top: 0 }, chartArea: { border: { width: 1, color: 'whitesmoke' } },\r\n            zoomSettings: { enableMouseWheelZooming: true, enablePinchZooming: true, mode: 'XY', toolbarItems: [] }, crosshair: { enable: true, lineType: 'Both' },\r\n            width: ej.base.Browser.isDevice ? '100%' : '80%', theme: theme, legendSettings: { visible: false }\r\n        });\r\n        chart.appendTo('#chart');\r\n        range = new ej.charts.RangeNavigator({\r\n            valueType: 'DateTime',\r\n            disableRangeSelector: true,\r\n            dataSource: window.chartData, xName: 'x', yName: 'close', theme: theme,\r\n            width: ej.base.Browser.isDevice ? '100%' : '75%',\r\n            load: function (args) {\r\n                args.rangeNavigator.periodSelectorSettings.height = document.body.className.indexOf('e-bigger') > -1 ? 56 : 42;\r\n            }, periodSelectorSettings: periodsValue,\r\n            loaded: function (args) {\r\n                if (!ej.base.Browser.isDevice) {\r\n                    document.getElementById('container_Secondary_Element').style.transform = 'translate(14%)';\r\n                }\r\n                var value = range.svgObject.getBoundingClientRect().left - range.element.getBoundingClientRect().left;\r\n                document.getElementById('stockRange').style.transform = 'translateX(' + (value - 10) + 'px)';\r\n            },\r\n            changed: function (args) {\r\n                var data = window.chartData.filter(function (data) {\r\n                    return (data.x.getTime() >= args.start.getTime() &&\r\n                        data.x.getTime() <= args.end.getTime());\r\n                });\r\n                chart.series[0].animation.enable = false;\r\n                chart.primaryXAxis.zoomPosition = 0;\r\n                chart.primaryXAxis.zoomFactor = 1;\r\n                chart.series[1].animation.enable = false;\r\n                chart.primaryXAxis.stripLines = [{ visible: true }];\r\n                chart.indicators[0].animation.enable = false;\r\n                pointColors = [];\r\n                chart.series[0].dataSource = data;\r\n                chart.series[1].dataSource = data;\r\n                chart.refresh();\r\n                chart.setAnnotationValue(0, '<div id=\"annotation\"></div>');\r\n            }\r\n        });\r\n        range.appendTo('#container');\r\n"}